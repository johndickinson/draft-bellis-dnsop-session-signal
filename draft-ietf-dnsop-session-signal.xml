<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7788 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7788.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-12" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived.</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests in the usual DNS sense.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket in the usual DNS sense.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not induce a DNS response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST NOT be carried in protocols and
environments where a session can’t be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of DSO keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.   In the first
case, the client SHOULD mark the server as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate.</t>

<t>In the second case, the client SHOULD set a reasonable timeout, after
which time the server will be assumed not to support DSO.   At this
point the client MUST drop the connection to the server, since the
server’s behavior is out of spec, and hence its state is undefined.
The client MAY reconnect, but not use DSO, if appropriate.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because the Keepalive TLV can’t fail (that is, can’t return an RCODE
other than NOERROR), it is an ideal candidate for use in establishing
a DSO session.   Any other option that can only succeed MAY also be
used to establish a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described below in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>When a new TLV is defined, the specification MUST include whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context for both requests and responses.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks query MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a query it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the server does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When an unacknowledged DSO message type is received (MESSAGE ID field is zero), the receiver SHOULD already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver aborting the connection.
When an unacknowledged DSO
message of an unexpected type is received, the receiver should abort the connection.
Other internal errors processing the unacknowledged DSO message are
implementation dependent as to whether the connection should be aborted
according to the severity of the error.</t>

<t>When an acknowledged DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.
This prevents TCP’s delayed acknowledgement algorithm from forcing the
client into a slow lock-step.
The server MUST act on messages in the order they are transmitted, but
when responses to those messages become available out of order, the server
SHOULD NOT delay sending available responses to respond in order.
<xref target="RFC7788"/> section 3.3 specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open with no operations pending
(e.g., an outstanding DNS Push request)
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unacknowledged DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unacknowledged DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns-tcp-keepalive-edns0-option" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unacknowledged message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unacknowledged message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X                 |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an increasing impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC2782;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&RFC7788;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
DqKFwT6BEFkKiqXQLW4TXBO0hTaSxTMh6Zrsm7EhEbI1y8R0TfSUc3IxB6M0
4yYcPqcktt9VOJo3wu2iIjhvfMtjRAMEDQGRO+DRjx9pdkRnC7eS3GlDe1Ev
nSmOlvSMHtRLn0B0K+4lqY0SbeSKWWRUBp38NEzM/gXJ3S5ZyFx5m1bVthfo
UhqTDxl+PZcLarIRzFyOWghsipbmdx2GpSxXIMxb82W81fpuR273Dtk0Wr8h
f+9d6qKMuv8tEKMCS4P9afN16gs3yNLBBRv8Ry2q9aLLSTlGO8VQoXIZVqUZ
6k9bh4uMhpRm0hi1HyuelUemBEoPXXN63AcQQSbu7QBUiMDncW90z6ySSSbJ
HUhHXwmwlexwv7BU+qlyAlG8SMztMXMgJWkItIScfJgGLt2EtzY93dz1I9TD
KrDCKOOVSmIW7VZjJnHBKVoSNt7CBg5p3kgCMrlIaJY5qxAoPSnzHdmWukpM
TFVxx3ka97NA3S8AH1F32YK91+Tvs4drP59kkxEz74EAesHHLkstg+lYyfwC
2coj7YrohVi/4/SuoYxEweF9fz3vbgp7XGw7p6uFW6zIsYP+wIsozwrLzU2U
Y8e3jaemdAPMM+IcUfTDUnOaGG2aW8L5Kp/dSQAezFTcjuoNa5OSkKh8RsBd
idf21izUopDSx6IjiImkIU+R9jXGEGFvgPURai7C94RUBrdRNEX3ye68IeFh
v0mcvoeHZKOdf/fw4NrEV/YzkPdcjxpjVS1iGmpGv+sQo7C+3whNxkPESY6g
DOYi1iWDQLrMdXuAD0tJSpcuuDDFi11dnOssLl2CQJxvaXF1D5Pr+thSwDrX
zIok6QloJGcrdiWJ8iZKZrKYUDJ1a+XcYK0cTzy02aSIShJnUqEQbqTpJGnE
w+eQjou4lQOx7A3iUU98LYb158tlAjL+Oq8a8riThb47HDdiFpj6LoJU7NEE
pKRy0R1BpouPUT/GzF4LrMZEZGjVG2i5QivU178rhiPzYkp1LiuU9PuU7kgt
oggA1uMH3ydHragA2q1ZP+XoU52tCxexCrXQfqlOwgZudl3EYQ9dvIfJJ+6h
a+9hh1TLvHh36za6eBvbg+zaQ0tpT4nSo9PaLPxbI7HqdPqCBNE5eXGwjb33
6IBWvlyKmat+Db3+1QLFtidB/8R/tRXePQqD9+nIe6NEiU+mFXaQpJvXN8aQ
+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
C+sXWwQGkwEA

-->

</rfc>

