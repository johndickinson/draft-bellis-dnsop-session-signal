<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination,
as well as defining new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the message format for DNS Stateful Operations
(see <xref target="format"/>) differs from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DNS Stateful Operations format, this
will result in the Stateful Operations data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the Stateful Operations data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to the use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in anyway 
with normal DNS operations or with existing EDNS(0) based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DNS Stateful Operations there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DNS Stateful Operations
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a DNS Stateful Operation request message)
or a responder (when sending a DNS Stateful Operation response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a DNS Stateful Operation request message)
or an initiator (when receiving a DNS Stateful Operation response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful
Operations including definitions of three TLVs for session management and 
encryption padding. <xref target="lifecycle"/> presents a
detailed discussion of the DSO Session lifecycle including an
in-depth discussion of keepalive traffic and session termination.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a response message the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN (Name Error)
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for the software to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications,
the subsequent event notifications are then sent as unacknowledged
request messages, and this is appropriate because the client initiated
the message stream by virtue of its Push Notification subscription,
thereby indicating its support of Push Notifications, and its
desire to receive event notifications <xref target="I-D.ietf-dnssd-push"/>.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged request messages, and
this is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO Session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.
This is not great, because it results in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.
This is not great, because it results in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO Session begin as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in larger memory burden to maintain state for
inactive DSO Sessions, but lower traffic and CPU load on the server.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed times
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the 16-bit DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAPIBUFoAA+19W3vbRpbge/0KrPwQKUMykp04iefbb1ux5ETdtuWW5O7p
eZkPJEEJMQlwAFAy2/Z/33OtOoULJSee3t7dcY8mEgnU5dSpc7+Mx2PX5M0y
e5acvL5MLpu0yRabZXK+zqq0ycuidvNyVqQreGBepYtmnGfNYjwv6nI9rrO6
hkfGdX5dpMvx4XduDq8/Sx4fHn0/PjoaPzl0+bp6ljTVpm4eHx7+ePjYpVWW
PkvOiiariqxxd9c08fmb5K9l9S4vrpOfq3Kzdu/uwkPjE5zYzdLmWVI3c7dZ
4zT1s+TixfPk+++fPh3Rb0eHT75zblbOYZRnyQZW+YNb589ckoyTppzRf+vt
qsoWNf9eVg394dJNc1NW9CT8JEle4OCT5Kdsucxr+oghcJFu7YdldR1WmVxu
6yZb1clzABoMnW9WI/hyNqFH0+m0ym7h6cvn9HcNU2ewnx+/O0ye36QVjAHA
x8/o61nebGG6bH5XlvPkOfzFH5dzWMXz4+THbw+fPpGPNkVTwcNvL4/pg/VN
WcBD/3KUPIWxv338JDkC0NNX2SrNl8+SKt3+Ia9nE1h+vOXLCawlq2/yKjOb
vmw2sL74G9r58Xq9zMIWdUtH8NEiL/ImS16W5drs5/kGsKrJi7K1me8Oj769
bzPfHv6Q/Pj9t8mTx4ff283MZFl/SHE1k1m5ivf0x0lyks8As+qyMJv6Y3lT
tL6gPV3C6uabIpzqVTa7KcpleZ1ndXSS8qTdOv0+Tl6l1+k8XWZF8jyD7WTy
8fn7RVnNk8tZnhWzLHmTVu8MbPhbA5jzf/s2+fbn4xZcEKzz5E+A4nPaqYfD
r+n8DzUvqQuEy34gXKZV+v8UEGrY0DAUjiewqgI2a0BwjJe5LOwXDAJYeg2L
mWV2/JSfnqzo6T9c46fdea4myZtNDSSqys1MV+Uq/pjmeVuki0W+zOHjeXSL
9vYsIYDV5Nc3BjCvnyePv396+MN91+bHox+TH55+nxw9eRLRgLWs5A/TtLj+
lfbg8gI2vAKqf5vhKb5Or5fZyTEfaJNW17ism6ZZP/vmm7u7u0lNdEHvH1KT
b9YpXPD6mwLfnGfLdJvN09m7b3gE5jJXz98kb7KKZkIMWFfldIlkc5ZuajjV
6RaACCtLZ8h9kmnW3GWARLSYr2o4r+uyypubVZIW8+SE50iOn/+J0dIT8t3k
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
Gx0D+naCHAEA

-->

</rfc>

