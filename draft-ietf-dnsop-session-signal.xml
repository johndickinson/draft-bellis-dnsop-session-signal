<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination,
as well as defining new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the message format for DNS Stateful Operations
(see <xref target="format"/>) differs from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DNS Stateful Operations format, this
will result in the Stateful Operations data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the Stateful Operations data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to the use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in anyway 
with normal DNS operations or with existing EDNS(0) based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DNS Stateful Operations there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DNS Stateful Operations
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a DNS Stateful Operation request message)
or a responder (when sending a DNS Stateful Operation response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a DNS Stateful Operation request message)
or an initiator (when receiving a DNS Stateful Operation response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful
Operations including definitions of three TLVs for session management and 
encryption padding. <xref target="lifecycle"/> presents a
detailed discussion of the DSO Session lifecycle including an
in-depth discussion of keepalive traffic and session termination.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a response message the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN (Name Error)
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for the software to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications,
the subsequent event notifications are then sent as unacknowledged
request messages, and this is appropriate because the client initiated
the message stream by virtue of its Push Notification subscription,
thereby indicating its support of Push Notifications, and its
desire to receive event notifications <xref target="I-D.ietf-dnssd-push"/>.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged request messages, and
this is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit field in network order giving the type of the current DSO TLV per
the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If a DSO request is received containing an unrecognized
Primary TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the offending Primary TLV.</t>

<t>If a DSO request message is received
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO Session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.
This is not great, because it results in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.
This is not great, because it results in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO Session begin as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in larger memory burden to maintain state for
inactive DSO Sessions, but lower traffic and CPU load on the server.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed times
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32-bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the 16-bit DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAM7O1oAA+19WXvbRpboe/0KXPkhUoZkJNuxE893v9uKJSfqti23JHdP
z8t8IAlKiEmAA4CS2Y7/+z1r1SkslJxkevou7tFEIoFaTp06+zIej12TN8vs
RXLy9jK5bNImW2yWyfk6q9ImL4vazctZka7ggXmVLppxnjWL8byoy/W4zuoa
HhnX+XWRLseH37o5vP4ieXx49Hx8dDR+cujydfUiaapN3Tw+PPz+8LFLqyx9
kZwVTVYVWePurmni83fJX8vqQ15cJz9W5WbtPtyFh8YnOLGbpc2LpG7mbrPG
aeoXycWrl8nz58+ejei3o8Mn3zo3K+cwyotkA6v8zq3zFy5JxklTzui/9XZV
ZYuafy+rhv5w6aa5KSt6En6SJC9w8EnyQ7Zc5jV9xBC4SLf2w7K6DqtMLrd1
k63q5CUADYbON6sRfDmb0KPpdFplt/D05Uv6u4apM9jP998eJi9v0grGAODj
Z/T1LG+2MF02vyvLefIS/uKPyzms4uVx8v3Tw2dP5KNN0VTw8PvLY/pgfVMW
8NC/HCXPYOynj58kRwB6+ipbpfnyRVKl2z/k9WwCy4+3fDmBtWT1TV5lZtOX
zQbWF39DOz9er5dZ2KJu6Qg+WuRF3mTJ67Jcm/283ABWNXlRtjbz7eHR0/s2
8/Twu+T750+TJ48Pn9vNzGRZf0hxNZNZuYr39MdJcpLPALPqsjCb+mN5U7S+
oD1dwurmmyKc6lU2uynKZXmdZ3V0kvKk3Tr9Pk7epNfpPF1mRfIyg+1k8vH5
x0VZzZPLWZ4Vsyx5l1YfDGz4WwOY8397mjz98bgFFwTrPPkToPicdurh8HM6
/0PNS+oC4bIfCJdplf5fBYQaNjQMheMJrKqAzRoQHONlLgv7BYMAll7DYmaZ
HT/lpycrevoP1/hpd56rSfJuUwOJqnIz01W5ij+med4X6WKRL3P4eB7dor09
SwhgNfn1jQHM25fJ4+fPDr+779p8f/R98t2z58nRkycRDVjLSv4wTYvrn2kP
Li9gwyug+rcZnuLb9HqZnRzzgTZpdY3Lumma9Ytvvrm7u5vURBf0/iE1+Wad
wgWvvynwzXm2TLfZPJ19+IZHYC5z9fJd8i6raCbEgHVVTpdINmfppoZTnW4B
iLCydIbcJ5lmzV0GSESL+aqG87ouq7y5WSVpMU9OeI7k+OWfGC09Id9Nvgbo
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
d9fAiFE/ERXtPoJvJTn2iWKLFSuV9zIkjJNFfrgpWAYMKSrSmlkqYFHvE0aM
fY73OlBT0R0oZMvtOL1N8yWVuYoRuTaZ25opJVRsLZ2Yqd671TFe+7ry5Bfg
BjafHoVi9Z0K8Gesi5BweWwqs3HRKI4XFwmcEy3ZVtmqdhbqtcX1f2mcTiHC
T5/iOvParNHPs/XGTmzChNem1fo4rfmaUbSw6kQZNnQAYCm5tUqsbTwmFTkx
ciJfZ5x9K2GDOIgpso0iEvkZEB3aGtqUiz1qXVCmTh9DFzXxP5uKucg2sPhg
q0ofh+VQ2EvrsnFlPZvD0LZjSpwMWw435JYtudphu4ts++C17xCgh5y6lnz8
HNo8hW5DnMbU6pMUGQpeiG7bLiE52tUfCXv1IJg48zGacjQ4Hgf7AmJ8zFeb
FV8xT39davEoyg+g+VvW1dIUIcbuJTPDDTR5iqRkX2FYiZpYfaRYm6lYSKeO
Ymjffrog6OzHu5Kc7yLV6h4a+njZTo6tSiU+lp7mdKo66cZpEdoYsf+40Y8p
ieXc3qen95Ukl2HOskRdOTR2UXQH5qRped+hvSO5vb6hviao1XISQevgnU7G
ne6yWeNdf9QEYfccVFR1uQ2NPE18eiqGoGDQgI34NDo2S5DuQBvrae+Fnh2W
gtccsY59UKkVi9a4D9E7cI+5fGPopWA6KARF9v5mN/8FXV/OC+OFUhsSdREv
vc+j5VHw5em1gStCFPtfF4kDaMwE4+fZIsXi0uwECG2qTIeto2+1bS2bYqMH
RoxcipgiCCpKhMrVgm0qWQtoCVTy1ct372GsdK4xX/7KAmk8kwZzdv9IG+PG
c8DfpDuFltwl7yVXc+TtXntrTVKyrWqtwU2cPY7CS7upuHGKwcdKY0YmgF6k
FQ6bij1n1JatDkCr6hC/HZ2mNylzFRMvO6UDBysDqxrd7rc38p0G+u6qSElU
pEV8r2yfAiTB+6beYnsbi36LXMJNZq4xlpOFxU7jQLUdcu9yiceIOwz6lYkj
tJyBfCXmFSIjQgFaogb5HgGZvPtYS8FSGQE5FBcFcXFpK60GbxbvxUliWUrU
VYUgNmmkdG/doA4ueTnnIroLuKQ3m2KOY1ubB4qcSEMn7tgWIO9loxX3LSZY
wSbaJXtoHmfX1YKvtNaIsLvPq6UazrGtyP7AFcVXx/tWhlfT3sKuBdGpG7I/
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

-->

</rfc>

