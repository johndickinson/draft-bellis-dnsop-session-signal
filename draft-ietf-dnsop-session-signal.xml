<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-10" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="June" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discoery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
tAI9klwg7v8BDPnK14JzAQA=

-->

</rfc>

