<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

