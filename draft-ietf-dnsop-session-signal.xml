<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.
This mechanism is intended to reduce the overhead of existing 
“per-packet” signaling mechanisms with “per-message” semantics as well as 
defining new stateful operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Additional TLVs may be defined in additional specifications.</t>

<t>It should be noted that the message format for DNS Stateful Operations
(see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV format) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DNS Stateful Operations format, this
will result in the Stateful Operations data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the Stateful Operations data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to the use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in anyway 
with normal DNS operations or with existing EDNS(0) based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DNS Stateful Operations there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DNS Stateful Operations
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a DNS Stateful Operation request message)
or a responder (when sending a DNS Stateful Operation response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a DNS Stateful Operation request message)
or an initiator (when receiving a DNS Stateful Operation response message).</t>

<t>DNS Stateful Operations are expressed using type-length-value (TLV) syntax.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful
Operations including definitions of three TLVs for session management and 
encryption padding. <xref target="lifecycle"/> presents a
detailed discussion of the DSO Session lifecycle including an
in-depth discussion of keepalive traffic and session termination.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvformat"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive Operation TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive Operation
TLV, but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it to setup state that it has not yet
deleted. For example, state could be a subscription <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation (see <xref target="delay"/>), where the RCODE indicates the reason
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN (Name Error)
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header is followed by the DSO Data.</t>

<t>The first TLV in a DSO request message is called the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are called Modifier TLVs.</t>

<t>Depending on the operation a DSO response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="tlvformat" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<t>The Acknowledgement bit in an Operation TLV of a request dictates if a response is to be sent. The Operation TLV may or may not be echoed back in the response according to the definition of the TLV. Each Operation TLV definition should stipulate whether an acknowledgement is REQUIRED. If the Operation TLV is not included in the response according to the TLV definition, the matching identifier in the standard DNS Header response is sufficient as an acknowledgement. If the TLV Acknowledgement bit is cleared in a request, a response MUST NOT be sent. The Acknowledgement bit is NEVER set in a response. Modifier TLVs MUST NEVER set the Acknowledgement bit in request or response.</t>

<t>It is by design that Operation TLVs SHOULD normally require a response and, therefore, set the TLV Acknowledgement bit in a request. However, for some Operation TLVs, this may be undesirable and the TLV Acknowledgement bit MAY be cleared in the request.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | A |                        DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='A:'>
  A 1-bit TLV Response flag indicating whether or not an Operation TLV requires
a response Acknowledgement. This bit is never set in responses to Operation TLVs and never set in Modifier TLVs in either direction.</t>
  <t hangText='DSO-TYPE:'>
  A 15-bit field in network order giving the type of the current DSO TLV per
the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="operation-tlvs" title="Operation TLVs">

<t>An “Operation TLV” specifies the operation to be performed.</t>

<t>A DSO message MUST contain at most one Operation TLV.</t>

<t>In all cases a DSO request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a DSO response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the MESSAGE ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same DSO-TYPE as in the request message. The specification for each DSO
type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a DSO response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first DSO TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a DSO message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If a DSO request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE DSONOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a DSO message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for DSO messages, an Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, an explicit Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO Session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with the Acknowledgement bit set in the
operation TLV MUST elicit a response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with the Acknowledgement
bit set in the operation TLV elicit a response from the server, and
DSO request messages sent by the server with the Acknowledgement
bit set in the operation TLV elicit a response from the client.</t>

<t>A DSO request message (QR=0) with the Acknowledgement bit clear in the
operation TLV MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single packet.
Combining these three elements into a single packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.
This is not great, because it results in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.
This is not great, because it results in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO Session begin as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in larger memory burden to maintain state for
inactive DSO Sessions, but lower traffic and CPU load on the server.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed times
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay Operation TLV
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32-bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operation-tlv" title="Use as an Operation TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the DSO Session and underlying connection, and 
not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An acknowledgement is not desired for a Retry Delay Operation TLV and the TLV
Acknowledgement bit MUST be cleared in the request.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>When appended to a DSO response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive Operation TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive Operation TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive Operation TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive Operation TLV MUST have the Acknowledgement bit set.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive Operation TLV without the Acknowledgement bit set
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive Operation TLV MUST NOT have the Acknowledgement bit set.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required.
If a client receives a Keepalive Operation TLV with the Acknowledgement bit set
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as a Modifier TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the 15-bit DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0x77FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x7800 - 0x7BFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x7C00 - 0x7FFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIALm2KVoAA+1923IbR5Loe31FH/nBpBeASV1tbZzYoSnK5oxEakjK3tmX
jQbQINsCujF9IYWRFLEfcs7P7ZecvFZldTcg+rKzExtHs1yTQHdVVlZWVt5z
PB67Jm+W2fPkxdllctmkTbZol8n5OqvSJi+L2s3LWZGu4IF5lS6acZ41i/G8
qMv1uM7qGh4Z1/l1kS7HB0/cHF5/njw8OHw2PjwcPzpw+bp6njRVWzcPDw6+
PXjo0ipLnyenRZNVRda4u2ua+PxN8lNZvcuL6+T7qmzX7t1deGj8Aid2s7R5
ntTN3LVrnKZ+nly8PE6ePXv6dES/HR48euLcrJzDKM+TFqD8xq3z5y5JxklT
zui/9WZVZYuafy+rhv5wadvclBU9CT9Jkhc4+CT5Llsu85o+YgxcpBv7YVld
ByiTy03dZKs6OQakwdB5uxrBl7MJPZpOp1V2C09fHtPfNUydwXq+fXKQHN+k
FYwByMfP6OtZ3mxgumx+V5bz5Bj+4o/LOUBxfJR8+/jg6SP5qC2aCh5+e3lE
H6xvygIe+qfD5CmM/fjho+QQUE9fZas0Xz5PqnTzh7yeTQD8eMmXE4Alq2/y
KjOLvmxagC/+hlZ+tF4vs7BEXdIhfLTIi7zJkldluTbrOW6Bqpq8KDuLeXJw
+Phzi3l88E3y7bPHyaOHB8/sYmYC1h9ShGYyK1fxmv44SV7kM6CsuizMov5Y
3hSdL2hNlwDdvC3Crl5ls5uiXJbXeVZHOylP2qXT7+PkdXqdztNlViTHGSwn
k4/P3y/Kap5czvKsmGXJm7R6Z3DD3xrEnP/r4+Tx90cdvCBa58mfgMTntFKP
h5/T+R9qBqmPhMthJFymVfo/Cgk1LGg7Fo4mAFUBizUoOMLDXBb2C0YBgF4D
MLPMjp/y05MVPf2Ha/y0P8/VJHnT1sCiqtzMdFWu4o9pnrdFuljkyxw+nken
6MEDywgAmvz6xiDm7Dh5+OzpwTefOzbfHn6bfPP0WXL46FHEA9YCyR+maXH9
M63B5QUseAVc/zbDXTxLr5fZiyPe0CatrhGsm6ZZP//667u7u0lNfEHPH3KT
r9cpHPD66wLfnGfLdJPN09m7r3kEvmWujt8kb7KKZkIKWFfldIlsc5a2Nezq
dANIBMjSGd4+yTRr7jIgIgLmyxr267qs8uZmlaTFPHnBcyRHx39isvSMfDf7
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
ci5VYYs8whNTuiHl8tXkFA8lOaPZkSqo41aoemX3tp8jHdtL+/5j8a1yYBC7
bHJNdog6FrEKoKsYclGacAwKXABKO7m4OL/wL1GHDVDe0B6JQQIYHwAsDJ5U
D5F5tBuPFDsKJQRAHYAgg97A3cGuABxQjVzbx/ucTU5NcnipS6kpclxZkVCM
VdqFC+TQUGiZZR/f2nfIrtpRD9JhuVUDqCVkd5rFEJMxWhWRGHS6EFVUpnFd
NLA3u3ZF3bjLNqqa7VSphq2Q2httXs5acg6EZqqab+b7WjBV3Yb0oAFDN4gr
EiWunreBh2or9xK8i2ginsLoUVqfK/LyU8A/V7PqBeewDmAB5pYeJlmGQhH7
oFEbCzUAdMUT58WT4WWJy3RjZ55Q2+tuIxVJLrE9JHcEG3gegVx3qEmWAqrl
D+PeyR02Hokerp8h7COfDTflwFKq9V0WlEJslhhlsKGZknSBbviEMnjfy0Vr
zXS6ancCbTiVr3sFOqPvePNMdA1yYwkfakIQiYA53H7bm+nj9YtV/fM3VSzR
aRu9wcti26qsFkcM3ekdwoeRMcd+FHvhy2W1/ZbhcA/bxjAO9ggZqQz3tieD
pHu4rzyxpiqPnnc+F37OJkTXSVYdioNJpHZx8C/gA4bP4J/dIuUqMm+D9NdU
qpWc2avulSgqK54DzdLeNi+Xya7VT0uePuyraTLTEZJ+6CQnERvduxNDShUM
mI87ySYt0O1VjK29MyyFOqSkFabq1H7KHuK54vfpwnPrgTQ4qufELY3tzvYQ
J8XubHMWX2yQODca6XBozNcSPt2f7s4U2WgwN5E6p+aNBMsPJGMK5kKLL04L
UNg0PARf8WGkfpYOaQgQO/GFF4TEZ3MkiusPIEqg9H6+3I7cDgsZ2kunQkGQ
QbASgRjNsbw/QaGRzPxWjvfnjnl5U+UWikCIx9lwHkOMcfaJ2bek8izWZWEL
Evdk5U5dq6y58aFPZKwkM9O2oilSRBYoKlvaYKVtJ917PraT5sSqKibOg9WQ
bQPHPUG39BwlB6gwmwhLX9Z9nsMFFowNDi+FID2IZOs6vE5ZYTBnSRQB0gR1
rgSyuEsrf+1HgVBbIlm2LdpUHty2ZG1wva0X3r1iXn6XgKZzOidd16Atr+1D
+BsMHZYgfrN4Eq7QICbe1U44kCrLHeqxjr2d1IMX+e9OQW2RU5wEme8GKumU
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
Kp+2JtHc3DEAFxpwp+nsnft/Pao5BMsIAQA=

-->

</rfc>

