<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determinated to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message at the same time using the same MESSAGE ID.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table is provided as a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAI/OnFoAA+W963YbV5Ym+P88RQz1w6QKgElJlmXl6jVJS5TNSt2SpOzM
mp6uFQACZNhABCoiQAqWtVa/Qr9BP0s/yjzJ7Os5+8QFpGSnJ7tGWSqLRODE
ueyzr9/eezweuyZvltnT5Pnr8+S8SZtssVkmb9ZZlTZ5WdRuXs6KdAUPzKt0
0YzzrFmM50Vdrsd1VtfwyLjOL4t0OT587Obw9afJg8OjJ+Oj8YPHLl9XT5Om
2tTNg8PDbw4fuLTK0qfJadFkVZE17uaS3vvmbfJjWf2cF5fJd1W5Wbufb8JD
4+f4XjdLm6dJ3czdZo1vqZ8mZy+eJV9//fjxiP51dPjwK+dm5RxGeZpsYJJP
3Dp/6pJknDTljP5bb1dVtqj532XV0A8u3TRXZUVPwt8kyQscfJJ8my2XeU2/
4g04S7f2l2V1GWaZnG/rJlvVyTPYMxg636xG8OFsQo+m02mVXcPT58/o5xpe
ncF6vvnqMHl2lVYwBuw9/o4+nuXNFl6XzW/Kcp48g5/41+UcZvHsOPnm0eHj
h/KrTdFU8PC782P6xfqqLOChfzlKHsPYjx48TI5g6+mjbJXmy6dJlW7/nNez
CUw/XvL5BOaS1Vd5lZlFnzcbmF/8Ca38eL1eZmGJuqQj+NUiL/ImS16W5dqs
59kGiKrJi7K1mK8Ojx7dtphHh0+Sb75+lDx8cPi1XcxMpvXnFGczmZWreE3/
Okme5zOgrLoszKL+tbwqWh/Qms5hdvNNEU71IptdFeWyvMyzOjpJedIunf49
Tl6ll+k8XWZF8iyD5WTy6zfvF2U1T85neVbMsuRtWv1s9oY/NRvz5m+Pkkff
Hbf2Bbd1nvwFSHxOK/X78FM6/3PNU+puwnn/JpynVfqfahNqWNDwLlxMkpfZ
KtqBCxgn/I4W/y1wqEVZNnSPN0sg18uIvL8FtgjsclpWlox/uEgOv3p4eNRP
xjK9FbCOsvjzYnO56aFUmN7bTQ2crcrtDMtV/Gua5LsiXSzyZQ6/nkez29uz
/AP2P7+8MtN8/Sx58PXjwye33bZvjr5Jnjz+Ojl6+DBiHWuZyZ+naXH5E63B
5QUc2gpkxXWGh/86vVxmz4+ZDpq0usRpXTXN+umXX97c3ExqYid6bZEJfblO
gS/UXxb4zXm2TLfZPJ39/CWPwLLp4tnb5G1W0ZuQcNZVOV0it52lmxoOcbqF
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
nmUBAA==

-->

</rfc>

