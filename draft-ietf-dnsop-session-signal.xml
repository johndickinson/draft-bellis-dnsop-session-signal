<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Extra TLVs”.
The Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that has not yet been deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response TLVs”.
A DSO response message is not required to carry Response TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Extra TLVs”.</t>

<t>Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Extra TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-extra-tlv" title="Retry Delay TLV used as an Extra TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses an Extra TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Extra TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>C-E - Extra TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  C-R  C-E | S-P  S-U  S-A  S-R  S-E |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAFkoZVoAA+W963obR5Ig+j+fog79w6QGgEnJlm31t982LVI2p3Vrkuqe
nt09+xWAAlkWUIWpKpBCS3qXfZZ9so1rZmRdQEqWe/vM8ay2JaCQFRkZGffL
eDx2Td4ssyfJycuL5KJJm2yxWSav1lmVNnlZ1G5ezop0BQ/Mq3TRjPOsWYzn
RV2ux3VW1/DIuM6vinQ5PvzOzeHnT5KHh0ffj4+Oxo8OXb6uniRNtambh4eH
Px4+dGmVpU+Ss6LJqiJr3O0VvfjV6+SvZfU2L66Sn6tys3Zvb8ND4xN8sZul
zZOkbuZus8bX1E+S82dPk++/f/x4RH87Onz0nXOzcg6rPEk2AOUPbp0/cUky
TppyRv9bb1dVtqj572XV0D9cummuy4qehD9Jkhe4+CT5KVsu85o+Ygycp1v7
YVldBSiTi23dZKs6eQpIg6XzzWoEX84m9Gg6nVbZDTx98ZT+XcOrM9jPj98d
Jk+v0wrWAOTjZ/T1LG+28LpsfluW8+Qp/Is/LucAxdPj5MdvDx8/ko82RVPB
w28ujumD9XVZwEP/cpQ8hrW/ffgoOQLU01fZKs2XT5Iq3f4xr2cTAD/e8sUE
YMnq67zKzKYvmg3AF39DOz9er5dZ2KJu6Qg+WuRF3mTJ87Jcm/083QBVNXlR
tjbz3eHRt3dt5tvDH5Ifv/82efTw8Hu7mZmA9ccUoZnMylW8p3+dJCf5DCir
LguzqX8tr4vWF7SnC4BuvinCqV5ms+uiXJZXeVZHJylP2q3T38fJi/QqnafL
rEieZrCdTD5+9W5RVvPkYpZnxSxLXqfVW4Mb/tYg5tW/fZt8+/NxCy+I1nny
JyDxOe3U4+HXdP7HmkHqIuGiHwkXaZX+p0JCDRsaxsLxBKAqYLMGBcd4mcvC
fsEoANBrAGaW2fVTfnqyoqf/eIWfdt9zOUleb2pgUVVu3nRZruKP6T1vinSx
yJc5fDyPbtHenmUEAE1+dW0Q8/Jp8vD7x4c/3HVtfjz6Mfnh8ffJ0aNHEQ9Y
CyR/nKbF1a+0B5cXsOEVcP2bDE/xZXq1zE6O+UCbtLpCsK6bZv3km29ub28n
NfEFvX/ITb5Zp3DB628K/OU8W6bbbJ7O3n7DK7CUuXz6OnmdVfQmpIB1VU6X
yDZn6aaGU51uAYkAWTpD6ZNMs+Y2AyIiYL6u4byuyipvrldJWsyTE35Hcvz0
T0yWnpHvZl8D/E6l1+F3IMvGDw+dG4/HQOtwJgCOc5fXeZ2AONysgKSTeQZc
LquTNCmyW5Ker14/fXVymsDehoRpsn9y8epg4uD/T1YgPdMrWACQv9oUOci3
LCnDo7ewzbxIEKM5SJaicbUuKIK3HiWbGmVms11nY7hrV831+CZdbrJk//L5
Xw5A3BVN+m4CgANRJfARQFtlAvk8aa7TJoFjACh0STimVVZumnrk4BBWeUHA
jAjbcGOr7ZqOZZ3OUczy5y5NFhXg+hYkeIIYkuURD9k7gJxgBRkMK6Rw2IQv
v5ew4wnje5XP58vMua+Q/1RwlYkSEPsZbBdQtACFIi3qNQjZ2iO7bK5BhMKO
iuTNyWsEY5ohanIAOksRS8ttUq+zWb7Is/nIMXDpCoTGiBe4gd8jdb5///+A
OoHaxMeP/HfUMT5+ZIrzTz6/gCf/K377w3c/fPw4cReb2bWFbAaglIsFPBuO
cJQsy+JqvIQrNvenSAsj+BkAlSW311nh5FyvsxXt0C+LnyIMnnjyBvcKOJlm
BeC9QTRfpzcZkOUKuHZa5PXK0UEjPBmgfQo87BpOEI8MzhheX9fljDgQ0Ry8
tawzQ2M1biytPWlM3FnBH9Y5XC6mVoYjXdZlks5vUqC7K3iYTr3erBF0WLFC
zKFqwG/TTUz4cLN3gCTc4CnscP/wIDlV4kle6Fb8efPJPP7hxyM4GXhz9m69
zIFbLrfOk3eZlAWcOqFjDw5hLC/cA1CA7Jt8Vk+Sv17ny7rx77xOkXKA4xA3
akrHym0CCFwCHTWwpMfNuAL+gxvxyEz24cj8WkhNf8qydYrnDYROdKxE8xCI
5gBPOKmyerMk9IHMqZmG8eEVvHYOdxn2IY81VT5jpTxfrUthl/aNfl9KU8kS
GDCSByN/HJDP+1oCvieJe2ZvQ6onBRRTlA2wjGkOBFjlgEsQEgAFXEl4arbM
kQ8CeLMlUgx8UhZFpoybGDrBEJbjA6kzAE5BZrTUuDJucQ1/z4hs/mMD8imr
mUvByk1Kp9r63eS+bBluOTDdfbyFJOIAjscHo13MusWmkXMKUfwmlg2UCvvE
he7LvHu3V8hFwqUbYoqeyY+cwjnE3JN7MHfALGhHsiytLyJE7xdyLMIKvAVE
Z1ltCZtAVEmOlLRiVCNi4OeAy4l7tqmIT9M6K7CmpkEaAeLwxfgD3BSz6lka
TjlLWD/hMzNH4/ZrAPH9e/4ar9U8R8Zbg40HYgnpZ1GB+oU7AEL27zCM1MnS
hDhcHw4ONgWqqpIhIsnT54TA8c+AjrK8ycblrIGjuM7SObK5mhYbJdNNQ29e
lJuKVbUERNByDmD/+eTpqzcvL0fJ8Uv5y8sL/eSc/nJACMYThtP8e1aVBEc6
m4GezDINls4rMHsrBg4/heeZTdCP8QojxcFpMNigy2yQtaRNiqSK94rosBx0
AewHmoVTgsMT4jwgnr9ew31mesN94uUWcjEIFrRM3F9BvMH51GtW3fgOrIFL
wR6BWpfbv6McL8ul3Hzi3rgH5Mpi+9O7qmxWXhX535nHID3wGQJxw41xtznQ
obLWwj9Du2bVwAPhgOdvirdFeRuRID2aLhrSK4b2BcKQWXf+NqPTQGLbNBtk
FuynELwgL6RdEWDwGlopnYLyD9a93c8IrgRq+XwxBcpoA8r0kMMJ4aLcmpP8
RN6sErhmZQWYxfn5eJoKcePzyp/zxsFCK1Q8VITSa+kTYHNwMs0kOU1B2uO5
02UlBOGm9ZIi+HlDBA9cvhbIU2TCcgLCvwFk3CiYZ3MAEEwggm9Zpkg/fCsA
oStUF+D75XaEegVCsQTpCuhNb8p8jhpzsQDJq8pQn6KN3KTYJreAOUdaTYH7
5jtvODZAQN+2dQ9F1qaYMTXAIU3ccXJVwhpEBUz5VYmYyemQCTg6J/8CeDiv
601maNlNswWwSLgE8qoRqg8gszfLtIItkk4h95FV4Wn5Do4LfpsDB4Gj/ysC
7H+8AvTm6IhRQSpsla4U3leELCEFOANReJms62wzL8fn5yPnFU/cAZzMFeiQ
Fez176ScWZXLSvspku2S9ZJsuXSgsBJT93oD0iJgZsYcAw8Zv7/Na+I9eOmB
USUZYQ4Y1k0+B37kGH6VoYhGOPgpiQYE+/xcmG4kGNjIiFcSTMDtYEbBAia5
Lm/pScfCATcjD/Lx4bZmyATAdr1Cxp0vYAncRFrB2aPSi1RcoRIIj/sDIPrB
m2kw6ZBmM9Ku4CaBukHQ4s/wWOyZGYI1B+WUa9L2FrBd9JcgcaQ1KRF6feG9
Ll0CldeyVlYLS7Xa2BhsZtgvokMNCTygppyVy4mjy33RscdwJ0bPIdaPlxy5
ZJ2hyttkznDCkdc5uy8h3a9J3yJ7qEibQDwAmE5Xalk1EdWevVYBAUdCl25d
oRI7ifVWVLfxPTGK6xUqJDtWx5/V2dVK5COyNVRfPI2hQlPeMqXNwAaogMKD
/cDYw+OvMlAVgDb06Azu6uTXjZgOAPkK6Cmg2d/C5Jy8B572rUBXxcMvjtTO
K8PDDowxpFO8aos0X24qUdjSJrwHKPjBgwdoVl+S7ofuvC2rVW8zYJSgUNTJ
3os3F5d7I/7f5OUr+vv56Z/fnJ2fnuDfL345fv7c/4WfcPCPV2+ey/f4t/DL
p69evDh9ecI/hk+T1kcvjv+2R4Tj9uCSn716efx8j1FglV6kGb6h5BsCXQTp
ESVeVs+qfErE6fb+5PeBZ0XSrcDQAF3vM8FYcg7nlFeknSbPMzAE6j2xJh8e
Hf2Ilrzbg/PcUw2OGHEGdNUvakQ1RYU62QtXbo9+gxJwms/hdSJGwGBrMnLy
pSs8I+D2OTLTEZg/cEtRcVQyDYY3EDxwNrb26HK7+zks1DXS769gh0rxH8Ax
ySciWxBbYS8QIqD8XeOFnj8U3h9pRu9QVFwh0bnoorHyYc3CW+SRT5wbJ5e8
drAX2dEnYgbvhPoLamNQiRq+FBPOJdahsp9PsglIxLzY4M2A7V+DxAREwkl5
7xDoxnCp6oMJwHCa0+dGszMQoRxVczlsSZRckmhoISVIK8mFR1odfCx4YLKr
5hadX/N1CfTLuoAzssbuD/FHRmNyk6dt7MZWD2E3BnqSEAPLjS5Ilk+K647x
B2NmdwSua90g4EBIOf3bUosRvUSowjdEPUCwyy1yKIM4lBvoEJhHV4NPc8+Q
TV0umlu82iRBU1ChEQVkv5TI7YEv3KY56kJwOYCbtl4j/LaOLyCRT/9brnNS
E/hE64gunRwrA/l13YHFvAS4pCxSwnaQHveEU+P2At8mpo3Lk6+BX+CCzY6P
M5lvpjVuBQ4f2ESW46nCUad9QmXkquwKLE5yFMFDvKfblLfqd09AKcLlHm/q
jai/8O46a50NA48kj3E0BNdlfDm8owG2m+zT0ePjrGL0gHjgSF30KBn4TSzP
4Da652BBoY44Yh2CAFOEDIDWeQs/fwds3Q11f9YFb8jQ2KC7aq/nZbWcQ9+C
9R47l9o/IUm3ECcJEAaptKrFIxO5SUHzKdA9v2eV1e673T7TBqv0DXvndqkU
ByyFN8X91p2XZJSH5cHYuuMFQnIkUIqmzc7EiftJrjHUyXsPmh0ueQWfoNUK
S1cZ6PwVS3O9Lq9FF4NH9kgLm2fM5VitSoDbeVXK6OriPlhzFAuDCcCelhva
tNpC4g4vIpMCJVILv37RPzjEYBm8Y/nQ1pBEWrvZOw5eC/wx74YYAH69Kuco
4dHVD5bPrJHQQlcXJc7fR690/cSGR0ORvIy4nbyJvgINF68YOQ843FRbhV2l
p480emRaQ4PiCy3Vo/cSjRxq1NH7JIABnDxdkXU0vvzb61M9cXPgwhZbjrP7
4vtcQSFsT9xxfHYERTAzFYy6d63Td2Av6UJ4Qezi+/UBGaLiwBslpJiXs9mm
EvoW9t5Gzgj9DIgWJKvwCryDwEbQEQzksA+K1JpUXPg32kMzfD4BpbhoDqJQ
YVslf5KAOcGsFCO1N3mz5UUT8cW+1biHBM7ev5cnM3rs48cD/H3iH7vr1/4T
/3OWX+LR7glikceN94k7maHTZS7kF8EMv+c4ZkO2kAJEpgZwnUiOTxIjNkU9
Si4FiMhkoGNmgkcNNs1Jquv7iJvhacBhZ03DoodRwKpL5T9vrhU5zAKtIxg0
xar1UHoFF3HinqKl+jnLorsaDbXhpdWOPMnr2YYVSUSKBANqoJ4KsKa+wLob
YjFeDx+ZdBQJUF0UVwNUu2dI4ugG9Eo1u7cZ7yaGqaaShLl8CFDJg2Ok7grs
rkYtQ9yYE5eXREpWIpiMQh6UxHqSRP4GllHIMnwk13HoYDMVBzVYH0hKQflu
WWGJ+l4Xy+xdjk41XGBaChNzxhoygTSyY9KmyVZr7ymMAj3qAyKvg4kPujsj
khOyy8gBkmlgKQr6dGzzvHb1RjxU5BgjHIOelhXXlOERmVQeyRTVvs6Dzxjo
6oJMMzxuRNjFiaDq8fePHwGq0KuY3ZTLm+DVJAEN93rrSYLdtsF3SfZmK9pv
Q/CgewPJied0mTGeVzWGc8jW+3q9qa+/DguSRHPlmqOv6M8rJYb63KyqhG5o
J7JofRDWBcVvmV8VyroMWhAHZ+OTiaZd1vMxgkQG/LE6bMPTuVwpvG/A8/Fc
mPaBluFqw23a0g1XfPl7RYfi8CZOKRKAgfcbuIOvQMLC3tFhfSWWmsGf3SB7
UVfAIkgViKhCILHfvzy+JJyAFMtu0UVHWAMJiG7vJr8idYGN2XqTtYlOMkMQ
cQ6jIADILFsrWdGNGzEm4Gd4RfcC2Qs0e+LtU+BmaUWBvoLjYBz9AQDJoUt8
oAZdHAX31yo+vnbqJFmC/IE1vHk1EixXQkd+22zbw1+8bx/1GLrgqA7UqHB2
fSC0E3gREHqD4SMKiinyWZCV7AZXx0RgyGmy2oL2RS4O1lHWJXK2vMukAU9X
gCHeE7y3Bi6NkY+EAJRcHo5YeX9Q5I+HF79/D1p0mi9rdEC1fUbK4WvRP8U7
LL8gRW8gBBlU7BCCquOwN8dthbANqxkKb79/v8xBHd7OlqhmiIaFfgEGJ6PY
m0g4H/kLXpHE/9oARxoRiJ81KYD212/b9CfnK5H5EI8PAva14udE8PP+K8Ut
fP1VBMxpdJHffxVdbHg8MrVYicRUjGkmdE+cXQ+EuVVeuKy4yauyWBFibpmk
DIrp99bf5QPTqumbeGE6BRE4cRcaNL+XD3O0O+vKkcaxyRsKSHnwxVynn6yX
eO0wJ4x/ePj9YxG8lNtijBPWf8GiWTAxqmId3MVAYB0/LWwRT7XaEqgjVSyY
nGZkPSKrQ35GYRrL82oOTdbXGCtBEEOChgcDZQz7f5PU6iXTfGz8yi4YUIhr
lFZFBve7IE8R6vTvMEKA5JeuKAehlyRFf2XLGpMnkogCxNqDQ+dgOaVs3JCU
n26JP1RogpKqyUlnpMp0+ZmmhAFVjoTWRGNnbsQOHlV/6FrT7yKfbJyd05Cl
gwgE6H8pb1EN9afRbNeAmiXLSB+npEg8UgHuxm7GRzQVAoG3ZoDrEh8W2TtS
JLPJ34cY5roGKz6aOi+zuoUMBU4jMPF+2/4YB0eZL8VToLzA57CtNpjpgbpY
uKOjOG4yzZblLdzKfJVT/PnTtpPIdhhm17cd2Wl3OwUl0LHVOuZbRqGNPreY
7JJyMT5hrxgsl6MEGqL7LgKuz9DPKPuh9m5FUqec9wlR+OU2Xi64mXBBdCuI
Adssb9hJhZaqEKG+Z7/liqAsGvRkqL7i01RJnQ4OPAVr4neVRi4NoudpFv8+
k5yOsCl6DEQUaLtOmBzaupTDgwrBGk2LqhBdCkAK+Qn4Gu8k0iNoxTy6QR9J
UmRKcDu9x+z5fpsXkp0s3Nceysj5hFQRyEG1MydgXAgHrGBZL69fjFXaVdrM
yLR8cXpxcfzzaXJ2wnyJYrJO8q9evjo9P391nlDYXyKwbCGzdhZtCJ3yEpcF
VQY56sJGeWtN6oLfwLU4e/E6zk08OjoQ9Vcjvc6/RjhE97ahzkmfIm3qNySN
/Am64MYMZ6JA44057jCgKgMrqzCAeiW7jfuR42Q3yhzYLMGOp+Qw5cKcF0X+
LM8XxIytya3vs5PjO64JDZJX1WUaevsc+6bbOEJsUKiKEvYmehLyCG+vNvtr
MCaQtmkcVnHGCIhYqub4yaY4ZAlmTKPposC/ik3maT+Oknpvp1wY61BmZjuw
Zb/E4I0YCUpQcIZkuNRQpqfqcL+2mIilrp/YQvSBKUHMMF2jNGbPkknNNzco
YYODUe7atD/iQzA4BSUJKQpNpFWW9N0FZ6ke002TM3FWkNj/beeTWk9Q58BD
2oNjc1VjONEpdRdiAVXE5EghL8vxWqfeYplOIrwMimThYAbOioVZvRk6aVbS
08bJiiMLh5J6IKqLts9ABWyLlQj8UTy179UAXp+0H9nV7gvFK3Jd92sG9qZq
6BA9PXgnQGXGFH51IqGtMaBVmmw58qvLQr0q6jQTqaphRro2PmP0/tDy6tZ5
VOtFoIzArJ0E02OTk4STuDGhveP95vWNwKbw/YgVpppMmZBlI8YNJiO2X7SI
Ek68VceWnDdrwXB94fMan8r5ipWP1EQxC4r1yrpjTNKtTDLkfja5mow4qQGN
o3dbyuO/TdEuw7CU8yaqZIG9yyrSstQ4S8XBGtb00g5wjz5IJwu2YpSFnru3
vfjC0c8b8i7zyU/ByJoTyQCC6R+xN7D2OXTeaTtJEsn1F5kFaEYxkLkmlD61
wWnbmoC6s9dtjHEqkaOEXDRGRbW6rXJMhPDPA7Tf2GIj+Zgzt2vkeS5kctJL
K73oGQUWmc4lr867ZDUHJqiAsT8bvVVAlsvlBgvtGr475C0Y+ftP5RwNVZip
G8LvzleqZaxG+4Ag5gManBOftDcqUAen0YWKE3gDRjNZkzV5guaOkIhLNmvJ
5ZKt4BFmrboRTIUGJmIiVOwEJN+FXKAQGfX5sC3wYWlSu8cpZbMYyj3+GxIC
WeuzvJptVqjmoGt0mjlN1K0y8j52YSiweonNve5BUUqA8LV9QOtNPhO/4EHi
Nb1bYUfJdX51vSRLZKzbAqCfwXX0rvf4zgmrVBi9j5RTgUJ+i5yZI4a3AmLE
Qtrr5GXZBN4Te/KHnOa0oRXmofpMVvO7/fpAlLG8Iv66XIwo2WzLrr2tydVB
ZcOkIcvxCdr2SxUM9UESqhjkXVOtlQDJa0wru2BglskLMYyecd7++6+kykWt
MDWcptlVLiVIxC/6i1O6FRmR6835+LnWsqIqqCqdimD5rlVLNQlel02B5RAB
BKtOMRGQxKdzC1y0vqXMWlGBuZYXpRQWRmBSp3zFFyokPLS+Hih6ieP8tgwn
uVcZDjH4aeZsKQ7SCitaRhdOo1OhzBNSiObKuIptSDY0UADUpMDiyiM1QZ69
On8BipO+XWwV1AzUs6dGkXexq/Ffh6x7ACz51P+O+v6EZQ7lo4fw5xH8+Rb+
fAd/HsOf7+HPD/Dnx6HndJl/GY/Hv+mPLvRheB/BoN+x2Q9fHqI/nzNUclc6
UP57CwL6/8/Ds/8gHAnpJ/tKYUh+B/8gHPVCJHfwnwgiYQb/RBAJV/onguj+
/3mIvtnxELLQEwzA7vjvm/ssdJ//vvlyOAomzi8iXL9iKfuRcxWLdv5fX96i
YVksfvWUjeyZyHKft5gLi6VoAsPP0B1PQo18NqPgYAlGrPrANhVmtS2lFoHL
w3z+G+d4mWTJUn0wxunxTByI602FiRQ15fugQWegZWvNp+pIGN/740iCugAc
2s+UepWLh0uRgeBJ6jc71ymArpnlkV8Z97iwepxdFBsZgPRdi+IsWh0batuM
y1MxFpiRFzVKFOJfzFRPTu9QXwe1V86sxrQrtEy2yTmqppyntkhnWe8i9axZ
yiIr+B9qWbAlazzEEIyycke6ahwP4QgyO/e7noBWlAOTJM3ypKtIg4FpFhzQ
3ADGh9M9WSqMZyeOjtfS+NrEQLzR0I6jTLPWZkagbnFTgrQD2JR9HFwzN92a
7PUAB74KQYvhkVoGC1JvWKdVbYh+95DMLva5ONLE40A+3hXYJJR07F9oPA95
wyb+uiqvqnRFBRNZVZVcZ+Ct5Ja3WdOo+7gHKu7CyUChmeZNYiUOaM7n/+Xw
AIw8dQLLQxJcp2ds5EuD7u13BRBaace7YUBjH0E4GgaBw2q9EMSvGgSBX7CD
MWvuM4a81l63F9f3wvX+UBw3O7k3J0YrUSDRTD4XRPJrZSo4FjvW6NorrVXh
ASJ6Sc1CAwTk9NLSGSVNSCELvT5fAcGi1wGrN5QKXUyFenHQ63EOv0ETGr3e
N9hDjLm4JC9pkofWExj6iIzW6xLNqpbNKlUEbcuVFvp3JBxJFg4yrthI2wPr
1GFnMHxI+Q3Gic3uHputzq4lWbtHknMsJLYkg0sRn82XDEp+BQwro5gt4nfN
dvMnGoK9V53vcRzGkfQGcosPmryMhzaESQwhpp6sGyGnwAQ9VG4/Ss8kKLIG
mCe19+oCy/HdCh+h2G6gU62gNbWxUjLNEikkWR2oh+XS/4xJI991w8RhRU5G
vuaLEouD8aJyRvcT5z4kT8t5BnryiyJblUU+g7+eZEEwf3AfxvjfE/4f+s/8
Ff8FaxzCrzRo8iEkwpm6+hDCA8zjT47gQXUYfFB/Ed9L/PohfHhxev6XZ8dn
z/Gv7NZbcKYbZxlREbHiW1oPpdqizdRW8E9x0UcI5r+dvHpxfPYS/4pVF6f0
StgH/RNz7xp043i3NvVaoEqeMWchULUBrvYtbZpisB/oEpmIHiyEj3wH35yf
PntzcXoS4WWegc6mXcfW5TIP1fL0ux956eM3l7/g32DdY3EwER/oBefoiMGI
QMKaJGrC1wHOvak9XZD7mgmrtu1BSPBjrlZZKE9BR6rr+Pw72XPFXEMAzAcR
BFKRW/decnLYyxmCBuqcihsJiY6FjZIkfwV/Vuvv/Mnuh4OlGjrF5H4HkQca
uE2b8C5iZXzzY23R+XpuMRYWkgZmrqQPc0SVyLC8AdsGl7zt+P6reV1iGu9H
t6NdT49HlAgdo5PI8rjwbB476/Jabn5owaWvHbl2FVvol9OXexUnC03abl1N
sgwVj618maqHX41QD1Q26CFUzajwalW7N89vLEncWTn46QWJJFvuqEf8beWI
x33x9JZWZ/u+EaVdxqWFQ2V6/x+oOZz4LE/Ougzpna2aPX5X1ilP7FQn2zyU
05By/ZpTrjk96/17ycD2iVl85TNfpNZXJkfIa5c5flq9ogv1iu0kOVO/GNUT
us8oXrwPSL11i86XKzZawNhTt+g7md1ZuYg0ohE0ToApfVHh/aoa+zciNpSk
5jH+0or8Eeb3fFGGLJ8erosWclRIlKMkBomBxfm8jf5KX7ppLRi5M2P9JU6j
NpWcHvn/oBOJakPd71wYeib8o4EjWHOXNUrh3qKukGLq2KqUTNeOkOiknrqu
j6Pzq1HSEgn9HLsOfIqWlwZVGG4ea+K6L2QBFA9xMVVA7hApE/dm9wOJVElx
0zRPsZLGJ2kKiGbfAROV3+JrK55MC5j2prHHgYGFVIg7QGYvFvZeldZFW9/2
wuWWxY/wNCswSygNlhpkLdotEUwknttX4iktqTACnaa1lDaifU/Q5iw5UIPF
PVKDJ1B/N83E5LZ1vINpK6uYnaSsvJJJJx1YyaFlb5s0eSEaPxgQQz51uCWQ
+92A9/W5U/JA17uBzpVI72jfuFaNuZYE7z5T8Un4TCtqHWPc8jtgsF1U3R2U
M+JEK/Qy3oREXWJOQJpkPNZyjjvUHHUYqYHYxqaNmo/uAt+isOVIz30RFstJ
ATcq60fE+laKfLoMu1hxbBBbt5gG1f+AXcEbEEYRhO53dmHdxWwspHQj9vAy
bbQD0h5ecFbfgh9EusvoleTylkWMeC1pcR0MRtUKodVcYxoFYlvFwAZcRPWk
L0qvraHGZFl7n26/58PgMgg+VolWGQojYS2J32XIcIorHtig6/Baet3B3Ryf
mtZhtMOKlBjxziA+XQJzn28J8XXPnfXlRKj93mKuJ91V5aqsD5vu2HF7ZqmC
MTEqk1iEVNYJL9VuKKQkKb+hBREFPZI4uSnl3VETH8oIbTEVw0xImxfPcECV
lYU+B9sXQVv/vIhFkFI3edWQB50s8d0RsxETJ4WOfFUGnrdmg5eL7goCLj4G
JnleZVawsWYWoQF1SUZ9kaxQf+XwW/8xmKUkF5R+41Rf4Zxtu1DnJGyTOGaw
jrsgcqm1P49Nn4bQPRIXH0nyiUfi2kdicbDMi7d3HoiLDyTa+vBBRNjT/Ze+
Jtp0X7g74qkuoq+Iz12QyyV5/1Vwv3DHa25uo1a1aiFquWPXwmCH7nEXHNO6
nJpvBwsuK3giUehZdDmgD3F7Xe8MkPe3dCHLrGNNyDsjPlEbiqOQZ73ceahD
ake1c6yEsirHPJmxiSU/BR606eRIPoV5205hu9EKJNTmS06sl2hx6Abf+vHI
sQuXKmfQ1JLIa6MNTIdC1WkjbsRPzh75z5IolwS1avi/f2A6EflTjy+Pk+en
L3++/OWfAKJ7/ndXghOieHxy+hp7oL685D32/vdPmeCkRPLEPUmOk6PHY3Qp
bwqcJsFO4eyKOpz4dP39aX6F5TZ5Whxw91Mqn3dXXIqJF5JCKpoTy5FXH49Y
S4/Ls+OX7Mm5xIcpwnaeXeUgnLA3c4tYviRwNXaYRycRRgtqPwihe4jI2ruf
IigI8phCRj7dn12IEy14mZcr8lSCxOCG+mmljbB71hyxTwET/6lvEjabjiIO
UeI1LuofYTkZEr4xccKnbbM5Ex4sF4s6M1Fr7buKumrDAZWq2YGREMbGwjhq
H4JBj20pWQKm72o/PoPANvLARQJivy3+eo3UKCJsKmBJEnmn+uSeAYF2TGDU
zXViqFv+aocpUC0n9p6J05uk9tDaytmG8BH4k+TMWKUhEt0CxvXjBKmnzwHa
glm3Evl24cJZMRtBNRrooRm90LvkwxiCRBtvb63lJgFocYJ0KgUleuBsggrD
c5dTOVJz4DdakDBxrzpdDX0JUGWQMNrda9D1mNQdF8/xkjpmSCJKt5di7JXW
0K9DfsntF1PpkW+jp1o6FbdedJqSZ8MXEkbN5qrexZGMfk0104bnscLqbkWJ
0vCNRAfihAo6T8WDDrnyytfZok081r0knspwfY3DI1JCfdMAY3nLehyo6Dgf
y0roMSQwCfjGOW9qSnx5cpQE5TpJUPk6l6ppCedzH8Gey9FyMrmhbL3PczIF
RvrGOMfkLp8tIgZhUS60KJ2NrGPNcpiRE6A0WdNcx/12n4SouwZ1GsOREAfi
qOv6Bqkot+3L6evX4Hy/hh09FZio/WLeudafxDe04cmXRNqdGKORKUMoa2Mr
TsWyhvwkOe7ZOLm4sUjKXr4dLl5/5VpOV+tyNQiwTCzCREvMjDr4dq0nBvPh
RubCoRY15/7ZZueOcsnN4IACO1MU8yXb1HnPYSN/AAs2a5eS2UY5eYdb9WEs
RobrRUY/Bvq37e697aS7bfe52/bZNTp+DV9+eXH2M2IES49xKS1LiSMo7PSP
yuJc994VrcFuPkV2sNCPnBXRgJ5oUIIaEuh65gyp1uQ4l6u/ad6ZKDaKCNck
GtVOp8qYyWU+AM7xPxkZYyVt24dL+RECjiZHvNK8faqZ/+HR4cePZhwZ9hKl
LUrJhJMofOhj4bXfkI1R4iErNUjWRbJj24EHDyRvRK0GTCKHP2zpHmZuSVwP
2cNwkYrkbFEBN/9MhCEX6JPO2yPbSPDO58EvtkSVnH/p7qQevj7a8zHlcYhE
JmgBbRppZKTtDmYZ4UBfLT3MJwkT/4kOFmPTrXZhatguCDCiSkUh4tZqucSc
gSldcsgHtX6ke0nQ80/UYQyRD1qAbl2iPWkpkmBy2ognTv2ziqAhbTGPWNnR
+wZn/LJsaKhSps7YkQSKcb0HDxSMBw+0zEO25/w9rOxh10oqDx6IQxd+iX5H
bt1G5UYMkFMl7va6pD4DdITSOzI0W1mYvA1sKIVeSJ8zBS9ysY+ctSZLX6Rm
U+Zm8ucN1tt4w/lboHhnzWha4Q3Ne/OzZB759oUcTIiC9bwFy0ydxYUOeIu1
7zDjFDnddT7VmWvM913/3NEWX8Euv3g9HjxIiy2gOPQQkiSGuC/JfmyhldO6
pBInYLF0N4YZsERqo37DorkfcKMo/+rI7KFzaE8HjY2ZnvL4X1CwYZSBFLyQ
zSA6JJsBWpQxkA4pNmNTOk3Mt0JWi3P8ilwURkUoqFieUk1WnwIl6fXDSjIH
yWlh365tIHuRM9E1c4Z+Qr0F1A7tMYV7cq1Sk1TbExEdyAQlComaud25p273
OZ8txVnkPPzpztf5jo2f/ToGeDDpMz6j3tWD8Oq8RsI65L9bpzNmP+J/DMvI
9O28/hWTOaiZDNrSvpVMO9uBbtyDB8A7H1CvfTYvfYfwnjbBZTCXaHt+jlzs
qzg7od5Y3LSFtZEOsGH6nv+tY+dJ4+0jM0el3QfpQJsfUwLP0ffiiqXgvayD
Iym6uUBR5Wi719hx3VZBpLz2Y3JctG89967bUMdPsy8tx3MapZcyU3EvOGyI
hP5Tcx98lU1P9YpSaJUtM5y62eLZ3u+CG7F+puRYeBJyDXIn8uBSaaypjUIN
4HHOipYlRcjzpOTK1jeWp7OYjg8QG7lISewiziknl43r+OCM88bAqE4l8zrf
q+I+yHP9daRt5Ln9ZwTkstV0vZN9JL/3ROV6kHjLE8AJbl6FLapaipknB2Ic
d3p99fRq01KhXcVzIxeVTMv8Ba6YkIQXcnC0f07tnbYaf7d0GiYqjO6uzBOn
1O+c16QCGo/OO49/5iQvPAgeY0oZpbhwa2L0yNsmvrCOENTTDZXdILgGq+Ah
Qk21J/v6k7lPeaDnfMM1b6kDLcIqB2G9W9Aay1uZ49u3ED5Eg3e5BbRmzNL6
fmq7Nh3VjMyQ9B47D+z629Zvu93Q/FgzIIVsuTigTtjYRt+z7YEZmhP3lJ6Q
SAHlKmAH9YzRPzx784op3fnu8VgaCPYH3VYUZyvU/jLpz+9DbGF6qRjB3UPt
FG/0nG1MH6Y6UZPcuBuejPyFHSAVuI7/TPOUgbqaa54px/2cNbl1UW1AwQZ2
xS3g2IYbxn5/g96RtGWmM8540PXx0z/JGJUF+aa5G/nR0cOHILz2g5Xz8PAw
AeN5meugQm4iV/Co74JZRN6woFfs4MRTziUzFDuRkbW/iorO9/hlCsf6dZ0c
L6+waOt6lfhOmqjeCv9AG2We6dxp/urrOi5SFT5UZO8at4/dnLEUcYzx0vmB
nao6MgJHEuRiaUOZQV7A7FqqLwtFcv9uS6YCajh7J/onrosHqkusuRyE7lBr
iKwzdJBI7zy6LK1EcBC3V9FYWWTKQCcbjMjSDB1uD8wzDoL95q/MdGtJThr/
sqcgSE5t8RnlkvOw2/jVaGlpCw1K7O3ufH+G/QPYupZr3HN/D2g8CHkUQTAm
03QONEk0BS+E9SyqFxm5Jdw+JQTdb3m4EgTaybFtRCZda9Gc105slM8e3Bxb
oHdcun1zgN+8LoFUsb2cjBTJdWQ0D2WSwlZxTDzBkVYneY3tN+Etd1wUjJzr
sE3iXrjHkC2bNwJ5Dc8B+kkDCjTSPfVJ/HaLzFb66O/y5je11oLSZ/iP49dn
zJ+XWVNHELDfaakyDo7ftfhzN+cV5aQXtdR20Fcyq2alfWjjni2+Sz9cfOG1
2o7Pay9R9hjqPjyyeUB4oNXOw7IDXpZbX85PSb1/IO5/t/JhWfAo5r/WtBXx
QyJDLi5fiCup3TNRZss6ifl3IblLYu7SF8grPYQb5jW5b7d8BaoAmlhiZd4l
cpzRJzlAjsPOrGHRy5MxARsl8qZgTTT07+D5A6m0mqQxdUwY+5xReKC+r1uw
KZfbcXqT5ktqKBkTcm1aOmg1o3DEdcoTbcxgM2MrPdchLxzx4Hly778Kk2M6
k1jO2KYiHTdulC8tGtste9+/j4e16GxmMTfQOaY+WBzmiIRPXXbDFLW05otC
ieRqmGU4GAm2q8zXWtJ2gKn0rsZEmHydcRG9pJbiImZSBQpYCn/ggbbNRKkq
0045zF/ehdGrkk5gesujEMEevcrIxSPF01UazHBqXRdqu+1seUvbtRr2wt7M
DQkOXpHyaGMnYuvkdI4fnK+4oLVB8scwNjFM7+PpSq25g5HH4okY2e2Gy6Nd
8wZx7h2iiqv4oleOBtfjjHAgjnf5arPii+K5qEstLUXlI/T+lsu3NC37Odgc
eLpW15G27fvxK2sS95M0NzXtfenkZ5T31d1PFwWd/fgol/NTGVsDwz0JRJOc
W/28fKkFvdOpCaYbJyB0MHL/cWOcVXpE8Ki8nlmSUn2I3QEkqc6h140SdrBo
UZvhD+0dmeYVTqpm65hrTFoH7/RlJiFAlGOaJrT7HdSCfLkNg7xNEUMqHqng
WYGN+DpL9o+QDUIb6xmXiUEn1ovXXNaAo89prpkOiwkJWXCXudlxGEpkRhEF
g/juwXG/wwi1V4UJkKkzCykKDEoNxbQiHOpu9TPbEaNN+hbQ7AAbM6F4radl
z08Y+WimVR59l3g19ln7gRETlxKmqHNKEmHOg1Cb6tqCWkKVfPX09RtYK51r
Gp+/suq+OZOprRYJyCDjaa4g6WTWk3app+gqt0DmPV95109SsudsrUlr3KwB
9RA4RxOtiAJ28LEympGpthDFg9Ph4qgezTqtA+aqOiT7R0fqbQ3uVOTVoHTg
dGVhtcnbQ2xHfjRQ34UVhYcaMUlsmJ1dQCl46TSaba9k0e/sS3hk2xXm67Le
15nGq57MGY6D1aSReGyvh0zCtFRDLr4a4iXCBlo6B8VFgaJ8eFu7p1PXDjkU
F+XrcRdIHaBigPeaIckt5exqDZCsNAq3d5XQPLS8nHPb+QXc1OtNMce1rRmI
2iMy0ok7tjM7emUpeSYEV7CJdlsueo+zcLXwK46HiLr7omxqrBzbISb3hCi+
Oj7SMwxNewu7AKJTN7x/YG7vKLnfwboewpYJmOpdHwmUrPPPsHM9DmoWQy6a
MmZl9Yxm2uUYNRG9i9d1uip9WpRBMVhIenTvDIcFVajy1q3sdEPKW2MMcA3N
TRI1y2+viTPIBE7UJfy0B8esaLdqOCS2/xUH+qqh3x0gAtv1BYYczeKke8zs
8jcFXxT6TaWbpsQcJb5R1DSqzSCTPWX2eyOXo9NPuZKIBtMRFY9VzT0qJa2N
LEF96SzsWNRtKXTnvKYQWeyoVXlgEyHcOU2XKU9tJOck9qhZLLAowowyKGuu
29DJ15t1W6rXHun+YVU3mGJko87+BvMpo7D0FJhPWjQtMl2nM9wF0muJ6Shw
bCh7e4/ecboNevV0ToXoqkjfQW/vqusLHw7jYTWki6OG43RXVM9vp2h3dBu+
BBtNggrjJGuVkNhXTAddxJuvZ2k1Qwm5KiuqBS831UxyXXTbSxqy2Nm1o/Q5
auAR9gwMZLVGY51G0cRnhVqrJB1lYokA4RsJ6YyYCpCbfAP2pLNh3IMHmgjE
yjGau5TRhrmPTwEWxFyvToTGfhgvxbHn0CCHLObgle4hb9Ao0TGt3Vlm8q5W
BNy/g6opCDcxG7ATi9RxyD/5uqaJtFXmkyfDGErbg4r9P8JOTBYld9MD+tna
HjGSS9bqJdLFT3egl9jqvInuXKyzxchuJplvKvUroPOlZyBvrwrk7Tf1aQTF
2nS2OUiyZbrGtEr1WTH35v5OFHT1wk47XBf977fzLq8qUPm5QaNusyew6nCq
LX3/P6ngXGt5OBDIcddn2ITvXnHXz8LbbT7Lhggzwt6jwz7sUUB7QaKAv+RW
HXevip0RUf8jeRst4ORAkt98IMKmlNx0oJA5KwzfFlR07/2ts5zofKoDFKNL
qFFMz5H8wCs8Ij+oWD89IBaX3pQ5y5jppppnpIkB7+I7bmgCS/7OXpyO/3p8
dsmSFbtGcV8S7BYkfKFFSYbSunumbXyJoP7+GeP4p4uT5KLkWnyOEkjKwew6
zySUrtIWfYgXr/7n87OXP5+ea3K3dtRpMTsCndalnIvQOR77PrZ0TqEEf/at
eY3s461dSnbJdiC5ZcQznCi+P/AE5WoYPYcDatxE+g7jn0PzWlW448FBgzK4
u4Yty45hucPlNcSdgxJhFGBnXRXARsI0OXyd0K73+YnemZH3KDBZqevJKfDU
N7LVZ9uW3pRRGCL326jHb25mvIqI/gt7RFRR7NM2dfjAEFNqOVe8N8VRmHdR
SXsOiz24nNWcAhVkhI0jf/7E/cK+lvaC8h47Dr7fHcMkJx4bUbGEiVjHGKvh
C+pH0aOgUOqjGVI4z2f0g32OPdEX49ACpHNC3D+xW83HhNb7y1aS5YELQ0FR
xb0uafjDYvBAfOepwLe+rgdsgwp9d9K6xMhgR0GXiMPk82U0bZU68KYt5e38
9M9vzs5PT5y9OfEP+dLsVOpyLN9luLAfctrSfbqwmdXrsiyyyhhclMdCzayb
Upy+qq7vUHhVoRy2qgRCpg9xHvc8KQJDLmeP45eDwrWLZ6G1AorUNLknAhHz
JdfhS94p7RkQ44JP71Z4DJm1kgkkngCDs4FYx8i2rzPlPRLKQh9WekXuDFxu
CRxuiZLYeP3kBtvLKCfgE1cVb8OIVdR3MesEs0k/ZoeCOgGl7m57kcb5teHv
/X04y4AjWqvpxYo4coCwF/nVJjiMWlELUgO5MfYQo/pE5uH2xc1zH57lE32V
x3X4oedhwSctDH3DtXeFKq+0CLXT44EL7rjoO3YZHxIF5OOTdYN3xh9TiyXx
xNrlklMPsCVViapRx6Os3nZmlyblurKsRDsPOG1ZaP2U8Vhmm0fa5mr0Q38R
hnBx+O6Z/JfsP/x/Hz0cH0Ve3BGHbt/lK37Jtz9Ovk/m6bbGAxlCIJHPTu5t
fJM+gj7h0iZ2OlIhF2jXRePreZf5KueCuy43FZX1Nt2CKcFWGHVutFo5z+K+
ydXs7VknjJxx7J6IR9zzjeAWnrft8LWSZcQs7J2ihBo2bTxa5DDVicDla2q/
9ThBVVXq2H0UcCbvDAbwyMNSTdxZ3FcyVcofWraJfb/OTozHRoKcpcfuj/4t
NPFYbUeb7jHs6Lfxvu2GJt5xGU7gTAXe+688t9MwWI8rs0dScjutVVrojBsb
HFs4EyC1Ye2WoofxYR2lCg/sc+/thuKjV/AA0GDNdjnHSWuuM1OG2Vs9wl5i
cQbDZ9woQwKn7n6B06SVgbXis8rI0pJgLcnraA30BJS1uL/TpslWaxTxY2sZ
LzrpG1/1HcspetK2n+9B6jmwz/EgaZ6Oqcek5EXvTpNcuLbt2nUjYQCZbFCj
xvTmLoxcNKuq39CS+SnGdjr4LSaqWqZuwDStJnH1BPog+UzrUJylEep0Wm3Q
7TvyWCTCEf+ZdnWMkAXfkyHaKQXZFBxM0ha/QuUYGiskZo50ylceeApbs7YJ
Z/DgdnU9AT1tPIP9bY63u4iu3/H2hYnui7jKPsPH5CIPZo8d373lwY4fwtyQ
HS8BGPymXG5WWay1aofOSRJb7cPMHOhjM8t6zXi4FdONlCasQJVcYTmOTErX
LrvGmndpHA7WQJ/GRYZytXxYDGv7ALVXgHUN9O2beX1SVtIVuwewiau0mpMS
LjvdYedog505N43v6baOENlJ65oVQt6iJe7f1GYH3McHiO6eVpepeDqGz2vR
XEGxHWYlCGAKtuJVsPk/3JBXmk3B57z0cuuBlfcQIJjU4LSdu48nM4wZBQat
qE2sqB1R4CtfrTlAI/TWky0VDtk7lrr4bg1coD2uN9MlfNXeoNkXjyDMl1vO
suKaHbrUG0wr8Mk5Mj+LkaJziugjLZZJ7UYVReu0uR7R2ftt8n3r3aWtk4n9
aD0GI6qqK2wtZ7IWEYx5upb2cyQGsuImr8qCfGyJD4xR+qujCYw3+Laz1zff
YqYN5ZlIzf6PRz98/CiFHtrvyqdveoyyAu9/iwHGfC46O62qr9Anpsty9nbk
pJpdk4xTjV20x0ANo5VYazrDVgCYEh5moCmOe1P6fgqDGvgwz0+fvnrxAlvq
nVhR5Ws4ZXqb3E0ycrAJQw+Pgwv3GIsrig0N1SANr+cxKf+vJWPdxwuRzWCp
FrAiVeVCTqrK/EgzGBL/zB7N7LlOg7euluxvJbGiSD0mrHC0jf3Fp5fPqAcD
mLOUNvETYv2pBEFfY90LC2w+VLfnPb3c6cerqsBKx8Jc97hxBTBfo65j20bf
RvBhAnuFE/hWMSx0+t2jHx6SZzvYo8SZ2W28U/Thtz7XNPM+ZamzCMc+SeLe
4sWwIoIV7YeHYGdzJZKRp9TwCSDH6q1Qi+S312QmyRv7eaqbRAsufB4OF0oN
67dwzeV3pLvhxKAMeyx78LWEQkoWgWjo0B0OC7RJUDeZd3/hhZPZvLDhqiRh
ngKTopoIkM3r1A8hzsz2wihIWiYrKGnX5zLEaSr4wr9n6RIwNKAr4f0VSaCq
KfIQkEIju5YvX5Y6/47G7r1en+Ty2uXvYr64gzBCBLehnuRiOFulPxRKFz1G
hgxmEQfL0Htc73tC7LFoVTpbC+r366x3vPPC/C5OLS3NUXlalH1CtO3DYh+y
r9nvuvB2rvd5nq3uMqLDrKS1xxd3cmmqGU+3HJ95cr4Msz+REdIoQ23o7y1m
JaG+mxNfw+O/JVoMFVlR0qc89RIlChOWkqFJaruwXnohUkNuij151gRbCvRa
ZmtR5q82Q4gAE9ONR5pgEKS7oZbzB+3nrAOqtyt08l9wC0uXkhbcQmpVZnQc
yibEDH3jU94UYW6p9rkKZXzamGrHjnqOqLUjjjj3HE88yXvHjNlurNn5gbPs
EXzKr/spwzA4CG9OzT0PBftCYsn7rwjej8690eRd/0RrJ93OOK1wIXZRjvM1
Q1ZRVN11HNYOvYMxQNHXZ8V1kid8cqh2DkMjglvz8injkbaoQjt/RKEijsRh
BTCPmSVZwzpXT9wSHbTwGNfViKYivAmrOlZGBbKebKIyaohxS2Ngc9YXpiXH
BRnOijMnStd3a5NpWmetmDtmy2WNZRoLvxo+Rfh1nv5Rr2ko91pjJX2opv2z
+kRYwTJNuinATZ0Z/WEuWyLpHLLjMES3l7ydLb/TKxFR+sAU5eAvF8QHHxBq
dnTNNsrW2zmj/ZDfnxm/gm9RQzUxitAnsCfHUQS18GUn86Ux5sSHEOo40ODN
q9lmhamhM0kiAcLgKkeav0rBiQIbNS7tQfXmX2pZmk+olLubawVpoFwZpMsp
NF06KkwAIwp4e1JE/oBCzv+KVGWlc+rVFxqJDCbYSex0HvfRwg6N5SqL8FTn
zUavImeuW6kelKbePCsqnb8MZJpLVPSq5PKCOPpLQhKVpYJyt6kQfI5NDMOo
krwKbi/pSOitQ/KARK+zjRl8oXNZMQzLrSmaoUEsdZOtsH9mfb3hHDXK3WFW
jC3t4aN7vcEjBXer8WzQMPfhXdfpug4jtKcbUbuYKjB+XaX19YF/TTu2tcpo
zg+eNpiXV75u3StpIUVMVStyuWlETHMp6iD5yLtQeaHG3sHggCaftddg++mm
G+9zffG+vlStdkHtx87ekXVh+eFVVWL3FfgZAJLPmVqW3KHfC2pxdjntlXwj
cUVsBslGVmi2rYk9cRMAYYAsnQ00gYLJSvQJ/HjVfIdMsvepDQVZ1i1mymMd
QhYBVwGWd/My57stYrL+EBNLwpRdCjMqO6O+7wddR/4oZMyvpR/GSO3HHUqQ
o10RjzyQJIWWZPGj3CjBxvbqkt05mY+L+9baM68ZK8kbcooGPzU2c8k33Kpp
bho8F0ceuvlTRv7YTZ7LJt9/xadFIdvKz9mu0iqLxumlLYLA85YGFiG1ksgB
vxGrN/wEN0tqnxZE5Jy6L5MOLFsVfLQNUveJFmk0zUN08Smrqb5BdOxXVVhK
+n94hSU0ht2e1Meu4/s4w1GAjNs9rIWbkn9Xk5xbZaWEbD7VkBIt7cOD9wzg
KVkzS1tmgGZCc/oPFcyw7413RLfx/lq+uja4azwgx12cnv/l2fHZ8xGPMZTG
t22KV0IIQhN07tiUlBe7gTcPu3TArlabK/SylXwsq1xP2tYrLtm3264t5e+g
G7iDfcUKMqQtIiDOSmwcX/C2P6WbTRG0zN8pQd0YWeuGJUIfSjqWVstf5Mim
KNCD4nmcQCZdsXwPoU5VkXU19eFx4nv3cIW8iN9QFMDNlFo1AHqRTDbPDsqO
WkUGlx5Vk4Rwdbhcpo/hrlXbrjavflpK7u0ouNvV5u53thgXfmXqoEMPE6eF
tOy1DRvTLEG6zIyGO4ReY6WBLTpPTLvQBahk10JG6pwr9Z2leMpcZGJKkzJK
vaoqvBOxKcuXBRW+XSfgfNdC7st/2UJ+e/wDaQqgo1OjO1M/bwczeZ3S9Q0v
9jH41STx45x3gah3y+nGaLd1XIsW3ThCig9Ti4tB8hgUZOw7oh3ilttEe1UT
oltVZmmjNYFNss2879kOEcE6ituEc8LEZlz64YLWRWMmEScXiEtPDSEFNlQ+
O/VyUHzFP4CKBnY9pRpmri2U8rx2U2ubJsfqB+qYnJxLFSeY2SkciYqf496f
3TIYR5jgRvBeofbmiR0BajRV7YopNptoOzz4V2sz0g0on1XOo1XYCVCuQmAe
+yBLk2+zOPI8tYQRvYD9qIwK40RpXftQ7PnpszcXpyfJ/ncHLKI5SwXDmi9f
nj69TE5On4MuhfqUnzPRHp4S6Mx3B7IcWjPNSPEMdRuRH+MsjoxjXrfZq6xQ
+2i58W8SHeCz2sOs94zTIfxIJ8Fis5pmpLvFJct4A2YY8JlcTfxsbLZuOa1f
jdmDpMWoNdn9NvUtFfMCq5dRSuhcmsWy5IJx0A83S2C6Gbf/RWKuKWde8El6
S8jnCMfDotIFVz1lCaoAuqTmo+n8103dcOdROUjOEEFjD8AuV6Ra1tlmXoZ/
A70pw8BbQM5Qj4hixgEGP14QLVt2h0y35AbFBqbXajBSWyI/2EpODw1rZVVb
bP7NBwL2UzMWxMY6KxnlSBK+JZGNdar4ErfxufmlnyrcdjSJUtUywA3fFPQj
K2a7idccubj/Ejtd0cfIMrXe5A11SNOvcUYI21kpTx1DEa991EhRCDsNY+go
2WhAfyKuqbELHb43Z3pQq07ujazo36DZgsZ92nZ9EtWmRvAG5WyfEx/I7HRz
zB5dScwX5yVFNKvtCRF90umUN6Y9pyT9TvoQ1m4oVNd20dJdpwDONNMOZJST
M5Me49b55TjjdmTietzagd9ONFApZL5kwnrPpP8eRrkROZoBQm4nLpohJsJb
lMBkSM7SoboRH1TrTnUSivWvslq3ETrlPQ0X4OI6pXzH91/V/LeP1K7dCm3f
/5t6O78MFbI6nOL7xzgzA+lX+nVKGmZev0UsbgratjosRd0SW2xEK8q+XMib
nUmbXsq/w1meJKA8S8Ugu6R3ICCmlAKMgHkmznki4htqVeUTJ5Kz/iSbhTT3
xn7JhTCRb5TDS/NUyVAHyELHuqJsXUPDIzif5oqug/TZ4RFF+MXfiaVhfgNw
YJ1mIt8hT/PZleo1k6TQjQY9yrXYHcn+wmaDsEjB1jvlkig71e6Cl88vrKvB
92vUDtjqiOcctO03zAUxmyLyBHPeKrc0nG7qLW0FiJK0a63EwvsQIwb7jRrW
28UBWxAqwilHE11UtYv3hzq7zCM3ZBBWwSwP7QBMkHHAX4Kxxjuuq4R+wXxR
6nYHKx4RU+vwGB0Sg19159PrQPM8axYy0HwND+ENCQNrwptoz2ZqFS5KUIcq
SpOBzemYqiE1yCNUYMjAqRtssG3kelCJnIRBSATIT69BMtKkWWrtCsjoE1XM
2hh/DtlE3JaSr85yqY5No4Mdt1ZCu4Vi1B7ltgjKiigDn4fN/Wr76HiNVe6F
9IblKAwN7PAoqJw0mEYHJEIqQ3rDI4JxY+NLfvCmCHOYDPHaat+Qegh05i+X
sg51X2t3NQazrKwtknJcIm6m4YQh2wnq6gim/C20gtDlOQnETeiaZyS0xBi+
RkUWGali3PRC9D58CY1QxwJ2Vku/WlQ3ZyUlNPpkS9ttz0wM2/UCBglPCtA+
D6dssvrYrKP4qmkVxjOVhTBM1ixGKvzhsZOWSASNKeeXl7efvdZcz0mcrYWa
LNqBwDtySqq1eaR+OBrIwnUqDWHSGXr3XS/5kgk9CFWyCyoVzD+lMqrXy1rf
xcu6TXjIlJCiRmz4cvNUgHutM3LGITAKaTwsirqj5CYdrzzm+7z/inQUKaJq
f7t/IvN1cUoPJlfLsDn2UtthlPubwvaHP4jqOZtyHDcM5f4O5NM6fQfHFwZJ
d37Rm08HX3snWmu6L+2jbyy273bXs0/2u3NKav3EuV1z3Y96/u9hz/89Sh75
dQ7pmUfJt8l3yePk++SH5MdP+SxMkv+N/6cLfejd2fnp5fnfxLzff/QQB3XV
B71PfvhyEDnzVhzbnhrLcWS01xS7ijx6+LnD5fER0GSlzZjNBnQiTdjkaNtU
3FKKrD28tXFSCX/RttK8f1qI0eqqvgHPka8sEiO1TZL+msVT2EmpIEfc0Nz1
EXOykAZrnX+uc8PhYud1/9smomxrJrXeTkeOXWC7m1lsEvYmRnFrypATYIIb
pFFxipAxJ0NxuZqwUZR8YnrUpNx5n/IEQl5i9HLcE40sDD3+7Pl2m0HEHuRu
TF0z0ihuzTGsXMuKonFvbA7pLvqCtiZDhXI5Xr46PT9/de5/QyOOwJhFBy2m
TWDGxCSBBzVgZp5sZ2nFkVPJidCIKGjj1yBHOYYG66nPb3i5u1yU6qFE7UYa
6lEYz+rG4rvT4YWgkIf28KwEyq80LSx2M7fspLRfgddeeZJdPs1iiMk3rxZZ
DDrpBmoz0LouWth7ods6v8Z3/WYwNUtIhp2yOllyXs42FCtRvhZqO/1IICap
m1CK1+P3B81N6kc0DtnzUG0NAIJ3Eb2IX2EMSu1CGKU9UF0N9+zrJCuxMWQB
5oFIpiYtL3pBo/E/6g5pa2rOa2r925IA8ta+eTA4x5GzWDtps8w/kM7ZHvpG
TtHGd83KdU566PzaJyxak9Pv4u5GAXLdgn2vA5n8G87JRdagAxkNGqKKUvTs
kuHUzjlRxt/otCztuhX58TvZSVxa25aTzhiH3qEVyUoevzPRIaG9XH1odWt6
Eud1yuz54vAOOARkpbNIlWFxMHAwRtz5yOJya9pMtg+6vQCpqdpByvZC6RXV
ZfRlHAQcjBbb0c527H0blrum0t0ZQP6iI+niOgPTxUFsj/j7YHkcHahYqKmn
rxcfT0SisVPZFEDKxKluZlQi7epDxAkfMKwW/9meS6GTIWL4PqcbuRTmX7YV
AXFa4OXWVhDx23gKQq1IpjgvDmE2PS/w/d3MWTEIg8+llUdMXWlYbDkpVC8w
6FmMrbM7bIBGYqUV1izW/pUdJPNAh7OFF049hS3UpI9n3ttT7KBLOpjaaVy+
gywJKnTO4tJYBSpiqfu6W9M5qcGKZ5q0nTdSMtFT4i2YCwMluThEYdPcIPyJ
zyL2b2kRhACxE18oDyVHn9OQXHcBMcA5CQHeOojcqDF4FPnwO3CqAwWVC6s3
JWKC41sICs1m51/lqC7seC8fqhRORyDE62y5miXGOEdE7a+kpzh2FGLPIQ/w
1mFkzbXPeyMnNbkXhzphSXtwoKhsaTPVWtVPGu0aJsiJtcFMbg/bV4Nd+LQt
Hv9OG3l3VRLfWL07bZli4sJ3ItR9XXfZDzd0MQ5ZFLZBg9JS2oECr+DblMQS
JBSqOwNaucWJejrl2qbGDYirYZz0z312kq/2f190vaIb0w4R2xEKkoM8zxrM
IZeSjhZRkVNUouyttDD1E7QoygZ4P4mi+tVcM2vD6LhGt/1kytoUOaXUkJe3
p2iyXBD+d5cQbuo7yCs2/7C4MulxCtJzASAsRlqmoeOd7ybDUQ5s8DxUJXs3
pXYv5X2IdaAm9gsTa1dHEUZsbI3juR8cgv6dgR+RqAseIT9HWJy0nWQ1B3Yb
+3ZI+R3GYmcs/HHr5TaDMp3PGQKsoqPthhlk1myauHYmgCaIS4thPWkg5n5i
dLw8CRG7v0/bTei5S1IE7rxNie7czcF1nU6avm27n6jUgLu/tJqTBHdNjE91
12N1FqUlRPfprzQg1o+265k44jS9SlfpDLaNp4ELeqVlsyTPDS3uS46GVyD/
UsHZXGEil2ZbHH03lkSi9kinrtzG1pS4Wk/duETaUBGC+8dhq5Ae6L0jhS/t
tn12WI3SKGGwB0hrJy2TEMeWmHf/cOjeq5W3kttsfakmczbOP79PfKNzpf9/
Ht04e3n89PLsL2eXf6MU71dvLncFOL5gdGMQoj+dnr4+fn72F5AhLy9Pz/9y
/PwfBJHr4gLDLv1XJvQtlDSNyDf++wdnTEj/OoxaQ0uwN1gTO/MHuq5PxA3V
2auYV6HhbWnlCkgPymunSGrc7d1bDZ3JEwMNlsWojRt+kmapnZvuWfHXToDz
5VlRDYD7rapFl1iVZHrY6T8VyXioPM2kEcXsqOy0XY1sg/CGxMJl/+atAjPc
oaWXdhQSzoaUtOCOOStaxiDp3IMkvoS2eZEXUkJDGX6blerWQ41XAwZ4wK3+
jOxSczi9oIcq5HB8OME+NJC8L/oIllv4/daEX89CmpZpxdPbmpP9653RteKF
NQf7te/3lc19pOWssAbyzj5BUc3a4Ptcmz+BvuknN/TzSEkSDtdkVc6xXaeS
FBr1vwAp6GlbH5g4/ENxjk85xJ5T3HGTDpTzFWkdmT3y3VHis+8eYjJdT5UC
/AsTc1ak9Uipw5ayMLHBxJzDA9LgyryMh9ptyBaldmrcIrG3n3j/ofYi2fUY
ubGNm6iNqx7k2Jh1u4xZW4PdqQlKUle1Oq3cbyehBjrMVVATBHmlqMtUIRHa
R4RlyJ1pJwuHV/dlFto+FT7e1lD68QJMYCxrENRQ0hmeVtyoeLHM3kkbh5H3
gOYL2+FGOuFKeIgI3p88xcja4658FRp1EUzXDFI0v3qaNVwk2SQuurJUah5X
DcDr58RkykUoahqwI1vIN54Fe5wIzn25TRl50j6FnE2xKHvQ7wB+qGkFEWrP
XGYnPCiLfIGx4dGq+CRLiyhhqn3yRjqwGTYaEv+kdb6wKlxtyIsUNmpS3q9T
TnZ3XRdSO8TaG7rBD+2xMyyCPZ/B4yjv8Oq6kWvOmKLx6kop6u3vCdZ1EebI
VGMXuvjieqCzg17v0sBch+Egs+oT0CbtA34WzTOXBhpbaXqsw6O0rkW3ph76
2oSStOdxt14w73Rl9mm71KlLZ4L3nFbfBMd7HJgj7xwwmmYpie3AABvKR+fB
33xOaWGWGJj8vSmYJ/F0GSwhoQ7tMRKjGeqS9cu6juhJoXm0iSmlXUPl8wnK
BjScJaz+uAZfdASRTxrr7FXJW2JHyU2Nto2LY2CtFB1CD7dQY07iW5lLIV2H
W9W8TaTM4YF1QwzG52TIWasLjbYt7r/Icqzrcsas07vEq01h5416hPyBQ2Rc
xll7WT94sPc4T/dAq5bUOOrMHfbshe3JLLVD5V0/lsyUR3sW3BfQd74jtlBg
6yVfUTzwduyBks3DlnvHh7bUF4Kgm0w3nEunzsxPQInWggtanJ8XfAdaWjR6
jaanLEUpbd5Eb41is6KLB8Sa5k9DTv2eOSyfTQMKZYhxhukgd5JC0AAteCa+
GrrKu/2+i2x/Bo9eMalTlLZrVLbUhoPfjCfxu9L8CV82oE2Lubqj7iNiMxDG
YdtMQgi3wtYBA+pkzbm0ondIaHDl7G6IY0uH88YjxmqimiDVfn8aZtGDDKYX
moHRmLD3H5sUh1M5Y2r0Hfk9x8FIvtPSt7U6PXl5gWlgaPkHvvpqzQWyA16y
iCPvyNlBxbPm8hLHBYRqT+x6rdYk/vDwB2z6qFlXWsm3TnNpZSjFX0w03oCS
wiLXfsUxvUJMUcn3Rj+fytHUFAM7wyeYP5h205O+mHDfg6TjcPqX9nspq6Qn
lyuMjeDCzDYX17Ii7nOYFp29pWZvMsOnrzGvvFO7Ee1c5vdu36spYd0iFckN
W/O/JDNs4LFAbg+5OEXLfyV06eKAJ4BiY4aNj3RKlznkbrdWjl5iSSJVGC7T
LWyBRmlmHhanDcEun1/cMyxjoacESQFN0qhTsJarnACReRILLIK3Wh6mZgUf
qviVkmN+1fPTlz9f/oLc4hBIETXxnHwXUYP4b5MSdDP2mwqak/3IkbcqN0WD
x7QrTtT731Hfn7DMoXz0EP48gj/fwp/v4M9j+PM9/PkB/vw49FyIgIzHv+mP
LvTNJ28v/u+bXQv95fj87Pin56fJyzcvfjo9T149S149vTy9vPjUhT4Lot+O
IywijyvHLedWOm7x7EeHHz+SYvj6+OTk7OXPSmmh2lpyTg7fHR5OkuRVY0a9
SIIM3t2Riwuii6g3XKNjHVLt1Z746PeakgZcMI807W8z/ZU6I9DwiXWl/RlZ
soc7PXEt0NHD5ONBmhXOuenB8eGb9qgdMsGD2MW6JOQsfTw5Pq8N5E2e8Mj0
zpHY9uTzT4Y0KZMW760m4eH9sI40wyXkiTMiKK1JdkAJGb0/F84Y5uMoz5GY
hfQVkEZAYWPqM/Uhc2y1wBk2mn+AfQREhZ7iltYyKEIKBHw3DNY6mu06k9bb
CApySTAPUz3DNWJDgW4VgePEkWwsgI/XJUgLbkktZZ8XmxWWTLUKO2v6NP87
5YKsuLHZLUiT6y35vqiZVc0dk4nvY58XJE5Q/IrGDwRCalDZyRWcJvcI/SP4
gLZXfKGEiL80qV5CbqKOaBLTfk9zej7iuabWBYe0P/wD9O7c9/exUzusMTGg
K00NwG4javhat69uibwOGbftuQtRxcR1Onem7IA6XYXnxdYWv4xmUnGzFurD
meTL5QadferbWWZXNNNnNZXirbuSKpgjd/7r+/Bf7ljoQ/Kyk4OG6QX/3vrI
pgz0/vfpEH3oozWb2/BvFszuh78fRDEJ3QWR+ezLQeR1WmTvb8gJ1aUj9RCO
QucjueZckdVKGmIjVjngyHZC58lb3FkMhYculdmuCKg3Zu+aWkh6kVe1dJ3U
b2iVUNfW11nPeDzKSq43t7XTgIotN52ms7eh5pSKGp+OXydjW1Y6clq/aunJ
hzwGoJBJYB3a77Yey33otcXEugU2CN2bGLpOJftvAPfTYY0YZj+8xwBvnMc5
8pYEWjOUNmkCclG6YhtQXvIclrRZnqNIM2mDwQnH6Aiiww5x4f1O8qS8bg9o
YM8DdN+TjHm0pjoeuBCPVgNQb1GUqbpKm9m1cOz2g/a847o+RsgpIMQbi/8p
sOHzTAgtn4wU6XnJXds6HIQfxXrU7EmLnXTK0O/HTgRVyk58PX2Xhw+w7iHu
HQuQSLAioyJ+QJeMrgWRwofkAr+5wG8u8JsL/OYCv3FdEH4DPB+4gI/r9/pb
NKBE+xD+2i/Pvhw8wXeGb229UP/5D4RHDYukJc//zf5txzdfDB7xH9mhddxy
h+vKKHMBrpVUVJNc96aSE7eo6AZqJ5hm6nyzws1Gx6/4jEjkGxfaWfDQSmyc
72r3c7ICeDYMWLRDmXdaTI1rsNUrxc9Dg7F0WIyab5sldScFSeSz51oz4KmJ
JjVVRZsO3cQlV+aaxakwsUT7v5EW16GauKziJHIetuPi3htREoSAeEf4oY5S
rH2cT3s2SX31Zw8XG+2aLoZnw1WIHXRx8C6teXBeSs3sucZh0jlqjh9xG9KM
i4mMl/vBA55u8OBB13nPfJnDhZiekqXc32FrsgDSws7C4tmc0hZ60irxDQOD
L697p7iTKb+TCEfaElUdk2Yg4ujw8DBCe7IfGqoc/F85wfvNh3PH5jx8bHw/
9KvrHMyBTQb5U5wMElwQZ8cvj7EvJMX2tM8UnAiqrK9eU3+Ac6B4smJ9dId+
hD4WmgSpWiPOP6WXSStO9NHIlT5IHtuy6v/9v3hpp/H5lxf60f/+X/K67cTD
cf7lwDg6snCA0nz24rUfjjbPIoDOO/Ao7yQnP7qFnsJvFLDtMFBSeIwrHz0m
yu1fQSiX07SWyf519i7FDMZVujxQd2dKRZa3BZuGYCh94IXAvscMqA9UMLOp
SScgc24GH7oPLH/i/zF/wb/DSod4PVraxAXeVMxGhM+fPR1f/nSSyKNHkaDf
9eRD+Ci4+VQY7/rFozH8eQafvynSmm85OTWRR7P3Ev5DLArzHa/SAq4GefxI
an7A/6O1vj0cP/v+WbyW//rZD4fw9U/09bldHru3gl6LxLP8ZlnO4DwwSOh/
9xR/96z7O5Hc8PO0IF8x/8JFJ16rnrzXfc0eNlKGu+0hc+KF08K6U/OT5E1N
7WRey2xj/KcQigylffjw8cePxKPtMosqQxbFKbJYA78mzElfgJryB00MTj72
EVDfVDPHlPaXpe/fgWnB0ocV8+qoc5vvspk3qqXz1GeKdKe+23PUmHGfK7hQ
lMPlBSZ8gMVOnPNTie+Ne44imHTp6Pbf5KDySIANj5paVavrjx4zpdrKKlbc
ctv+Aq2TkF2/5LpGLEOjWrEK20BSFhzJNZ0nduars+JJY74ghDCwSt9KP1cs
d+2lANODu6g32iOyKDF3crHMceRyOZttKj0QTmdoWJ+sZwAUNeClLjKWb+Kn
qBN2iJHOYm8nIXu6VMonotobvJ87Lqcu5e+5jqivZVC6BxY0BxryrIyiTo6l
+6G69y2Z025DDnJFO8fYSPB6dHevPN/sJMAnvMNJV2JpClXNOW2F6IlTAGhQ
u2RIaIaYq4Svf10nJxk5vVEg0P2NAeeK+5RTSyY6HkNTlVs4icIbrK52Vncq
5WC/S+3DNG+JHQUPifa//7cHD4D9Pnjw3/+HiU+AVo6p9B0F4UygWGWoiOT1
SrIwlb0QBkLL6OcXIb3Ilv+mVRRh8/zA9Obk+uOtMCJYcoxLjmFJs4wdj6F1
7b6oAhuJmkwc/GUdcpWiFA0S4BTc4fi5XNu9boRqj8wqHyYMNc/Uqreh5PMi
o8ALUKx3CjJvgdekxVtEmAMTK3mK4nzkztPlGpAG7BHY77/i5OUS8wTTauRe
pMWvG2zZXbyFzZynJSvdl/DS59lKGk4DpHmVXGfLNbIpNAarfLoxHXYN1egR
g9gnV4n7PzQ5TJ9ZPgEA

-->

</rfc>

