<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a response-requiring DSO request message using a newly-defined DSO-TYPE that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAGXsnFoAA+W963YbR5Yu+D+eIof6YVINwKQky7JqnTVNS5TNLt2KpOyq
njPTKwEkiCwBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtUWwURk
XHbs67f3Ho/HrsmbVfY4efryMrls0iZbbFfJq01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY8fujl8/XFy7/jk0fhkfO+hyzfV46Sp
tnVz7/j4u+N7Lq2y9HFyXjRZVWSNu7mm9756nfxcVm/z4jr5oSq3G/f2Jjw0
forvdbO0eZzUzdxtN/iW+nFy8exJcnJ8/5sR/evbbx8+dG5WzmGUx8kWJvnI
bfLHLknGSVPO6L/1bl1li5r/XVYN/eDSbbMsK3oS/iZJXuDgk+T7bLXKa/qI
N+Ai3dkPy+o6zDK53NVNtq6TJ7BnMHS+XY/gl7MJPZpOp1X2Dp6+fEI/1/Dq
DNbz3TfHyZNlWsEYsPf4Gf16ljc7eF02vynLefIEfuKPyznM4slp8t2D44f3
5aNt0VTw8JvLU/pgsywLeOhfTpKHMPaDe/eTE9h6+lW2TvPV46RKd/+a17MJ
TD9e8uUE5pLVy7zKzKIvmy3ML/4Nrfx0s1llYYm6pBP4aJEXeZMlz8tyY9bz
ZAtE1eRF2VrMN8cnDz61mAfHj5Lvvn2Q3L93/K1dzEym9a8pzmYyK9fxmv5t
kjzNZ0BZdVmYRf1buSxav6A1XcLs5tsinOpVNlsW5aq8zrM6Okl50i6d/j1O
XqTX6TxdZUXyJIPlZPLxq/eLsponl7M8K2ZZ8jqt3pq94d+ajXn11wfJgx9O
W/uC2zpP/gwkPqeV+n34ezr/15qn1N2Ey/5NuEyr9L/UJtSwoOFduJokz7N1
tANXME74jBb/PXCoRVk2dI+3KyDX64i8vwe2COxyWlaWjH+6So6/uX980k/G
Mr01sI6y+NfF9nrbQ6kwvdfbGjhbldsZluv4Y5rkmyJdLPJVDh/Po9kdHFj+
AfufXy/NNF8+Se59+/D40adu23cn3yWPHn6bnNy/H7GOjczkX6dpcf13WoPL
Czi0NciKdxke/sv0epU9PWU6aNLqGqe1bJrN46+/vrm5mdTETvTaIhP6epMC
X6i/LvCb82yV7rJ5Onv7NY/AsunqyevkdVbRm5BwNlU5XSG3naXbGg5xuoNN
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

-->

</rfc>

