<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a response-requiring DSO request message using a newly-defined DSO-TYPE that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAJDtnFoAA+W963YbR5Yu+D+eIof6YVINwKQky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEFkCMtGZCVEoWWvNK8wbnGc5jzJPMvsasSMvECW7PDU9qlZbJBKR
cdmxr9/eezweuyZvVtnj5OnLy+SySZtssV0lrzZZlTZ5WdRuXs6KdA0PzKt0
0YzzrFmM50VdbsZ1VtfwyLjOr4t0NT5+6Obw9cfJveOTR+OT8b2HLt9Uj5Om
2tbNvePj747vubTK0sfJedFkVZE17uaa3vvqdfJzWb3Ni+vkh6rcbtzbm/DQ
+Cm+183S5nFSN3O33eBb6sfJxbMnycnx/W9G9K9vv3340LlZOYdRHidbmOQj
t8kfuyQZJ005o//Wu3WVLWr+d1k19INLt82yrOhJ+JskeYGDT5Lvs9Uqr+lX
vAEX6c7+sqyuwyyTy13dZOs6eQJ7BkPn2/UIPpxN6NF0Oq2yd/D05RP6uYZX
Z7Ce7745Tp4s0wrGgL3H39HHs7zZweuy+U1ZzpMn8BP/upzDLJ6cJt89OH54
X361LZoKHn5zeUq/2CzLAh76l5PkIYz94N795AS2nj7K1mm+epxU6e6PeT2b
wPTjJV9OYC5ZvcyrzCz6stnC/OJPaOWnm80qC0vUJZ3ArxZ5kTdZ8rwsN2Y9
T7ZAVE1elK3FfHN88uBTi3lw/Cj57tsHyf17x9/axcxkWn9McTaTWbmO1/Rv
k+RpPgPKqsvCLOrfymXR+oDWdAmzm2+LcKpX2WxZlKvyOs/q6CTlSbt0+vc4
eZFep/N0lRXJkwyWk8mvX71flNU8uZzlWTHLktdp9dbsDX9qNubVXx4kD344
be0Lbus8+ROQ+JxW6vfhb+n8jzVPqbsJl/2bcJlW6X+pTahhQcO7cDVJnmfr
aAeuYJzwO1r898ChFmXZ0D3eroBcryPy/h7YIrDLaVlZMv7pKjn+5v7xST8Z
y/TWwDrK4o+L7fW2h1Jheq+3NXC2KrczLNfxr2mSb4p0schXOfx6Hs3u4MDy
D9j//HpppvnySXLv24fHjz512747+S559PDb5OT+/Yh1bGQmf5ymxfXfaA0u
L+DQ1iAr3mV4+C/T61X29JTpoEmra5zWsmk2j7/++ubmZlITO9Fri0zo600K
fKH+usBvzrNVusvm6ezt1zwCy6arJ6+T11lFb0LC2VTldIXcdpZuazjE6Q42
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
8srkv4WKDk4zqJD3p1QxVSvaCOaOOibzuvonLf4CsS5tkqEvX4++8hWJRKJa
9VWVwTrklceSW0odEnSsqshAjpgpHy0qg31b6aKiKN2KEq12h6xigyVEZTJN
nmTUVkb1TKqB3q5o4qPK60nys9LYvqvrdCG0ujqG2EfAO9oEH3AVl51E2XWq
WBrBFK7Rnk1tCcBGjWZUNMku867TeQQ1xqonjGGbcaEkGFRq1NlKzmEfJskl
7qE//ZDRHZLJnBZDpkiBfwB1P6y3z0WmKDNDsg7qFvLGwvpYGUR102CaEQ/p
jeO8buIi813otespZ5R4W1PF5S1lOMpUN1jfqTaGO8nWI8bQxgqJre+Eudhc
yzwuyoIxSrhxdZ1Z3A2SHn9lWDhh6O7ly7MnV8nTs+enf6XcD99Mst1MNVCg
L5diOIuTvuqsMwWQcVwM+TwO/6KFarZBhqh9SNhUOCcSITeflEccuU/E7VuG
fS+5pENbLaVMi+16mpE+H+eO4WWaYeRjcj0ZeXcfeT1izfAoafFrLQNxk/qa
rqCOFHOSFBr5WKxKzuQDi2G7AlacsRMP70VNVowcAGkTAeQQzpOFugsOb4LH
qRC6oqLH6fxvoNByxWM5eXY/oskI0y7XZGzU2XZehp/Jw8p7hReKgHp+I4oZ
u+pVoyf7mDW66Y40V+zouFSzk4qw+H7YctqYKKBcb4fls/hANtiVRTY2NmLI
1qdaaIUn0BD0O1KZ94S554X5aihI1XIOsgcyMuN9mCu+Y3uLi5MzeNC6NK4z
ihViZMHI7SOrxMl5N9r/SB4bubi8jUjuWabOjbTg+vT1NqfuTt3nsHlpycUj
uF86ahxaVZL0lbDZobc9gYA6Y7W1ThQG2npB1fg50yblmfr3jLQKlLAAeZN/
c0gEab2T2QE5lIF8BRhN2JSZdMfhrHvr0xOM6ciF0Bgn2zKhwt3Pm2aVmUTh
RiSIFBSxY3E5UGpXZTD7ipAgzyRX/SB+wtcyYNeVXEFfIvBixERVQVfVhgLg
66zW9Smq0RTYb++OTwK+YXUuKFth+IyIW2Vc3x7nCtqbZ2MELXBMm/poW1ak
BXCRSKWCNhOLFk7iuKqJZnJU7OTWUbFzXyc11KIsaZ7VdhavD6a+wyTlnckD
Yhr3AwpAknbX/1LKYmF1hkp6O7Qqy4SGwwJH7hiorLbjOKxAtPeT6NK1ji2X
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

-->

</rfc>

