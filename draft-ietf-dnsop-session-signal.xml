<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (<xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only response-requiring
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and forcibly abort the connection immediately.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (<xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a request message is unsuccessful for some reason, the responder
returns an error code to the initiator (for acknowledged request messages)
or aborts the connection (for unacknowledged request messages).</t>

<t>In the case of a server returning an error code to a client, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t><vspace blankLines='999' /></t>

<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load (<xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as
a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive request message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive request message MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST be
sent as an unacknowledged request, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive request message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as a request message Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the initator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
VCvBZ3z48ItG3D99OsLfJ/6D+Nf+4z0/Z51HoqY9OAkK7fA6cSUz9O6zLGrN
GX7PUBmSU35CpMoA3xtFqvIkMbqWWMXJpcwickYRLfDtQLMtzUlx1hcSQ8Xj
gJMSMyaVPWDroMqMeSPfMBe2IUcQsFXrofQKbu3EPUOX6JcMi/oEugCHh1aH
JSp/W9oBOgyJOKvjWKNOdVfx6WhzQEiOws3qtMDRYKvdC6R4DDh5TY4Dqbzv
BiejqqxgKTzMROmDcTjuqso4mqy3yElwRcLxa5GNxnMT7LB6kkSObRaTyF88
WshxjHo7HTclaLdwaWukpeClabnrEo3yLVbZ+xzDNzjAtBSO54zbzKA1yFZP
myZbb3xMKkITaJiB3NsGhOL6YC+Jhb1IGIdAAopeiJAFHa9vjnaEBEHIg0F7
DKZQViwJRRj53vwmE3JqmYfoJNDVBfnw8Lhxwy6ey8yefPvkEWwVxq+y63J1
HeJnpCPAxd552A8HCEOUjByTLUSZhXlFVsoq431e14gbIGvpK7R0vgoDkvhz
5YYhPuh2KQWo89KMqoRuaMe4Pg3SxwXdc4UKt/Ausy2DxhcJdqVe/3QuVwrv
G9goeC5M+0DL6BiqgenhDdcr5O8VHYoTZxyoggjuuoY7+AbEMawdQ6NX4gwx
+2cXyIG6NbAI0hsiqpCZ2O9fn1zSnoBQy24wFkS7BvSHAdYmv2JThLw+9TZr
E52gD3HjHMbbYSKzbKNkRTdObED4GV7Rg0D2MpsDMdx0crO0IkRJwYgLxhmg
455NK3hDDeYASvevVH585VQPW4EAgjG8B2Mku1wJHfllsyEK//BRZFR66IKj
zlBvq6zHWU4rgRcBoTcIVCD4hW4+S7KSI63qwQ4MOU3WO1DVyPwSd1uJnC3v
MmnYpyvYIV4TvLcGLo0x9oQmKHhRxkb4wEFk5MKLP3wART7NVzVGKtrBBeXw
rLv5KKT8grTCAbBL0PID2KGOsVVsMAthG1YzhKH68AHN/tlutgKFQhUuNMF5
OhmhPETCeYxJcIYn/tdmcqQSgfjZkJZof/1Lm/7kfAX+FUBfQcC+1f15Lvvz
4Z7uLXx9L5rMaXSRP9yLLjY8Hll7pFNOMyF5YuqE/vN+WIlYuay4zquyWNPG
cOgrNVtMVosNjHgIlJoF4bAcU1Y6La+99LUhT0FHJYcfPtjY5yewXC8U0HWn
+NhoPxjYkZKyzRtCSxjPc4i+bVZ4UxGqzD88/vaJyGrCXBrjh3VmsJgWTL+q
mgeXPtCk09Cftz8kRLijqY50N5gCZ2TQIXdEFkjgAcsma8bN1EsM4+MUA3DQ
TwPFEscWk9SqMtN8bIKcLhhoFIcBAVdkwBIK8t+iHfAeo9dIsemaAHK9VCwq
L/sDENiXREQj1iTQCSO5CEp4TYrBdEcspULjhLRTjiCQ9tNlgYpUBkIeCXmK
ls8MjN2uqjERJ6DfRfG+GDXakK2EGwiz/6m8Qc3Vn0az28DWrFisehANwcSQ
CnA1djEebqMzkPnWPOEaIzsqrke6yeyo6NsYZtRmVzzUh3x98Wbo5BQOEK+3
7UVycJT5Svwbyj48tnq9RRgiqm/hWo/iiOI0W5U3cCvzdU7gqM9bjoRJZc6u
bzmy0u5yCgJ2s2k75ltGYfM+Z56skoCCn7FWDnzRdNndAj9mztXnSMgImld7
Zz9pYM57sihMdRMPF5xjOCC6LZDjra7ZrYaWrRCgvuOw5eYgeCd6SVS98ZkT
pH0Hl6NOaeJXlEbuEqLlaRb/PhOwYVgQPQYSDZRjJwzOO2lRf9igJVIVonqh
g90D5yIHlG5/K5beBRMIcJ6pwO2N57C/npzL9GoTf9X5B7yFyu+gCcruW78C
62I25uIHYu13nTYzskJfnV5cnPx4mpw9Z35EOCEnoODXb07Pz9+cJwRCE1QQ
G9OsyEWLwRCZYIVA60FOurDIo1qRxvAbuA5nr97GWPkHD45EU1b0kfOvEc7Q
vWVR2EC/ISnkT88Fp6uNF/Ok8aacdBhPlYFBVpiJen28ve8cuBBSl6APwsg8
52fzllOTfBgnushOsXRgAKx23ubvMgh/01rb4vwGhGiFWA035XY1N0Dl1Kwp
3Cs5J9kFXnxtnmwwfpe2qR9e6Iw1ETFahaXLLjBIBuyhRpMbgKsV28zfihiX
432scpWsc5xZ8MDm+CEG7woin9RVbbcl0K2n+XDzdogdVh9SbGr6ILJszDDV
o4xmF5XJIzP3K2HLhbfctW/GiA/B7CmoTni2aGutszZJ0J1w9k5gckRyJl4P
UgZ+3fmk1qXUOfCAzHNs92o8KoYIdQZisVXE5EjhacsLW6feYqZOMEUCKmGv
E8Y51yzi9hw1q/tp42TIkZ2I0nqgqou290HlbovTyAIi8EPfq2F+fUrAyI52
11m8IS94v8Jgr6rG+dFnhJcCNGmM3qg7Ck2QAWXTILzJYS8D9Wqu00wErmIC
6N74LIe7z5ZHt26oWm8CodizNmqsD/mDAlBAHoxVajvS6yGjdsSqVO1xaKud
Q3vHvg52AtTJHHX9z8KovS41tM9YYF4oa0ea7MT2bdPOk9JldsP1o5biESsN
OVMRDXo3hZS9N7zR12ClKVbf67YtbniKKmdnPfPSLskzBo7dkfuDMNIzSl7B
F746+RuodMAjiJMyFp2I0ySpRctznViZAiswaQOoTyYcdiYwcHZb3LuHZTZU
mbtYchjiw72a//UJ9EFLBkb93HvQBHIznkEws/Oa8ifh5lFQW7LT+PJoBgsn
EMsmOlJUAt6dRizAjpF0pWK7njLACf2J24pCfIRfD35Ot07nmcolk9cguLkk
4cwjg6AOtIk/IWNCruPXioU1WfXEF1QOTNHm4QgB554WVryTWxuuI6nakhA3
omfwi3+QjYD8G6E/zM71O0q18O43NSQ4bksBLELQbQRDmBxG/vOc5DQQSo3O
+IrUV1bFLl9eHE2MJd2IuqP57DPOa9PI9tcM2kV7BHOH8qutevtE0y7QWV3v
aCk1HNXVsvGJI2h6xBsDM3XGjOjuASMOTRaQZGy4eH0mLdqQQRgFNsWnMdDM
jsjGkbwFw7x1lJD0AN/lMzykoJcheb6TnDSnCPdH5MfCrzrYrH1wrACjCm+i
NZuYOg5Ks5akv+BYECxXHXQiriyhS2L3Kkf3bJpO8NHWIU4vP12WdYO1Hoj6
cDMimSxUvmUPCyfXIJvI5pFE09RVTn63MKaTrt6E3xdhy22EQnGUrfn5uTmK
l9n0aJy63gtJ4aG7QbHxsAWVW1K+Jb4B08g0XSo8IjtOAQfrHuSgCebezRAg
7VOarD2MbEx1ew4wCELXXzRlIyoaKOhdKMCltKIeYatV1lYfnTBnIltO64Qd
gd1HKZVTrg272SaB0Gnr5hmSmaoqS3T/IVPV3Qf+SI4DUsBE/RbIK6Wro3/I
i7biK5wS+Y+RxXMGoIlpGIfTvhfwlGqBrIUTNy5VTkOlggji5lsRgBP0DyWS
sNGkGPmDrMtthaVRyLVXMraehpe3n71F0A8CqSbuB6Ekjh3URIxYrwSzBUYM
3o8s6Cn5gDepIkhmGNJyvaRMqvrgrJJ9swpi+j8w3n9egvE7vqzyTQi3aPiI
fApUowN9+3hqBZVBKOfpTiMiG1MwRupc1A6+y1Y5K3+IRsN3AAfNN4Rc6g0+
wuUwlYwoc5eB+ZjS9wYvl3jxHz94hF58GBBd+w8mjyKG2Kxq/EvPqBPcRG/D
ZUOOL1MEWXanCVoKpLC/ungJOEFjjHGMKLvrp/Saa51ozLedGqCu0JHeOM0G
ao8a7wZswNfAeDoP8Z5YNyqogKTyKSG5u5mDgV+qkqIWIFII3k4Esix5eQ3m
bOSi5bTMQvV3ts1Ntpfhu7U1LQfcBLXXMj3X6zqKaZn9TmK7QvcbOIkNKXT9
7978G/BK543D8cXAnd/ZQpesnwgWIgY6U9Y+E937Z2XQCTOBVz6b+ZlYyCLN
JQEEoSYbtCno4zGm5lcmBfowm1xNlJnBhXu/I5UDeAXmuqFo9OFCIb/3WXXE
nEX8jc2SlYIwqN9I2G8EhDgZsYVZLdR09lEt1nJZyyeoDxvPU7wfrB1tG/qP
GJpR+8RZj6ABRV5g3eIiRHw0qGwZcXzh6u3ptKN4sHdnb9tbxkV7HOXho0yS
M7mpclQB/fN8v0POrnzMBRtq9Bu5kMBNL63UV5KBWJjJ3fFaKR+Cz1wLDvYY
XITQATAyV6stSiqxtChoO/IuFHK5NoRR15iwX50vTZXVkdrZsqKYkq1TIpAH
J8+GGjPwBgxQc5zAZAe32GiRbDecpemXcrlsh/zI8t1ZuCADMigoLPZ/gLT6
LPjW7IE4KKYxZmXKEC7w2lzCoLO8mm3XquNMM6cmf5WREdSdA6qhKcfRuudE
CHFhNJh0SnoXYTSOxIkI1HqjWt4SbKUVhXnGuiyY9Au4jsHMia6caHA6R49X
4cynkM6jljR5MsgU/tLsEVrQGm1xn71ufndYH4kigzkd2TJdLUYEkN4xzGJn
UpNcEdlHcnyybYfBh3KUhNol8q6pVkhJG2fiVnbAoDElr4QNv+BqHR/uSWkb
DXEpm55mV7nUHGIFsa8iTbcMSwRpcB73rKXr0JmuTnH1Ycp3rdpJxgbfFqRJ
1RZC4cHWNAwJAzq2wEPrG7IhJYjApfvQzYfVUDBzW8EadJ8CxLj19UClmxif
bWvvJHeqvSO6srP1d5BUWBKaaEIaHUpuBK6wrcJrsdEs0DrBWePIIw3ivHhz
/gokqtfUOdqDrlVFTGgY6+z08kXiMSvq3qpDvQ2YXfK5fx70/Q3DHMtHD+Hv
I/j7GP5+A3+fwN9v4e938Pf7oed0mH8bj8e/6q8O9HF4HSFqumexH3/7Gf35
nGclF6Yzy/9ozYD+73l49nfaI6H/5FDJDGnw6Hfao94ZyUX8F5qRcIR/oRkJ
a/oXmtHd//gZfb3nIeSjzxEQu+fP13cZ6C5/vv7t9ij4OlDu/cRS9gVz+Zwh
Pa9UN/xwj6XwJ85sK9rZYn1ZboabsXhWAjCyaSLDfdlgLgyWYqQDfoYWLgk9
ioqPgrs2RAkVZcC+a/Uo+BgE+4g5Q8ek1pUa5TZh5RcC4NCUNUrNQHvPzJaN
OZ9VIYhrj3jgcEGY3DKVLJlcMAS6GTg9SYRnYBNhnTXPPsL04BoXVs2zg6ID
H6TzBpXXnnxT1QLZrttlXMQOs1BmGSYJTdo1N3sHmYmq7dJbNOBhBRi08TS5
Wwr1LRnUBrWWWoXnlgTIGKtG0UwBX3UjsC0UGibGmeHJWSNFSadZAAlxzWiP
jvakq3M8e+6IBOw92BiMmrc72ji3adZazAhUNi5kmnYmxo7Va66yNd2ZfP8w
D3wVTi2ej1R/sFPqhd216pOhmzyk/4uFL2gG8VkQ0mYNZg2lsfoXGt9F3rCT
YFOVV1W6phITWVWVXJkhLr/RAv4k+RoGReNytdNM3T6WY7giKEjTvEmsBAN1
/Pz/PD4Cw1GxOfKQIKHpGQtVVIR0+11hCq0c1P1zQP8BTuHB8BQYB9k7g/hV
g1PgF+zh5poIi37bjTcYBJG0cL0/FF/QXpbPUSWlEqSiyZdOkVxlmUqbxZ4x
ukZQa9ScvdnOF1xJFiD3V4bwKPSutUDo9Z9DipfxiUe27bJEudwybSX1vG3g
0kD/gaQg+Z1B1BVbqSRkXT8cHIUPCV5ufKvsFLLJyOx/krF7BDqDzmKDM/gd
8dl8xVPJr4AnZQSbxR3bsHn9JfYi6TG915jvaIycE5w5AZEGbWTekfZck3iu
mAOwaYRUAsfzU2uHzimruQFOSeX/u5P98KHCrwloG+hPS+yZ4nkSm2fRE3BE
evLnhjbyfZdG/FrkiuSby7Wf8O5xEu5T5z4mz8p5Bqr0qyJbl0U+g38+z4Lw
/eg+jvHPU/5/9Mf8E/8LxjiGX6nX/WMIppmim8E9DxuOP3kAD6pj4aO6lfiq
4dcP4cOL0/O/vDg5e4n/lDg8JydxlgcVGNRtlpLkqXZuMLnz/FMc9BFO86/P
37w6OXuN/8Qw4Sm9EtZB/4npUg26e7zzmwqxUv2HsY+3HtFoj2nRhHb9SLfI
YCdhIHzkG/jm/PTFu4vT59G+zDPQ3bQZwaZc5aGGJv3uex765N3lT/gvGPdE
HFHECHqn8+ABTyOaElayoN4cncm5d6F+AmcmEWHVtnYwF+8q1+uyUKaC/lbX
iQzQKKYUL14vCRSwwo1TIFVZLr6mxUkEnJ2hIbSgTqy4wLiHPHtUM/6s1t/5
kz0MB0uVhXQnDzsbeaQQWYrCy7uIl/GFjzVC54s7itGgwW1zJUN9CltlMG3s
tG0g2puXH+7N6xIzL6Xm5V0dp0TnGHhGRsfVSuaxTy+vo6JvKmTwrSPXLn0S
amn3pb4kUb7GpO381bS4UAaqlbJQ9bCrkUsDft/PUHWdgP1o1+3+lXVs9pab
+fwqNiRRbili8+tq2Jz0hkVjPc22gyBCu1xG9WiGarv8/6BQzcQn2XHSW8iu
a5Vk4XdlnZo2nZJtFvB/GpJk34YKMii0JWfW58fwjYebXaWhdU3f5nULn3xO
ORoXytG085RMeZqoXIz7gto0d5lSb1ka56vReMBNT1ka3+Tg1sI0SCMaZ+NM
AwS8cVWYzyta078gsY4EgMb7mFbVrrcSjXRTGLJtergwGsVRKYgcBTMIEIR6
8LL6kdF081pz5WJI9W9xOha/5Q/j9z6hnpvwv6T+z5nwnAaOaZN6aC5IHFAv
UszrWZeSnNgRLJ2MQdd1fXR+pUWuPKfv5/J14G00vBS8x0D2WHONfbkCOIYh
zqc6yy1iaOLe7X9AC9NyEwZP1QKuE/wDbrpHi+4Ew2jkpeARCFAeLxqLRZq5
kNpxy5TZuYWgRamEvrNgSiMWRniaFVgyBM0iwPSiXVvSxPi5Ew6e0opy2dHf
Kkg5svJptjlLG1R6CadJlSWm5baZmMSjjtMwbSWDMtKB9V0yAKWZE/m57I2U
ms9E8UcDosuCmSyL6/cO3tVdn2jJwtjHgS6WSFdp379W2TEt/LT/TMWa9cWZ
qZK08ejvmYNtyORuoZwRQ7jQ+YhpJa3icWRvBjj4oGqkbiO1Kdu7aQPyo9um
b7ew5XDPfakNlq0y3ajSG26sb83CpxsnabIRbb1jGrD/AzYYbEBiRVN0n+3J
uo1/2HcTkR/g/dhqjfMDvLOsxQVHiFTe1VvGRQYW8V4q6tR1NiXKGw9tKBrT
SwSTeMLNdhEhk9oo5feHWhdk7XW6w54Pg+MgOE8ldmWIhmQ0ywaufcNwqDj3
nO26Dvuk1x3dzsSpq0XB6G4vJXTjXWfj0xXw6/mONr7uuYa696wF3yAY1HLK
kSjGgbG3QkkCNDUxK4NDQobZTfdwg+kePPFQoJkCHEmMhULZ0EiJY8q/a3EK
wyFIrRenb9gsK+B81qvHMlvXu8g6ED3XedWQc5xM8v3RsRGT53Rns+TxxDV5
plx0R5Dp4mNYqbbKrLRilSzahhZel0+hSNaow3LUrf9EzKgKIl3byloMx7UD
dQ4laADKQB03TakliVCOZtunAXRPx8Wnk3zm6bj26dg9WOXFL7eejYvPJlr6
8JnI7tHTfv2lr2xlAN63BzrVa3SPmN4FuWGwYYp3yXBzPM6JVEtbtQy15rGr
SdCNqQtKSxk/IOuzT38/GCW+fWJK9W64sXmojHs5oAwZDUgnputnUScqrQQw
3OfMNhmarbHlhubESmU0sZZ2ZmVNrJt5l8pn6mdxuPSsV7gMNX/qKJsuXkHO
fdFq0iVAxo2i3jTkGZm37SjeIStP8TDKyqZEhVaXrR9jAe+NBJWpHYqEiBtt
0DQUU08b8YV+NkrmvwogMAnUP/znd4RNkVf45PIkeXn6+sfLn/4FZnTHP7cB
uXCLx89P32JO8utLXmPvn39JIJcSyVP3NDlJHjwZo2N8W2CZenZtZ1dSvEtT
Ew6n+RVWZ8jT4ogbOkn/pSuu7INXkiJDCgGWRF8Nq2ykDc/ZyWv2QF3iwxQo
PM+uchCoaAW0yOW3nV6NiekYs6ZWU9rotXuOKHK6n+JccM5jCn357Ab2hfoG
L/NyTS5XynSVHEhJX+0Zc8SODsxzoJK92EovCp1EQHPK/NVHWLgHgDtiOjxM
nS2t8GC5WNSZCb9rbyitjU7ViffsSIjHYykVqlw5l4YP9BPTG6p/P4OWcS4y
ibzLnxFL6A8exEFug0kj4eSjBZM7RjrawY5RF6flzoLZaoLfredG/QtxeNJ9
XtaOZ1/dfOJ/cyYtwNRptn00ow2Y+N0WDYa3+7kVq9EPwoRbfmE7Yx9ICI1V
E+0kuGslKqbBDdOpIyMxD2eBMjyf21zfkVoDv9Fsi4l70ym177ObKrMJo/0F
8F2PB6DjZDpZUZlFgc90C/zHvnONVzvkjtwTIJWunzbkq1lhcT8Ap1hBG3SR
2G82V3Uujr/0q6aZdnDkDrcac3M3ojRp0EliGTEKhM5T90H6WQRl62zRJh7r
4BJfabibxk0QKZ2+2pxxFMh4HFbpuD/LSugxAKlk+iaEYBJmfPWqCIzlOmCs
fJNLtqxgELhefc/lQEjx53i5Ah98ZxxucjvPFhHPsJso1CU1ca2zLuI6TgCW
igs1F+ywXTYvKrJINaqxbe2ROP+6/kauc9NyJvWV73O+fN+eEntMpn4w793r
hwcOLXjyW27arTtGbZ33bdldMH6f7xk9G2gQNoA+bDl2rVvXbIhlU9HOtATR
qLP/rvXEIE5vZNaOStGcawEZN4qTDkW+uSk8v4T/s2IrOe85fOQAYJNm7Uw4
65HKO/yob8fizXC9m9G/A/3LdndedtJdtvvSZXvQj/QkoJdfXpz9iDtSSAtD
TaiJozQcWIiy+lz3HvoW3r6DtIBxB/MUyf0QNRWPerOqYVD67mTxC8gpxz6v
ua+jHlx3lnAN/ql2WsloGvqs+IA8xxi1GIyRpW2XMuE2ZDoK2nijKQNUPeu7
R8efPrEjhyv4wHpoiZLR4QQVEAoZeq02oERKPGSlBm0vtGfZgScPgEqiUnMG
YOIPW4pKR3UWLMyqhwEjFcnZov5s/jMRBl1c+zphFr+APHA+D56uVUrlKuSX
bj/18PXR7gGow10JJAgNmm2jNW5RWUOoYEZ7oK+WhlyThIkfV8idB8gSq5P7
98ldff9+i4ZdZxa5Vi0VZ1Xb0WXmla44DgXkRLh6wQ76J+rQN91HUkCDLtFE
tFRJ4zq+FKMWKtGqe4a8xcJh2aN3Tov4Ldkc5PCwBKRxvPv3dRqwD5JlIstz
/i5W9sBrJZf798WxDL9Eo8yX+9E+PU5VtZtlySW68sx3IggVNxcGQ4L1huMa
XhdvXOyrl9p8hsZImeayNn/eYrqPt4UfA9U7axnTCFwTLIkrgjGjLk2IiUAB
vATLUJ3dC/JId4o5gjZAlQK57v8yJ7h7KFfkNzbuGdPiLdgzBgOZQKbFDrY4
FJIVsERcVeUwtsPKaQ17zoBHumXDTFgiwlH3GtHPj7iWsH91ZNzQObT4dctk
6Unw/wmFG0Y7SOkLqAnRK1n/0RQQ+o8uVFMsw6Z0mjRgBa3mBvkROW+NUl5Q
2TyllLA+JUoA/8OKMwfjaWBfzXsAWckgeTXd6SdUHUGtzR6Dtwf3ZfrR9YVp
B1CqRCFRre9b19QtTu6RW1pDCVWTW1/ni/l/8et4woOA1PiMekcPAqzzGokg
kUtuk86Y/YhPMQxTSxW6+u8IGqFqOGgx+1o4bVQF3bj794F33qfWbazt+35T
PU1nymBCRXWTWh6Js+dUIJmrzrBG0pms+A8sfMSxi6TxNpNpfNuuhXukrXQI
KPTgW3GvEqJAxlnkUqIwMrqj5NZ2vdKTuq2GSAYwcdr2tef65lSr0F4LTQdU
6IBkwqoTYduQR9RcB3coCUA96TRKoFW2yq5TDB/35mHiMowvCdjFibAkZBrk
EByxhI1aLphZe9co+VY1YSraOk9IvHXmGxR3ytFZSMfHh4VoJGe3Ww8sdR03
m/HPmCmq38ic2T9h69j452kOJAvHSCcZxz/gYowRbaVuSmrKY4pxVUvatZrJ
narPPWW7NZdpX8Iet+6sTSNTaevHWR0CxyHvR3sEKlS1U0CApVjbZ/hWZ4H4
oD7bW0C2IA2mvt/aKRatx4GwLUyRMzJoEPfIeUOjWLg6rcjvuR1FQjwq3LMb
Ov59OCLuzT2lYn+txdCPb8HfHXH2aWNAd2k4b5yjuHziWYZS7EZokXub2l8j
+FY61tlLQpQQnuLCz5i20nqO8RkU/MGSqSIuZALFXDpsMRETgoqrirEpQW7q
QNvmRkWT5bKscg5hge36gEb2APMS/cNOlWq6LsgA57QWWwR2z8RRQoY8Lsqv
wlKmpgFlRE6sxThPn4maNp0lJZ+xJDSFXc9BxZnoe9ImR53a7D6NEnGImzJq
Et+ZUVdH6uk2kG6bEj0MbBzNVmXdOYVJchLGDmEcVFn7JK7raP+eDakNmaPv
jUIxfFp4NK3jVTHg4uKMWEYdIR+cC0kkz1W22UFjfk+YdXxsklz6c3H7m0DQ
b6LSZHPgb5zni5jnTk+fsu98Rwl3o9R6rNrBQGMZPpgSsEAZ76/zdIz2ckNi
I3SS7W41rZ+Nf9oVRPvupEa5M2A0c2uSuHdJyPTspVNfDN+SdkSyPRm+Grvw
my7kpk0ytIp3W8pL4/u+Wfu2dz5M+CMDipHe3M/k4MfsBbRZfTVkhQyqj8on
ftOLexomMVgcx2BXTGDtlBp5qD+Ze/gdPedLhnqPLVxwGOUojHeTF3PgxFu2
7XsGwoeWdNupQ5xmZ9D4wlnCVVf0f0jKip3Idvxd67fdmp46GtJ8tlocUaM8
Kvysqrt0XRXuf/Y2YSTfxD2jJ4Q+6ESxJ2PG218P/Y66jV5RfzlyPZGyVlDT
BjD8pT52AExoDsZsJyy/e5adnMKeI43JwqTKK+iamQsoRIKVxsN3nXCKpsIA
UTVL2CFYG3d50/yJRbXNG1RWuXwpu++GN72/dddImrXR0eI9w3jHsz9JP+YF
BR+5LPKDBw8ffvqUHAYH18Pj42QNs8y5yn7N2ZnaB0O4cd6wjae7g4MztNkQ
KmXmwBh/F+8M23CvUzhNYGcnqytMJV6uE89ECwKySMccZJ7IIcJXX9Vx7QTR
PIvsPRhHWL4XE+THCH6Zs/upzqiOy8hYGwLYjk0NAqd682LfUH2wQsGi35RM
BVTQ/dbtn7juPlC2fM1ZinR1TAeANZyNM3SQSN1XuiMYIxiHXKMV1qi3s66p
CcbVFvE11Iybm4dxs9TguvNXZrqzJCdtwVhOBLtJKwhH6Uo0z9arfcMubYTU
XfkhFguXXkhyjXvu7xHdfG16AVJyDjRJNAUvhPHsVi8y8ki7QxJsdxsergRN
7fmJLaMpXavQk6tlRMl0CB7uHdA7Dt2+OcBv3moxfOlAQqqF72Gt5RbEJ/3U
uftY14mKqd5yTSZcZlhiMNQ7e0TQKu8n5XmTi41s30Af3ROf2DfbbWwlMvwT
3vqOmjjIJ7i5J2/PmCuvsqaO3s6BhpUKNOzb0eLK3cyLuF42Vsr1VTVUnfWt
a6I6Yr5jJ1x34bBaQTbo+RYETL6cFed/9IoM1Hm5F0TYldXO15ah1JI/SG+W
2zQNy3hHMde1vkwROiQoTMHvprySRHIDHrIM0zs3Pk9O7lMOKBQ5tDfMYXLf
ZO0K5D761MSteJugccYzwLgnUraNL6mXE2MaEMrhbcEgt1AeinuRplIdGR8W
wjhkYPiRBjtucmAKu3FozRQTcm3qC2lqvfDBTcoNsVk3PVffw/jMp2GEiifP
uMQc/8eHezPzn58kRqMFOJgyun2pfJOknibZo1CThHU4CbwRsfc5t5SpS2kR
cjotEKtHHJXVcMr0wG0YGEALCPyqMtB3K4JX354c8mOofLTJ0l9IKxtw7BGm
Qc9I9GPvE6KbQ8CM4B4YtVx4RjkwebWh/HnkJow6DHPjQBUp4p3tnaQkhFyn
q3zutCsPknHObUP9CnwnQSrZjY3oqKMzt0iNSpE7buEYKtOZXlz0nsivQ590
8tjsZNWDGc1ZzFb2YmEgo9OSFNlsVM4HyM0swjwZ9YZCtAIvbM4l9JTjcH4j
zgsjUu2R+TGciDSq3koGP8VxOR0UWYEa5tqzEk648tXzTdI54R6IUShXMuX+
SltJnS85GNArxuTBLosOHjczSkJtcg61m82/jMaXEHrNHMgPnFh2YnxLjuPy
nXoBw4m8FmnUxKhXEfzDZTV9xo6/CHNMEeUzWqZzS22Rz1RiZVpAi+B4IWLq
zk2dOK99dFeVGPS8qSBmtwYDP5KH2fk1TULjgfxKb9UTHtO1nPr+27Dc4G/z
R/aVZHbjzK/z7MbiP/VU8bRq3+3NK6UxYNq++0vXYb0TLZ73OYvzPxtenK+o
GsaEh+PYBWY4L9BbwFrKNlS7uxf5hF7mi2y2m624TcIlin0s2bvSjz9515D+
QgQweYbiDtRSnr/rVI16z5A8CS5DZWuEXklr7k5H3QrDFU5r1jgpLVijWpmj
/sTedok8qkF4m5Z/m3yTcWU0SbXDQUz7d7RPCTzW13JHqoBYhx0a1qaI0qUJ
JmCwBm0wZNtKchLLp3QU/NeurXcSm/ZdhMQ1GYFSwloYB7Il6uARKa8whl+0
Tu5Sm4l+uCecV9uLopZ0U2q3US02Ro6q0E1DOIkZ8aljim23Kw2ADN8CnFUP
GHiSuB9QnTfvsKh1j6rCCLhPvIgRKj3txSc2gyRaxigZmqPkkqzT9/l6u2bx
700cl1r6jCoM0KJaLngKpGi3VYIDB96t4o1kkDjSg90gYABlQ6FbDFHTjBJr
uuvp7mtnPR536PQR3/1EV6Zk1WpIFRWADsn4+E7X9mHTJGS6TT8JmV5yHCvo
HoaKf6wjJ1lLDimAHPBYqkb7Uw+tHS2aqyWeAPmpuf5D6+CdvsxAtkWogllV
NfvfQU2B0Z/S6qa8JOgEAwSC9IaF+Oo6gfGTGUGL646fiG6CWD5OeMcoZL2t
vCJrEmGAR3ADnXRNxfhQcsvbfJlSWZ3vOIM9kchsBc3rBr1QlEXLQoXKRBCE
sYtWEf1yJ2XDiYo1TstnWEbtBGGbDGTRx2yAqkAIKziudaNVvmbvRbnGXcV+
skXiYDdmQvVaSYlD8B5i45skw9offJME79KL9hMjpjClTlF4lC5C/3UhOfWB
yd7SXslXz96+ixpI+nurkLezQqwZswu1Q0AJzUh7RRPGldvo8BqvfOAlKRm1
sNF4FpfyQ1MBzs3gxdptT5W5jLz0gn+yJ4DTjmJcJULIYfP8RlV10OyjI/SK
LVev9X6JdifnUGqMBvYtogPR02tG1AymnzurA4Jq8wo4lyNNQBh4zxRSbG9h
0Q+ySKgzbnmFOZCjPolVeQMUFJ7UI/fJl9qZmMBkqXKYkBhxD7n4Lc2FcKlA
Ph7krO23qKKjHImLsqK4UQA1BGNxqHP3JhFJKuXl6pwjdKrxf4X+mygJ8nLO
6IgF3Mvltpjj2NYXi84cZJ0e8mQhEp39yv1WwSLaJZvpPc7Oq7W9YuBHtE2v
7AVT+hlpmP1OM4ovjseIDc+mvYR9E6JTN9w+8huZ0z8UJ86/RC+Do7vSmeu5
ZtHPmLGNfNPFhONR2uXhsgOQswoDhigokCP8pN0to5Y0rKIM+slCcmt7OxMS
fCWt1EXhRbgb1kuDi15RHTJrDHstiVlV4hW+KUMPQ2aOX6T0un+3LZC7LTFh
tb74DSMcObcaM3787cUXBVdkjCwhVEUn4n8g08wORi5fsKtACqO2epR4uKV6
hanqkSADUGk7CwsWOwLMCB2edkZqC0v+S0CfdlhoHlhZgMRO0xX1uqUaeRU2
wCsXCwydmIZ9JWrMGEXLGprjdtPWM2p/CP5hVYCYgGThFvZST5KTGLo8BQaZ
Fk2LbjfpDFeBBFxiygIcIyoDvaTgOCUDw3/ajFE0aFTkgjXRj8ZiPyCNxm3T
UedyuiqqLacWdVy22iI9xNIIxpXAdhrx7UnTw/bi61mKLY/X2bqsqIgZtUCu
o2Uj6q1n1dR5lgjcrBm4ynrTeOxTdFaoS0tiSib2EVwEI8RdBDjSmRtMOjs1
2QXQsw/ssCWVHQ17ynxCXOQzmAvu3JCS5ms+1QJPDoVdyTdgPdQd8gYdFyPY
Wjd0Ju9qoaT9OwhSSHsTswXknMVOiCC1QhmxTiARqswn2YVm87aGsjoHib2Y
bDt24KWEIw31SiXfqFXXsrs/Pne63W5ewW1RB3TC447sYpL5tlIPCrqZlFHY
VwywWG1awd6boOqbKqtHCUi7DRWhkzAXM3OuT0x4XM/zlAkW/e+3XZADcM9A
VK8qEMHUdOBLV3mTz7IhMorW+ui4b61USmuBa5Avucjj7aNiGX7UKElYRgM4
2b7kV29fjOv0PW7NziIYqyAsGvs25dEekHOcX3AW+mlhFfxRXFVApuonF98q
iTKiSvaflC7Wj6gfcd9bgpMNPOH4isiL+jz3HHbhvjm32LscV9TqJHseHLSp
gpeHjavkLsbVHk/P0PUPUsooXM5a5/Ot1nfo9DJnV5coOhlptOEWS/Z8TlCI
0K+muxkEsGZ9XucQeZ36cL3GWSgy4C/sA1BNpKvfON+kbegetdwJ3n/gKNaw
qARoGYHDweaYU/CcLJFx5BqfuJ/Yu9AeUN6jO0eAbvqk3w3B4WfxVIgkn26r
eVZEHiGuT4wb0HfQXCJcbjH65+b5jH5wyKgI+mIcQr2dc+Iy893yIUxuvb9s
AbSPKO1CWFYjwPtwZN1j8cV2A5f+qh5QQSt0Wkk1R8PqHUUxvNSm98xXlu/z
tU5bOsL56Z/fnZ2fPnf2/sQ/5KuzV3fIa6fzwq4xbUR5d25m9Losi6wyej7h
KilW15Ti8ewFcsd6leotw8q7zJDpQzynPU9KvECuaI/Hk+FKtYuh/S2oC7WW
6XG/x9zJdbiT98h6NqS5LFMGmhdad1uRqS7V4i66ZwOO/pGt2G2qDfjAMFDg
FZnSJBmAz61Q/Bv3l9xjexnlBHwOne7b8Mbq1nd31snOJv07OxTRCFvqbjdL
CFHQnn/v78NZhj2isZreXRFTPEIn9LjsSX/h9kFDjOozmYc7FOfCXXiWcCpO
D+vlh56HBeessPUtlwIpVOuiQaiCOHeawxaQPccujRQjqFh8sm7wzvhjarEk
8vulqxWD4rBKb4kqU8e3qm7necsbVEY5JRpUd5pUYV12MppM0SDSOlyNfugv
wtBeHL9/IX+Sw4f/76OH4weRQ3PEsdD3+Zpf8vj7ybfJPN3VeCBDG0jks5d7
G7+YD0lPuMoCO7sIOgCWQdH4ckOrfJ1zaLPLTUWVvUl3IyfmA0f9jQrNwKLr
XK2rnnE6sJQ4Wso3grsW3LTjwUqWEbOwd4qgnqyM+22Rw1RblVbtDY8e15sq
TB2DhaKtmSCXCDGLqmknq08of2jYVlKuy41NjElKjBpnK7t/CS10lOP8pq4p
Qr+N120XZCJA6AwLx3CmUu/DPc/y9rjNesQlQ4DWaaEdPm2oaOFMeNAGdlva
HkZI8zmsYVq+z7yHuqHo4BU8AIRYs1XJUcL6SLui2usSZ7Ozh1IckfAZl+eT
sKG7W9gwaQGE13xgGZlhEqokoR2NgXZsWYvrNW2abL1BOT+2SbGLDijiXt+x
nKLXZvfl3oqeA/sSb4WiX0x9GELUe9eNgIzahm3XZdFQVuZModXE1Xqj9yMX
JUz221wdvMWXW6pqoA6F/6pWDjf6uvg86wCT0tBsOq226F4c+R0kohF/oxa9
jzYKyHUJm04psaqK9MDutoWPaUQODYwaFRI7RpJlFgA8hm1cF+rlmzKEXd1P
VpI2nuH+Og/SbfTX70H6jenvn+fz6bHYu5c4WOxDuzFksYsvH78pV5i6Gmmm
TlXTJLbPh3k1nPl2lkUGu5rqQPjTrSBS16AurjHpn3PAS+00Yix2RSerKqUx
JHWxD4GRfIQFgVSrrLgCm0FjSIemO7lHK7ZF6xEs4iqt5qRoKz512JbRqp1z
7oXV00SKAKMy6yBABAKFYFtbCirsfXyA6Nhpla6NGwV6zIYC7MQ+mJUgXymM
h+RtwS3clEQq2MLnPPRq5ycr76GJYAzfaZcqxYPKuWcUY7KSNLGSdEQxlHy9
YV+/0FsPFCgcsnchdfe71XOO1rjZTlfwVXuBZl3ccB3zwwlChDhsgh4VmK/t
jwdIlGti8KZopj99pAmaqV2obtEmbZYjOnu/TL5vvau0uZmxx6zHKER1dI3F
qQ0sD6cxTzdSwJo4fVZc51VZkDct8TEWwow66jd/jW87e3v9GHElBKuQEmHf
P/ju0ydJLlQ4osc8+h1lJd3/FmNV+Vz0chpVX6FPTFfl7JeRk+JZmuKSqmO9
3RB3eFuJXaYzrDyGCUmhmoHucS9m7YfQf44P8/z02ZtXr7Ao93MrfnzVGGlf
LXeTDBlMTOjhcXDhnmBCX7GlfoKkwPU8JtXGakEi+9ATshlMDwZWpJpaAF2q
WI+E/5CEZ/Zomm93qkZ3lWB/K4kVRdovFzwofW0P6iOOJd/AZKWI/A+4688k
nvYWcy1ZCPOhugPv0+Xiol4TBVY6FuZ6wHXygPkabRyLBvnC4w8TWCucwGPd
YaHTbx5995B82MHmJM7MDuK9og+/9WDKzPuNJcsvHPskaWWlLHcb1NIJazCs
aGAxreNjsKs5E5Zlq9MKkViaALOHQy6sX2qTGZT0hjD77BbR1D+P9uBE3WFV
Fktp8O9IN8NGqhl2kglLkWQ+zpRH44EIACupRPif68y7u/DyYc9jatHZVCUJ
9hQYFmXngZzecG6nWI9+eR5gR0EKYEyEUPUh8hj9gC/8R5auJIGjp7oP3mWR
Cqp6Ij8BiRSXsdGqSVJirKOgey/XZ7m49vm3hEcO0kWINDaU7iF2slXxTXGm
rkUhle9ZVR96i+t9S7K/upJ1+39OaaWTvZfgn+KY0sRPlZdF2Sck234o9gP7
KmBdN9ze8b7MO9UdRnSUtVQKHHJUdZrdfYnTSp0vF0yuIVvU/z7UiInQpSGn
bMVIIWrvvYWD7U3QTGziGRjHUc7ppyMXIGSUYF/OZqnHvFRZKFNFXZAkhODT
gaLaxnGuHFwcrBYUfRYNEqWItbD8VFhYa9hra1M6XHjZPOPa0h0TO4jdYFB7
/6zH8uAcaKl7JyKr1qK3yPZQDKGJXVath6RmOYcBJDt9BXyb74ekB/vQi2br
USEhKTlhjsvMykAVpX6rXHLUNbY1BgmwkztX0kN1haoPm62OVhbSstYZej7y
es2qzrzkUgi2NvddqBJF8hvZF+OEDXWZe7BCwoIFs+sYn40nPJN8UY/YRm3f
Zq1SrBx2jPOiphnoEeR9LbAw9spiGXpxTJp04oFJIlNyTd6+DNSHEEV+uq9S
U2E8tFFEzxd7QlAk3nr/K9INtJIU1UUOhzEIfZHg0DyuWYoVscu1NyLtdtV5
sxUi8j2qo+sbrm0v1ISqVlwGsrZFSnz6P9W6m8Oh7wx0nVrf1U22xuTcerll
0COhB7gOGTbrgY8md3mDSaDeFhpLW+3cobrD5ltRBKZbERd8YBg7q9J6edR+
TS6RrKuSySJcVh8bIr07K5DSHBWWmEvZN6yLIS/E/b5J7WGYqgh1qGCBsHzf
GcQADKeZMRLwUkfKKze+DuMlZrw40RnLjCIsKF7EAgvjYGQW93q7kaLk6OEM
lgfXH3PxD1E5xLjDupyL8iIqRWtw51GMv+QsehgZoofbty9aUicUWdK3pazS
Ahkr9zaxPn+A7cDIOqO+mXiTwG658uU4vHZgfZmuI+C5TJyNr2hkXrmm3DXs
VqAtQMkPFdyXnHyvulT/Je1Gj1xf9KgP/tPOd/x01N4MzhNOYZASa0tpljhT
8Yq7R3kVhWNMdaKNQa5D7UnJwQ5yVmVvVNCj5y6RzeFRxkgEvtQ7WZJEyWSz
mVpwE1/SUwaixKnydiHhfMlwRBMPSYdEq1BIVr3KCWpRdNR1+Y4CpFfLMIzU
EtlTiNEd1lnGwudIwtutoni+SbJPPW/Zf4791LRuzd/xFrzSuyGdqItqYzEv
vn5ozWVJy5Zzuou82Svh7bK15ZmWQ/9wj8+RIoCYnc7KRUVJsaaFddoiE1aZ
krhXMhEJfiOmVfgJbgOlxCiWO2fUsbTrsvJLdiqsDWND3fXnCFWzPebEhzXN
EOtX+j4nsa9O31fS/+JllRBK7XyFI98Wm7mgTCSJCthsRBKSeiy4tnYaHm0o
nynItOsyl7wPPyRbdRtUarjpWRy70OIVUuzV6QbLiuge3r3OKF+9QkoGwOa4
i9Pzv7w4OXs54vbg0ruhTe962EEJYY2K25boU/bV0uynxf7mWsiFKxvcbdb2
erfcCmAHasXY0MqhW1c6qqK6aZhH7nllp6RqJ6hJaS4FWrmeIyiJcDU8XztM
R/Di1SJObodzf8ZGJR02GFiPG2A9fROQRs/RzWEYX+OYr7Vn3IUftGEMWil4
r3eDPBr7FmhLcUe1fVJveJ9FpZe9N2f/tvX4ZrwCbwnvM8te30vemDzQUArC
aSYhXu6USq1qKRwBh9Fd5PXdIrEay7Bt0q0tWL8AZWrZMFWrP6fUd5biXLFY
Oe0YwYibqiKDNvK28JGjqrZva11UXaVbmqLVoYvFPNgrVG/T5A/bbp9eGyRQ
brs0ig/LrifJz0qDd7nqThdGq63jTJcIOUab4iOX4uaScLVOGWstmEo42i2F
NrqVw6JVgTCKtsu8D9K2thtRGRWGAoklvfJNq21p6LAfk+QC99JTQ0A+hmRL
p9WVyeXuH0BdAEvvc9UqylyS5J92WxWLjmINAZVDk26AgD5vyuZ1Exed72ZF
uJ76SIm3DFVTNGRoq97EHhquF+UGC0bVxsymThzSZiZ2/NiCUVirIEobw3BB
Wtc+Ond++uLdxenz5PCbI5awLDcw0vX69emzy+T56UtQd1Dl8d3O2i39Ap35
KiuGrzjFFpHWGED7cQ3lszhailajWawMUfsIqimQToRAzjipqthqfN4Nc7eM
7V6iSIc2VCqgFtv1NCNdLc6gxCszw0DB5Goy8k458kSwU05t06Okxa0VFH2T
+lKweYHJlCgvNFCwWJWczwr64HYFjDhjVxtSf03YajkA0jUCJiCcJ4t6F1zA
BCRTUXRJtZLT+d+3dcOFkuXk2UmIZhxMu1yTKlln23kZ/pv8oLxXeG0I0uY3
opixE1stALJZ2as03ZHPFluOLdUUpNotvuOqnDaCo5W37bDqFh8IWEvNWDY2
1lHJ/qYSaoUn0BAjO1KJ94x55Ln5aahj1XLYcRQzMq19VMjotIb13qIolvS7
fjPJuLUoxIZlD430PrIqnpw7vonNM35s5OLqOOpvSAuual9v84bKwunX2FOP
zbmU+/CilqElKElXCVsceiYTUqYHsUwCEPm7tmnQXtNzJkRKrfbDj7RSlNx3
eYF/oYLbTL35dq34G9ZNgsYQlNzDmE2S0QusYozBaY5dYhvS6A5pwVfcVakY
zevVQkECE5PKrrUbCk+1a9sTryKgzDTTUlSEM5lJm57Y/Ucg0ZGJZXEmPL+d
9NtKZ+ah/mYArWiK0VrcJEU1kMuSkz2IqfESJRgXAEcUIkHRaBm57KpTpYpi
1uus1mWEkmk/pNI6e1+d0HY4QWww9nlz7fbpXcZ56nxQbGQvHisM3caPnKQf
I74NylgAxq36Wc+l3zU2wAmVD29K3ysOCx2UjOJs4QqkTHfXCTPSakJBQOIT
1zFur12ObJLwBPvazfuSJ50FkN9AYBowVZfs+fOg538e9vzPo+SRH+eYnnmU
PE6+SZ4k3ybfJd9/zmc6zr+Nf+X/6EAfO6s6e33y7PLsL2eXf0suz16dvnl3
mRw+eojt8uqj7h58/B1m9KfT07cnL8/+cgpzuzw9/8vJy99pRq67F0/d06Fi
Yx7MLhCeyDAILbDILfXoofREw1A692rIrkjGhA4Kh9Mc8R2gKxZHIAgbqfFH
z2yLXMpQRIXPtdqIqhEEvW3E+mvLnjg/ZiAvd+IGVougw6lNhiotF/+qZuOX
2EicD+zlUXCM9Lj4TahOKgPEySDa4pgQf3f037eFzG3eiy7d6en34DT+xU7f
z8sffxodvo/BhEzvvvRBmwfakJU4sHzryxlG5vSSgY0GrVPR6rvRILefCj73
dEP3akJLg8JC3rXo1VGOTFgKV/jUn5G6bna5dw4hlGgSiMrKBYD/XfeB5nID
v9+Z3CA8lBhp1qrx1ptUUTsB8XtnS2hZ15GK+CHXwYQPjhwL8OEsjOEkjMt2
wEWJNm18yk/PXAn0Usu+8WGXK9D/Qn4TzqGLJBB9R+ortgoZUQ4iX1gnW1ag
r6MYWxUxrIAacqQVoldr/77OqFK88kIMnp4j5HLvgrU25bICUFVe+QcndbDs
M8Nzy2tVuqg+p9ebsZor2TTx8HnG13JwhtQQPlLX2uc50tbhvlWJr5pDIT80
RHBkhCsLeXXe5m5MGi/iS6i8fd4IfLknFSEcqpArEqLzM+uJGST+HS1ylQXL
YfYXIsVOQdKvjKMT3d+LOGS/6IuybR4LRMicohQ7w+RQruHFbaFxDuiyaZY+
FEWcFL0Og0nNUl8MjiNbBUPb59XwpehCNj0LHj5eDQRrO964x+EwyE5KHvDv
tDZYt+WihrB6mvoO+v6HXzrQvxcJ9JZ+mF8YFbjcuweSqRYRwld1h1UyAL8J
vgISKCZboF1IVw0XBUdpTUSL+4rQjIS8Mlv5ZVUz2PvZKfqsrbvbuh+cvLfQ
qnLNB8AoT9jhG+yJpC2qu4GKATdJIPd1CQY5XiNWB3CUn569xaSAppyVK8sa
PBZYAynqc3cIE+ckONpyrgBO43Dn8eSbB6Gh+0NsM9zjUQZNALtFrYnniVua
44XYhJAu4s1SMOnmZVzvcEsoG8qGINyglhnxuEq9ywyOJNcfOXVDu71wXnGD
tdLEWSO/U09bPz1p6ce1gMsBeyunR25GnHPcbWexyt4LHG/k+WO+sD09JWOz
lXBIy0dfpmtFTkIHCcqESTc8oahw+TRrODbZKlxGmBYqEjzr4OXqqNrpYadu
/JHbx1TEyduKTyogoMUc7XbvZ44wpjPMsb8jbX/TB+LVpRR1uGzdFBtR62Dx
O2D7XrXwDhj6Ac7b05r9DszXTv83Y76tkP+vY8bAiClwRre1B00fOly4fg6s
vTNlVv2cMI4lIupex4+6SplyVfSbMDnkOKs0lDbxacK42WzcTPqcdqKHUupQ
yp2s4808mftCw/A8B4W6kdpes2HLKFs8UQ7cy6/eUsYgAUtGIMA24sov95KZ
P1SNyZy0Xmit0HQ+5/VgHgxpbYGTmIm019Z2RisOSqq2pYHn9B+143eR0pYX
rQt456WFomWkpAF/taigDr8YHNdpm/CbooVfJKydjy7anM8QuYw3d5ol2nme
a6xF1Poz9Xr0bTZ66hY7jVDqKJ0elVHKvII8ye/ARb0pZDtQFFlmv2cECiNL
dkKo5K8O/wffjEXAtsvA9/q/aLQeT4FAN9AKA6a12sUhdg9uK3xGjU1fZhmq
iM5gXZNnn3t+BV7hW4/tFV9iudNQNwJksjEgg0vpZsY/U7RQMScvRbkIcIYB
6m+pMEZ62JuAJNnRPHuF0ciVkfZ/NxEWKTzLVPBL7pbJD4H4yeXX04XCie6b
RapsfGnacgjpgzSqqSZNjrQ9BSzUebmTag9GUnxxtCHJEhZqECrYumnBA7bF
SrsITq/7Bj+0xy7YAN49X+zT1WCHIhZJ5BjvFDWoUUpRzU/pMe5V1dowR0KD
XQ8isPtCRKbIfev7jjfW6pg8O0z66vPwSfBVGmlE3Vska2EnVS18JFbixLo0
teNr403SohZdpFDeKbshlXi4jrzvgEKRwp4j6ysPve/UGNaQsBoGWnuzkux4
sCWaVeZ7nfBhpYUZIrzK9zrxrfVq49vG0oIYh6XKPPGGyn46Kl6tjfTIcSpO
V58OBsKBoCvGl5N2AxJfTmNUt0ocH87SWr//g+8+zpQPHzGz6jheYZYxz7fl
e4oPm1NaUirGwczFV7MZdM3yMpFYh6vtDvEc+cLTX+TvET0mihC1mjHRj7eF
LW3uN+QPnMeumXai9sbdgez5+gIww+fp7isCQGMnnTYMPeWFG+7UNXQPOq4F
SSilu+UrmRSYluZxhQOv5bqUYa29JcpbdgzNoFtWM+IAverYZ+wFSHrflfe2
rWgRpOLsnI+3LTi7iVWWuEmDDWhw8XnWpYo4DYLWfUv9vS8+d0W/SizP+XYM
n71up0MRzjBaf7vVgyyc12ySAH/PBQcPcCiDdyvZB/9RhE4P3udQLgm7PXa5
lf0ZPHqVS3fMaRYsdJOFG6lLR796n0RLphprHqCslTu4BFKnC1er8qG7oV5X
S6yqirG1/DpyBrJY78fLm7j05+bv5I31YznxtLVfnobscLi/9DbTjQNxZXCx
sQSrM50z+877jkUPSZU/z1Y+/+4UbKjD4yNq7BwkxxtuvTQU749kzh7QD7KW
Ol/nq7SiGktsZuCP9r1W/KzffvfwO8onkb36Wq9gmkvRIelwzBTjzX2BEbv2
K07oFeLNRVGEilWx85pCapCMrs0cA9wI/SY9nsW+B0mxY9CjJmmUVU8UwxRD
4xS9trjShgcN61lFZ22pWZtUqhx0sfm+7NI/e99YX5Ib0ckV+nCPc4OYnNrf
BoJ5eKSRM/E+YU+j4BpKDmNHx1FUFLcpx3HLQS6ev8e9M/Dz3pAIfO2PLbKp
J3fDlfWkT/1vjizDP+enl+d/E+T8HhDXb4zjMm9FCM+JwVj/PuAcriPpE/1Z
eGkTcs/GGE1LV9lUSCBTEr9oY4t9OppQpK3B5RWJB75Ao5cEMV0Gt6+5eDbs
m6vG3sk/JOdGqDZkQ8Ouc+eB3ag/uP22ScJeSC1epVfUkYOqbqrtLEYuB7kd
xerRLxBw4SYFTvTVFuo51OxW4HWULm5bgqDhDURBJRBCQDZ6Oa7pZllSPage
BahrDLhha4CyKyUZm01QTvHMtZIjC44lqIhYBY81LFmFMPwoo9nUxaC6Edq2
OxjpaVKBlMcEKKwIgcUgJgk8qPmkkTnf6QxvkofnGlHkpGCwKZbptibIFY6n
OTXDw92WAqQZQKiRSjssynK1tW1Eb/KQ48SJwk3KJxUsVJRMr71+uIgLlaGw
7nba0xSzWci0MjM2RSDq1tRnBMySrpo0rosG9kFcnEbPusJipE8fkgwnPWnt
GXUOe+YWKubWChpnkjIo6p5kDEQxcck+DT70PORTmyjvv9B5+hcpCsF7v7WH
WFQTgEoZMnbI1EbhOD472uyEHdVAMmVA4Wr0TY1i0+pfl4uIjtIN9mhE+uHT
6F+W5Ffv7JsHs1rzPYFcvbF/IEeBCY/qjExMN7hvQm/JNjMxldhM+8j93H1A
Jeo4F0P4j6gXuNC2olpFcYN6Fp5OndQlNR/AYDkcSrcyg0oAYZyh21GUMNep
18HIgVhmoshU0wr3wadeRGIzSa9AcZ6oOdPL4IfHT8z4xIadcn6+RbwKzre0
olpEzLBsGDglI/t8Gi+Yn6abW+vU2wOY8P7I2X4TvXK7jL6M47iDuCt8uMfD
2pnL6J+DtfIl2LqJKmJxbPi/xOYYeCyYHo/Y9NBMI29/FPaCEFccihTTnefY
NpdGQpl0Y32Plz41DTYHFk0dqDI/M6d1UC5fXtzRqrBrIXqXGYmATB3WGKOJ
SHHmBWYD2gNDdGtQeYU3g0pMr3p5+vrHy5/Q8XAMVi2qfzmBHqJqq49J5SUd
V/acE8g8kJq6h6Ms2mfjDBg+PX/DMMfy0UP4+wj+Poa/38DfJ/D3W/j7Hfz9
fui5YE+Mx7/qrw709WcvL/7z9b6B/nJyfnbyw8vT5PW7Vz+cnidvXiQ//O3y
9OKzB/qiGf36PXInNjSkJKyOByXjlvfn0fGnTyRS3p48f372+kchNN+mSuXk
8fvj40mSvGlM1XQBauE9HrlIgUO925S9abRCcqqlToMSuiHUiAt8ToHJ2+nf
KU+T6jhvKi1Axf7BcKMnLp65tFdna0yFPascIWrsETQasZngMezjYoIykFJw
DMnQ8quG44dO7cTzEc4w+fJzya1ukIfZ+jI0/ZP1CPEg9nknqKyjLGH458IX
Q6l5ZTmS+1EwA5QCCmFlbZgEZXiyUFLMCQymjvgprmkjNZdF8fO5uSzQm92G
ywfxVJBHzkG86SFucDt00nXceRuLd2djmfh4U4KsoLI5mgZ6sV2TKYxtAKi2
Rzvns6YH8n8QFGjNpWpuQKwsdwQi4N9IjUotMol0Csp40fgy+0gZipBlt13Q
REkNxAdaxaTY0W40ViE9cXGqTnjYUxLWqIVRxlHQWY/QX3fX3w8gG48mZupK
XgNzt/AwfK071GBuXocEgTZqMlKHl+ncGXWSG5H75wVJJUHtI83MIXlMdciS
fLXaImpCA+Or7Ioq5a+nYp/f5hpk3tz50/fhv90y0EewZzuAzY9J8h+tj6wr
rvfP58/oYx+tWZ/hX+00ux/+82YUk9BtMzKf/XYzCq2egNW/o9B9l47UgTIK
tSDkmrPR3YcZcx4zhqKwkYrt3M+Ci7OgINGhssJUyZCmuJpsxplgFH3Sb2iU
4LroK05kQqhlJdebKwMpMNN6FKdgSQe3Ivmtno3fJuMYO6ouSktPPhwwMAvp
r9Gh/W71ltw3MGgxsa7ZhLN7F8+uE774FdP9/LlGDLN/vicw39isGXmTAs0a
gtCaBIEIrdqeKA15jgfUi/KNtJUOmrmWofjQvbvDHXYwtPLaA6CFAz+xu55o
zKsV8XrkQrqI2oehCp48z3pX46Eg7QftuccuHN6YE7sx7U3/L7A3PpuMNumz
t0iKiXF1mw5fgUdz8rSi64YLissA5WZT1nmThW4OT13MhboBijtxIdlL5UI+
0tJl/QMcf4jpx3InksfI34iN0N2k20SU8zG5wG8u8JsL/OYCv7nAb1x3Cr9i
Ph9N2BzF3F/jGf7Vz7QjE2Mx+NvNh7xL7FzqjyjiJH7H+ahpkrTUgL/af+35
5jebj/ifbAcZusaSPMsV2Rbqayd1wBtbThAaolKoeWFq0PLVC1cfMSjicyJN
wTjk+lqc42Xufk7Gg7RF3g0FWr2bHcdgw/l/w/60lwE062seq8/9izuBjP4J
PWrbR804Nq7nlnFanAHc3L/PRaHv3+/iiFg7VGQxdmPiyN/OoLDTwpxCzo2y
pCJnu1xR6N53ueztmErOgL1EONLacurZNB2JRsfHx9G2J4ch1H70v+QE79bM
xZ2Y8/BA5MPQTrpzMEcWjP+nGIwfnBhnJ69PkmeCMdTKVXAiqOm+eUsxo3Og
eDJ+PdCMfhQUV9U2sRsZvU2KiKGbR+70UfLE1oj6n/+Dx3aKhn59oR/9z/8h
7xOMEqncv+E8HjywEwFt++zVW4l1zMp5Fs3ofGhCl+hVegaP66R2eyYk4VEc
9cETotv+IYRuGWGySg6X2fsUs5HX6epI3aUpFRG9KdieBOvqIw/0MXmN+Scf
KclqW5MEJhtwBh+6jyx94v9n/oH/hpGO8XLgL4kTznm0Yo6pjvDpi2fjyx+e
J/Lgg0jp2Pfkw7Y6MPzoI/go+BNVZu/7xeMx/OoFfP6uSGtmBuQ+5QXgQcMf
3G7h0WPumEyuRRKuH/F/aKzHx+MX376Ix/Jfv/juGL7+gb4+t8NjdTrQj5HC
Vl+vSuyJhvF0/7tn+LsX3d+JgIefpwU5pfkXLiYNFqF1WJFHVDQGT0AO1bkM
jF6smZYBtVdGGkHcxNSH6gX57g+i6fVv2QEWywS24zfeewYO9i5Of+d3Q/uD
SpNK38QFBAU12NMDr5MTKZ+n/mDpe/fw4RNyxZ6HzHnYJFwsetODmdZdr17w
g3DKYVlCAwRTYOA0cxMO8tLtZvApNclccfsGn37hKrnJX9XJ84x8o8gCTpFE
4plzsnLaSIa+VKLWHPvWpsR5g8yd2qM75Wmw4JUiMuYtRqPTQwr6b//3/ftw
j+7f/2//z6RFdd5IO+gStz9JvQ9OPMuKWDg1P0ne1YSCeStdMPE/hY/ZzSAi
ssMsqgzlJ1djwCI0Gzp6KRpUE16UQDbkC9OPPVJY2/qhfUn52Io1wAoU6ZxO
FpPuCIKKVSA28rCYkNwflILeqa/pmlu32iEnpaKeCacEGsIRZmly9k8l/mRu
MoXTJLIh+rzOgRwleowHSAVp1Z1Nj5niLirF1lxY1/4CyTMU4UKfj+RfUfpr
hT0CCC1BSpc2X2LDwwR0pA6ELwFHO7BOf0Gey71AXC8FmEq7cAkq0fGKknre
AOFi6GIG3EkPhCEawqLqGUwKX7ll8EtyAZo/Fd9oKyFnQvm+k5Zk2imV0K1D
LBYBsS9fXoRUCpPfTntl4oD+WPEGYx4kNSCuSWFleoIhxzjkGIY0w9ji56Hm
kSh0oPQmJusAf6lpzJjyYxHppCdQCIpj/LL7B9042gGZbj6YGTBBM5xeQ4U6
ioxiQsAmvb+SSQRekxa/UEURMOOSZ6g0jNx5utrApgGVwy36d+C2fyox8Sut
Ru5VWvx9m1zgr2Ax52nJiv0lvPRltgaNSzhMXiXLbLVBakODs8qnW5YuakYp
p1IdE5QLcse4/w80Wl6valcBAA==

-->

</rfc>

