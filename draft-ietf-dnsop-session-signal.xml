<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-11" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes packets in a particular TCP connection
to be sent to an anycast server instance that does not know about the
connection, the normal keepalive and TCP connection timeout process will allow
for recovery. If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAOM0WlsAA+2963YbR5Yu+D+eIof6YVINwKQky7Zq9ZqmJMpml25FUnZV
9+nplQASRFpAJjozIQola615hXmD8yznUeZJZl8jduQFouQqT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefryMrls0iZbbFfJq01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjU9O3By+/ii5d3zy3fjb8T2Xb6pHSVNt
6+be8fH3x/dcWmXpo+S8aLKqyBp3c02vffU6+bms3ubFdfJDVW437u1NeGj8
FF/rZmnzKKmbudtu8CX1o+Tk+P43o+Tbbx8+dG5WzuHbj5ItzO07t8kfuSQZ
J005o//Wu3WVLWr+uawa+odLt82yrOhJ+JskeQGDXkySx9lqldf0K173Rbqz
vyyr6zC75HJXN9m6Tp7AVsHQ+XY9gg9nE3o0nU6r7B08ffmE/l3DqzNYx/ff
HCdPlmkFY8CW4+/o41ne7OB12fymLOfJE/gX/7qcwyyenCbfPzh+eF9+tS2a
Ch5+c3lKv9gsywIe+qeT5PDhN8dHyYN798cnsOn0YbZO89WjpEp3/5LXswks
IF705QRmk9XLvMrMsi+bLcww/oTWfrrZrLKwSF3UqyKTj16n1dvk53RnFvVk
CwTV5EXZWtE3xycPPrmiB8ffHSXff/9wfHJ8Eq1oJnP7lxTfO5mV63hh/zpJ
nuYzIKy6LMzK/rVcFq0PaGGXML/5tgiHe5XNlkW5Kq/zrI4OVJ6066efx8mL
9Dqdp6usSJ5ksKBMfv3q/aKs5snlLM+KGe+Q2R3+1GzNqz8/SB78cNramSJv
snnyR6D0Oa3U78Mv6fxfap5SdxMu+zfhMq3S/1abUMOChnfhapI8z9bRDlzB
OOF3tPjHwKAWZdnQdd6ugGCvIxp/DEwRmOW0rCwh/3SVHH9z//ikn5Blemvg
IGXxL4vt9baHUmF6r7c1MLYqtzMs1/GvaZJvinSxyFc5/Hoeze7gwLIR2P/8
emmm+fJJcu/bh8ffffK+fX/y/VHy3cNvxyf370f3bSNz+ZdpWlz/QqtweQHH
tgZZ8S7D43+ZXq+yp6dMCU1aXePElk2zefT11zc3N5OauIpeXORFX29S4A31
1wV+c56t0l02T2dvv+YRWDZdPXmdvM4qehOSzqYqpytku7N0W8MxTnewjTCz
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
e73FKklU4oNkdpjdGhWCc90FKrpmAiGYoGnKLui7UrEtiaaxi3WarcqbibvM
1zkVg33e9kkQVaOjfdsnO9vZvr1+bNkmChV+xmZ5t5s+3UoD7ybqR1vj9mYX
BlAC/jiotm1H12HsNGFF0ybt6WFJCZcPswdnNd9Cqs5x4h9/+ers4uLVRUKl
X5LoxdKAtdRozpiXGSgF+Qe7K6N6H08zwQkPY6Bj7eW5OzzwTr+XcCXPQw7a
wSjBkvZ7/xFVtPPIJydHju0HUywk85OL1CWSOOqkL3KyJp6DxlfbjkcxNFpH
gLEVjXrreOo28JRYZSRiw5K56nDv2Yb6N5xNeEyc8aEiHdPA9c0T93jrPYis
65C30V8O8SowoIsPM0aE72WzHtqYVeIhZ6vRUsBSW+28c8bvaOtcnD+BEG2L
YuWhsDkNe2aiR0Jhsu28ubV5sqF0jvb1hBc6Y+RFKQBaxi67xBUyYKY2ioSA
h7rN/LWNi3KKlmJhoxnMwiKB5dNP5Sb5s8UiJw0X2D0wjFivpr/XboexJtXV
YnPfp17LLnQup7+MKEDZTWigZgwbkFCRXtieSwnXccQbb/aRLgBlVGS9l9NF
15CmSpkyq0midUCSQPNbjia1Tr7OWYc8JceeiIUgOMSVN52BNG0ookRK1677
ubqTuhwvHAspVV1zDHbPKfs0SRlyZN+qNB0ISok+llc/tw7HzzaM9VXd+2qY
n+sVU2a0287iFQUh+gWtvZKa5I4uO7wPYOti8Ey9gViBb8y6IYXQVIFT7EQG
7dUuJWMrpMDT9fFs/vYz59GtR9CkpjF6USv03JO4g+Ja6iC40Kcd09DxBfTE
Qp2Qo6P2dV1gq6N3wr4OdgJUsBz18c+q+QL5LDeZ64XzkAsUrjH5iaxItd5l
ltndPJNRq0SiI/Aofox+hz4ZRK4z3tp3KRCKJJN7BbrFBs/QKOqsYF7aRdgU
H78QhtLhCuoZQVvgi1+c/iXJVpJKKpXqTKIBvyZaUztfIaQEIaQD0J1MPGyH
n/qpd2EEsAoiVPSS9ktsmjr51uqwQL2pEiOAIRSUC3aCwIVUeksmLVBkvWzl
7UhCISkbKS6fTfPBc3Scfo7cDqRNPv/0ct2dO3cQBVK16MslR70+3Kn5p4+g
iFtSN/bwXmJ+5ARMMIkd0qCH5TWBSgHHoRwMjq4Ko1BEDwph6AhKRSTuAgwA
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

-->

</rfc>

