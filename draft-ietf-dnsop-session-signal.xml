<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-09" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="May" day="16"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model” popularized in the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIANu0/FoAA+2963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefLiMrls0iZbbFfJy01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY+/dXP4+qPk3vHJw/HX45MHLt9Uj5Km
2tbNvePjb4/vubTK0kfJedFkVZE17uaa3vvyVfJTWb3Ji+vk+6rcbtybm/DQ
+Am+183S5lFSN3O33eBb6kfJyfH9r0fJN988eODcrJzDtx8lW5jcQ7fJH7kk
GSdNOaP/1rt1lS1q/rmsGvqHS7fNsqzoSfibJHkBg15Mku+y1Sqv6Ve88It0
Z39ZVtdhdsnlrm6ydZ08hr2CofPtegQfzib0aDqdVtlbePryMf27hldnsI5v
vz5OHi/TCsaAPcff0cezvNnB67L5TVnOk8fwL/51OYdZPD5Nvv3q+MF9+dW2
aCp4+PXlKf1isywLeOhfTpLDB18fHyVf3bs/PoFNpw+zdZqvHiVVuvtzXs8m
sIB40ZcTmE1WL/MqM8u+bLYww/gTWvvpZrPKwiJ1US+LTD56lVZvkp/SnVnU
4y1QVJMXZWtFXx+ffPXRFX11/PAo+fbbB+OT45NoRTOZ259TfO9kVq7jhf3b
JHmSz4Cw6rIwK/u3clm0PqCFXcL85tsiHO5VNlsW5aq8zrM6OlB50q6ffh4n
z9PrdJ6usiJ5nMGCMvn1y3eLsponl7M8K2a8Q2Z3+FOzNS//9lXy1fenrZ0p
8iabJ38BSp/TSv0+/JzO/1zzlLqbcNm/CZdplf6X2oQaFjS8C1eT5Fm2jnbg
CsYJv6PFfwcMalGWDV3n7QoI9jqi8e+AKwK3nJaVJeQfr5Ljr+8fn/QTskxv
DRykLP682F5veygVpvdqWwNjq3I7w3Id/5om+bpIF4t8lcOv59HsDg4sG4H9
z6+XZpovHif3vnlw/PCj9+3bk2+PkocPvhmf3L8f3beNzOXP07S4/plW4fIC
jm0NwuJthsf/Ir1eZU9OmRKatLrGiS2bZvPoyy9vbm4mNXEVvbjIi77cpMAb
6i8L/OY8W6W7bJ7O3nzJI7Bwunr8KnmVVfQmJJ1NVU5XyHZn6baGY5zuYBth
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

-->

</rfc>

