<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that same
server for at least one hour.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message at the same time using the same MESSAGE ID.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table is provided as a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC2782;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
XcjedP8P92O49CNiAQA=

-->

</rfc>

