<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
so all implementations of DSO are required to implement the Keepalive TLV.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) signifies that the DSO-TYPE
of the primary TLV in the DSO request message is not implemented by the receiver.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIADrznFoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtUWwURk
XHbs+/72eDx2Td6sskfJkxeXyWWTNtliu0pebrIqbfKyqN28nBXpGh6YV+mi
GedZsxjPi7rcjOusruGRcZ1fF+lqfPzAzeHrj5J7xycPxyfjew9cvqkeJU21
rZt7x8ffHt9zaZWlj5LzosmqImvczTW99+Wr5KeyepMX18n3VbnduDc34aHx
E3yvm6XNo6Ru5m67wbfUj5KLp4+Tk+P7X4/oX9988+CBc7NyDqM8SrYwyYdu
kz9ySTJOmnJG/6136ypb1PzvsmroB5dum2VZ0ZPwN0nyAgefJN9lq1Ve00e8
ARfpzn5YVtdhlsnlrm6ydZ08hj2DofPtegS/nE3o0XQ6rbK38PTlY/q5hldn
sJ5vvz5OHi/TCsaAvcfP6NezvNnB67L5TVnOk8fwE39czmEWj0+Tb786fnBf
PtoWTQUPv748pQ82y7KAh/7lJHkAY391735yAltPv8rWab56lFTp7s95PZvA
9OMlX05gLlm9zKvMLPqy2cL84t/Qyk83m1UWlqhLOoGPFnmRN1nyrCw3Zj2P
t0BUTV6UrcV8fXzy1ccW89Xxw+Tbb75K7t87/sYuZibT+nOKs5nMynW8pn+b
JE/yGVBWXRZmUf9WLovWL2hNlzC7+bYIp3qVzZZFuSqv86yOTlKetEunf4+T
5+l1Ok9XWZE8zmA5mXz88t2irObJ5SzPilmWvEqrN2Zv+LdmY17+7avkq+9P
W/uC2zpP/gIkPqeV+n34OZ3/ueYpdTfhsn8TLtMq/S+1CTUsaHgXribJs2wd
7cAVjBM+o8V/BxxqUZYN3ePtCsj1OiLv74AtAruclpUl4x+vkuOv7x+f9JOx
TG8NrKMs/rzYXm97KBWm92pbA2ercjvDch1/TJN8XaSLRb7K4eN5NLuDA8s/
YP/z66WZ5ovHyb1vHhw//Nht+/bk2+Thg2+Sk/v3I9axkZn8eZoW1z/TGlxe
wKGtQVa8zfDwX6TXq+zJKdNBk1bXOK1l02weffnlzc3NpCZ2otcWmdCXmxT4
Qv1lgd+cZ6t0l83T2ZsveQSWTVePXyWvsorehISzqcrpCrntLN3WcIjTHWwi
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
5MJw/w/LCTlo5nEBAA==

-->

</rfc>

