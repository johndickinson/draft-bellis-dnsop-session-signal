<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is maintained over a persistent DNS connection between two endpoints that acknowledge persistent DNS state over the connection.</t>

<t>(QUESTION: RFC7766 includes a definition of ‘idle timeout’ which is updated by 
this document. I think we should include new definition of “Session Signalling idle timeout’?)</t>

<t>Two timers are defined in this document: an idle timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Explicitly discuss how this updates RFC7766.</t>

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the idle timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

<t>TODO: Discuss DNS transactions (query/responses) compared to DNS operations 
(e.g. DNS Push subscription) since DNS operations are not described in RFC7766 
and change the meaning of idle time defined there. Perhaps we should add “DNS
operations” to the terminology?</t>

<t>TODO: Reference that DNS Push defines additional Operational TLVs. Future 
specifications may define additional Modifier TLVs.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.
DNS over plain UDP is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>(QUESTION: Given there are now two DNS-over-QUIC drafts should we include a
statement here about the applicability to QUIC?)</t>

<t>Session Signaling messages relate only to the specific session in which
they are being carried.  Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to idle timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation Type Code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SSOP-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           SSOP-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          SSOP-LENGTH                          |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           SSOP-DATA                           /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SSOP-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SSOP-LENGTH:'>
  A 16 bit field in network order giving the size in octets of
SSOP-DATA.</t>
  <t hangText='SSOP-DATA:'>
  Type-code specific.</t>
</list></t>

<t>Where domain names appear within SSOP-DATA, they MUST NOT be compressed using 
standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SSOP-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both idle timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The SSOP-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    IDLE TIMEOUT (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='IDLE TIMEOUT:'>
  the idle timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an idle session.
If the client does not gracefully close an idle session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the idle timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the idle timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the idle timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The idle timeout value in the Keepalive TLV (SSOP-TYPE=1) has similar intent to 
the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SSOP-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The SSOP-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the idle timeout, and the
keepalive interval.</t>

<t>The first timer value, the idle timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The idle timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the idle timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="idle-sessions" title="Idle Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the idle timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the idle timeout timer remains fixed at zero, and an idle timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the idle timeout timer is set to zero upon transmission of a 
request and remains at zero until reception of the corresponding response.
At the server, the idle timeout timer is set to zero upon reception of a request
and remains at zero until transmission of the corresponding response.</t>

<t>(QUESTION: I would much prefer to use the phrase “the idle timer is unset” or
something similar in place of “the idle timeout timer is set to zero” 
throughout. A timer of zero could be interpreted as a timer which closes the 
connection immediately, for example RFC7766 says “Servers MAY use zero timeouts 
when they are experiencing heavy load or are under attack.”)</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
idle timeout, and this is not an error. This is why there are two separate 
timers: the idle timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “idle”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-idle-timeout" title="The Idle Timeout">

<t>The purpose of the idle timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining idle 
sessions. A server with abundant session capacity can offer a high idle timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low idle timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-idle-sessions" title="Closing Idle Sessions">

<t>A client is NOT required to wait until the idle-timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an idle session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the idle timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the idle timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If the client wishes to keep an idle session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-idle-timeout" title="Values for the Idle Timeout">

<t>For the idle timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for idle 
sessions.</t>

<t>A shorter idle timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep idle sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer idle timeout with a shorter keepalive interval signals to the client
that it may speculatively keep idle sessions open for a long time, but it
should be sending a lot of keepalive traffic on those idle sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an idle timeout value less than ten seconds.
If a client receives an Keepalive message specifying an idle timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the idle timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>SSOP-RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>SSOP-KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAP91WVkAA+1923YbR5Lge35FLv1g0gNA1N3Wnj3dNEnZ7JZENkm1t+dl
TwFIEGUBVZiqAim0pHPmQ2Z/br5k45qXqgJE2e4en91VWy0SqMqMjIyMe0QO
h0PT5M3CvbAnb67slavrvCzsVX5TZIu8uDHTclJkS/h6WmWzZpi7ZjacFnW5
Gtb87LCmZ4eHj800a+DBR4cPnw8Pnw8fm3xVvbBNta6bR4eH3x0+Mlnlshf2
rGhcVbjG3N3QrOcX9qeyegez2R+qcr0y7+7CQ8MTnNdMsuaFrZupWa9wlvqF
vXx5bJ8/f/bMmEk5hXdf2DWA9q1Z5S+MtUPblBP6t94sKzer+eeyaugXk62b
eVnRk/DX2rzAIUf2e7dY5DV9xMu+zDbxh2V1E2CzV5u6ccvaHpcFDp2vlwP4
cjKiR7PxuHK38PTVMf1ew9QOVvHd00N7PM8qGMNe0Wf09SRvNjCdm96V5dQe
w2/8cTkFKI6P7HdPDp89lo/WRVPBw2+vjuiD1bws4KF/eWifwdhPHj22DwHh
9JVbZvniha2yzR/zejIC8NMlX40AFlfP88pFi75q1gBf+g2t/Gi1WriwRF3S
Q/holhd54+yrslxF6zlerxwgpihbi3l6+PDJ5xbz5PBb+93zJ/bxo8Pn8WIm
AtYfM4RmNCmX6Zr+NLIn+QToqS6LaFF/KudF6wta0xVAN10XYVev3WRelIvy
Jnd1spPyZLx0+nloX2c32TRbuMIeO1iOk4/P38/KamqvJrkrJs5eZNW7CDf8
bYSY8//5xD754aiFF0Tr1P4ZSHxKK/V4+Dmb/rFmkLpIuOpHwlVWZf9XIaGG
BW3HwtEIoCpgsREKjvAwA4+LvmAUAOg1ADNx8fgZPz1a0tN/vMFPu/Ncj+zF
ugbGVOXRTNflMv2Y5nlbZLNZvsjh42mL4r998tg+ef7YPn/83ZMYiJUM8sdx
Vtz8TNObvABYl1mT3zrcgDfZzcKdHPFeNFl1g+dy3jSrFw8e3N3djWo60np0
kBE8WGVwNusHBb45dYts46bZ5N0DHoFlwvXxhb1wFc2Em7eqyvECOd4kW9ew
IeMNrB8gyyYNio2xa+4c7D8B83UNqL4pq7yZL21WTO0Jz2GPjv/MFOV58G7O
s4VVqbQ5fDqE/x4dGjMcDoFMgSgBHGOu53ltQXytl0CNduqAQbnaZrZwd105
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
jO+gjUQdPAEYOHJ2nE3emf8DBSuBo7HDAAA=

-->

</rfc>

