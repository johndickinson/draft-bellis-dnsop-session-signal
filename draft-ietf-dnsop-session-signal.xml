<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
/jcVfVmUbCMBAA==

-->

</rfc>

