<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Extra TLVs”.
The Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that has not yet been deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response TLVs”.
A DSO response message is not required to carry Response TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Extra TLVs”.</t>

<t>Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>
and Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="server-initiated-session-termination-on-error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<section anchor="error" title="Client Behaviour upon Receiving an Error Response Code">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifiying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Extra TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-extra-tlv" title="Retry Delay TLV used as an Extra TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses an Extra TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Extra TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>C-E - Extra TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  C-R  C-E | S-P  S-U  S-A  S-R  S-E |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
MkOxE2lZ+6uo6HyPX6ZwrF/XyfHyCpO2rleJr6SJ6q3wD7RR5pn2neavvq7j
JFXhQ0X2rnH7WM0ZUxHHGC+dH9iuqiMjcAQgF0sbQgZ5AbNrqD4UimD/bkum
Aio4e+f2T1x3HygvseZ0ELpDrSayztBBIrXz6LK0gOAgbq+itrLIlIFONhiR
pR46XB6YexwE+81fmenWkpwU/mVPQZCcWuIzwpJzs9v41WhpaQkNAvZ2V74/
w/oBbF3LNe65vwfUHoQ8iiAYk2k6B5okmoIXwnh2qxcZuSXcPgGC7jc8XAma
2smxLUQmVWvRnNdKbIRnD26OLdA7Dt2+OcBvXpdAqlheTlqK5NoympsySWKr
OCaeYEurk7zG8pvwljsuCkbOtdkmcS9cY0DL5o3MvIbnYPtJAwo00j31Sfx2
u5kt+Ojv8uY3teaC0mf4j+PXZ8yfl1lTRzNgv9NSZRwcv2vx5y7mFeWkF7VU
dtBnMqtmpXVo45otvko/XHzhtVqOz2svEXoMdR9u2TwgPNBq52bZYV+WW5/O
T6DePxD3v1v5sCx4FPNfa9qK+CGRIReXL8SV5O6ZKLNlncT8uzO5S2Lu0hfI
Kz20N8xrcl9u+QpUATSxxMq8S+Q4o09ygBybnVnDopcnIwAbJfKmYE001O/g
/gOplJqkNnVMGPuMKDxQ39ct2JTL7Ti9SfMlFZSMCbk2JR00m1E44jrljjaE
dBBVFe73+MyjYUOW+VMsrLlkR2zy/quZ+edHcdlp0jNTBvajGqiS29PlZhTy
wFmt0971SOzG1rHqPrF3SecmS2SByBHirRQ4YMAtbkPvAD5l83NLahKF3q8m
UX03RPfnUHVinaVvST1Le2fO0S09ItGYvT1LF4dCdKFMwqhl1xktwWQ/hVqy
MdjGNhXhCuIqW8RS752kZKKBqZTPnbBEouKcOwT4FfiS4lT+FEtSJ6Htc1TW
1XEt91AoSDWn5ZbfY/eooE86KQRRDy+xaqM5wz/IGytt1lZZp/sActmoggJQ
m1mEeRKE8SK/2ojdh3eOFjbnikbKcDixBOeF/sn2yBIJT1dSw4R+KiltmrWD
nEArfGjxejjhypciNqmBFAFLteFe7OAVHVOq0vIdd3AbfS9nUcbRqd9uZUhW
CAdezOZfRuNLQKVmBuQHTiw3MUWnHEdpOnmcw+lWNubcxOgokfy9tKqOMV5/
6PeNuTl8Rtfp3FJblHEgTgKtWUJAjOA/d+emMo9XP7qrSgzy0lRusVsT8jC6
v6ZJqHeYX+ntfMLtMBmHNftvTXtz7zL2R/a15N/hzG/y7NbihPRU8bSIhMka
8NppjN6z7/7cdVh/RYvnfcri/M/6F0fViiLPFSaRLdBTwOrIpg5hmMi7+Fzb
ojFGgDuwvv8q9Frr9C4TSUteobi1jBQ1bhe5f/8+bm/2UVtLMysTBkZRS2x/
jNKT6tKHy5rWrFpS6pW6MjNsJQh0reaK9T3blt/S7QGho/k647IzkoyBg5je
TmiSEmAAVaC2Y1XysLW2HF+Jd6FZuQDwTDcWNLuQQStxSQyH+5E1iAluKZjE
kJ1NCG0HI8NaOP63ITrgESnzJA67tU5OO9/C+QqP1ZYCH0Oj4dDvlvsRtjr1
Rj7+J0Kb7RYFo10derFTLG4V571HrxwNjsc5VEAc7/LVZsVC2dsdLrW0FCVc
0vtbQdLSNLlheFbgqCp0SDL4DjaqzEvARplDKIhPJz8jpHR3Pd0t6KzH40Kc
72Os9d11ZUoCYsWpXI8qYPrkRHqnU6elLpwmIdNt+o8bkUlSVYmby/Z0Xxah
jPV0BIbuME5FEFdM89f2MUNrRzPj6hpPgPzJnJXZOninLzMQOhF11H9v9zuo
acdyy1fC7M81hbc4hhNkKizEVybgiALp9bSwngbToi0g1oITAUtQXKgTqLZX
CxBmuMvcHiC08TPN+4IL+e5Wq79D09FXhYGUaPgHKQrEooIXWpgAlXjZO1F3
cUeb9C1ss4PdmAnFawUKjpWEJsmmv/PRd4l3/DxrPzBi4lLCFA1ESSJ0RhJq
U++UbC1tlXz19PUbGCudK/DdX1kNeJxJn3O7Ccgg4/7nIOmkO6L2dSE8EjcN
4DVf+WBJUnKsaa0wby5vhMo8nKOJ70cQF/hYGc3I5CeKqc4A8hgHQ93B67Bz
VR107+hIverJtf284yAdOF0ZWL3Y7bbvI99Mr+/CiouAShcKmorDQ0ApeOkU
/2WvZNEfHku4yekVZriwp6TTv15txBk2UFeYZdzo3s9MgE1UdUVsLOIlwgZa
OgchiYCiPCBM+41QnSs5FBch3LlusrYcM5P3ZgvJLeXs6j8jWWlcVD64QB1E
83LOjVoWcFOvN8Ucx7aOU/S3ICOduGPb5apXlpIhKHsFi2gXsqT3ODuv1v6K
ER5Rdx8uRd17x9YIveeM4qvjsRHDs2kvYdeE6NQN7x/odD9K7newroewpWe0
+i1GMks2msU04nwNDx8wt1Fl9Yy6wOaIMxC9i8d1OqoYHUExWEhCUW/XowXV
dKjUYvey0w0pb41xWSuYZZKoI/v2mjiD9KxGXcL3R3LMinarhkNi+183deNd
492WW7Bcn5LP+A9OU0MstL8p+KLgmUs3TYmoXr5RVGaxzSCTPWX2eyOXL9h0
ltJsJBpMDXE8VnWQUvGF2sgS1JfOwopF3ZbSMIwEDlicjlqVBzYRAELTdJly
n2MK52FVt8UC0whN85+y5kxHYNo0r826LdVrv+n+YVU3mGJkoc7+BjMQIiDX
FJhPWjQtMl2nM1wF0muJAE44NpS9vUfvGKCKcTDt7CS6KtJ30Nu76vrCA0i4
vRvp4qjhOF0VVcBROzOulKkjLQK6PGrAXKuExEqc2hoqXnw9S6sZSshVWVH1
lHJTzQQdqsteUlvizqoduaWo5FVYMzCQ1Rrd29S8LT4r1FoFppuJJQKEbySk
M2IqzNwg9Nipx4Zxzz6ww5KUYzR3CQOO2QJPYS64c706ERr7oSEjo7VCSTmy
mK2HtkPeoFFiKFfrmc3kXS3MmH8H5R/S3sRswPb401Ab/+Trmnq4V5lPNwiN
m23VRnWOETsxeQfswAL62dqqaoK+blXf6u5PtwWm2Oq8iG4nybPFyC4mmW8q
9Sug86WnhX2vCuTtN/VpBMXa1II7SLJlusZEBI3yMPfmiogEU/LCTntCFP3v
tx2irypQ+bmksS6zB4rksA88ff8/qUSLZr+yU4yRSs+wbO29kEqftW+3+Swb
Isxo9x4d9u0eQcAWJAr4Sy5udfeoWEsY9T+St9EATg4k+c0HImxKyU1b8Jmz
QsBTQWVqfIRylhOdT7XlcHQJFffjOZJvEYlHxP94HhpHHhCLS2/KnGXMdFPN
M9LEgHfxHTc0gUnyZy9Ox389PrtkyYp1Fn1MQPlCi5IMpXXXTMv4EjC4/TPe
458uTpKLkqvXcFxdQHqz6zwTZ65KW/QhXrz6n8/PXv58eq7pUFqDrsXsaOo0
LqEUQ68VrJTc0jmFEvzZtzocc1S0dinZJdsBOOiIux4SIm7gCUI3Gj2HY5Tc
duEO45+jnpqHv+PBQYMyuLuGLcuOYbnD5TXEnYMSYRRgZ10V842mKct9FNr1
Pj/ROzPyHgUmK5mwOUE1+pqc+/yU0psyOofI/Tbq8Zubrugiov/CHhFVFPu0
TW3XM8SUWs4V701xFApZVFLQyu4eXM5qTqF9MsLGkT9/4n5hX0t7QHmP7hz+
tt8dwyQnHhtRsYSJWMcYq+ELquDUo6BQsoBp6zvPZ/SDfUZr0BfjEIPunBBX
HO7mvzOh9f6ylZZw4EIbbVRxr0tql7QYPBBfqzHwra/rAdugQt+dFPsyMthR
0CXiMPl8GfUnpzBv2lLezk///Obs/PTE2ZsT/5AvzU6lLseCFzwv7CCQtnSf
7tzM6HVZFlllDC5CflIQsSnF6avq+g6FVxXKYatKZsj0Ic7jnidFYMjl7HH8
MoyqdnH30BYEh9oM9EQgYr7kOnzJO6U9A+K94NO7FR5DZq1gZ8UTYPZsINYx
sgVfTUKsj1gDBV6ROwOHWwKHW6IkNl4/ucH2MsoJ+FQP3bfhjdWt7+6sk51N
+nd2KKgTttTdbS8S1KE9/97fh7MMe0RjNb27Io6cCDbRE7UgNZBbSQwxqk9k
Hm5f3Dz34Vk+NUZ5XIcfeh4WfNLC0DecrV6o8kqDUAFablHkjou+Y5eGWxGE
LT5ZN3hn/DG1WBL3eF8uGayHRRxLVI06HmX1tjO7NElKlWUlGu13WuTX+ill
NJmizbxoczX6ob8IQ3tx+O6Z/JfsP/x/Hz0cH0Ve3BGHbt/lK37Jtz9Ovk/m
6bbGAxnaQCKfndzb+CZ9BH3CycDsdCRMA2jXReMrYCzzVc4p6l1uKirrbbod
ObHCGI5gtHJGPN3kavb2jNPBywSZSonrdCO46PVtO3ytZBkxC3unCILKpo3f
FjlMdSJwwrfabz1OUFWVOnYfBZwzgVQRlheV0rO4EnOqlD80bBP7fl1unBVY
epdx7ez+6F9CE8O2HC26x7Cj38brtguaeMdlOIEzFXjvv/LcTsNgPa7MHknJ
sKRVWmhXOBscWzgTILVh7Zaih/FhbT4OD+wz9LGh+OgVPAA0WLNdznHSmjOz
lWH25luyl1icwfAZl5aSwKm7X+A0aWGWV3xWGVlaEqwleR2NgZ6Ashb3d9o0
2WqNIn5sLeNFB77xVd+xnKInbfv5HqSeA/scD5LidEwFA4L7e3eaAJ/atmvX
jYQBZLJBjRrTi10Yuai7Y7+hJR3HjO108FtMVLVM3YBpWk3ifEP0QfKZ1gG+
pRHqdFpt0O078rtIhCP+M62DHG0WfH/TwgPz/dgUHEzSovhC5RgaKyRmjnTK
Vx54Cluztmx18OB2dT2Zetp4BvvbHG93EV2/4+0LE90XcZV9ho/JRR7MHju+
e8uDHT+0c0N2vARg8JtyuVllsdaqNa0nSWy1DzNzoI/NLOs14+FWTDcCo12B
KrnCBFZKU1cDP7LmFVKtapYG+jQuMoTV8mExzIaHrb2CXddA377pcOshlm2x
ewCLuEqrOSnhCqodtnO0JN2c26z09CchlKvMOkgYQYghQthWMwl7Hx8gunta
dRnjflIe16JYQbEdZiUIYAq24lWw+B8uYS/lGeFzHnq59ZOV99BEENTgtAGK
jyfzHDMKDFpRm1hRO6LAV75ac4BG6K0HLRUO2TuWuvvdalFEa1xvpkv4qr1A
sy5u2psvt4yy4ixXutQbhBV4cI50nORN0c5+9JGml6Z2obpF67S5HtHZ+2Xy
fetdpc0sjf1oPQYjqqorLMZqUIs4jXm6loKtJAay4iavyoJ8bIkPjBH81VHP
4ht829nrm28RaUM4E6ly8+PRDx8/SmqkVoj08E2/o6zA+99igDGfi85Oo+or
9Inpspy9HTmp/6JpOanGLtqNE4e3lVhrOsPiOZhEFbqG6h73Qvp+Cq2N+DDP
T5++evECi9CeWFHlqx5Iv1O5m2TkYDZFD4+DC/cY0xGLDbWhIg2v5zEpmFML
qNrHC5HNYHIzsCJV5QImVWV+pBkMiX9mj6Zba6ckaldL9reSWFGkHtOucLSN
/cWnl8+oahGYswSb+Al3/akEQV9jpigLbD5Ut+c9vVwbz6uqwErHwlz3uNQT
MF+jrmOhY19492ECa4UT+FZ3WOj0u0c/PCTPdrBHiTOz23in6MNvPdY08z5l
yUwMxz5J4lSaYlgRwRowh4dgZ3PurpGnVCIRZo75ziF71y+vyQzIe03JBewm
0RRFj8Ph1OJh/RauufyOdDfssZdhV4KQCSRJh5LkD0RDh+6wva4FQd1k3v2F
F0662cOCq5KEeQpMirIIQTavOQ9VrEm/vNA8mYbJCgLteixDDFPBF/49S5eS
adKjK+H9FUmgqinyEJBCIzuWL/ghlXE6Grv3en2Sy2uXv4v54g7CCBHchhJT
xHC2Sn8oLVL0GBnSykwcLEPvcb3vCbHHolUbxFpQv18t2uOdF+Z3cWppMqvK
06LsE6JtHxb7kH2Vm64Lb+d4n+fZ6g4jOsxKimF9cSeXQs24H7TJevW/D12z
IwxuSI5bMuSLOsNuUot6TGzanJjRUdLsxwPXeNQf1QooZ7PUo5aqzF807v8h
sYZQqsbW6Yyz/WquD1gDMU7QiRp/Gw0Xpbu1MiCoXKbWbdZmenSm8Np5xhVT
O2Z5kMbBCPcuXY+CwDnQondORNav5RyRM6J0Qiu9rFoPSSVejhxIov0SWDtf
C8l09tEazTykdn1SR8McnpmVQZlKZUJhAaiCbGqMK2AfYC4QxV2302iro5WF
/LlVht6SvF6xBjQvub6D2LT3oUkU0tSYWtPpvDdH2VsfV49FxPHfEk1tjyx8
6TqTem0nCmGXgh4mk1LUAnohcqrclO7gzmFsxdJrWeRGqHQtbRVNTNwK3KAO
A3TdBbUck+jbyTpT9Tav9nEOhyw151rzFjZYZUb/JqQrZo8YCtkUIb1aBH4o
AZBomdEdK+o5otaKGA3RczxJ5Lk7B31ly5UF2kH0Lg7CvX+P+s1WQRAIVKQX
/pQhSANUSwaOn4cCTEJkoZQVtSB5/xXN/6NzbxRo7p9vraxb97AV2sYeGTG2
OCDgokzE4zB2yC1FPthXRc91gD4eyKx1YdHg5cYLfOp4xC0q0bpuUViTo8bI
vtAZmHEUj+2Dnhg7BhPgMc4BE61a5ChmIK2Mum6jLkR1VO7sFisSzXLWbacl
x7B5nhWjfErXd4upBkMLH4LIzqyxTGThR8OnaH+dvw+aDl/75p19W03rZ1Wf
dgWLcNDNAcnvTGM3c/mSs4h7+6PpJ3dnU0X1ikSU3/JYC5EfhNiObHzwV6IV
QtduoypIG9/cP3NTEvy+XPqVCC4TWAvloHuAuaJdCsN2nGqE13cmxQl88hF6
aWyJBLrxQCGcmjvNgH1TRK3AetxLe2K9oGHNpfQoYLnEuRYKCSRM9MlP9xFU
YaJuEUrD0yQyCtTM/K/IvlOCp5LMQVoOokIl4D+Py6ViIe5ylUX7VOfNRu9k
V78Kmn4vOJAqJF0GerUFsXyBmbLi+P5ya1KvqAFe3WQrrP9QX28Y6UgIMGaS
2EoIPprc5w2mRsemUFQE2Cn78K7rdA13eyPCfroR5Z2PCVEQVVpfH7Rfkwsm
4apkYgg6lI/yk5ckK5C+HJUumotsw9pL8kLc+tvUHoGpu1OHGknIK32TEoPh
n2bGpYO6VuRq4A7YYbzEjBfX0sC6pgjkjBexwCJsXOOyajZrqYCOwargJ2Lm
6OIfolmPEeRVOc8X+dYgr1qjO58p8DZnq4DhfXq6fRuj9dtCRT99XcreCLgT
qlUb2IY/wXaMe5VRh0y8QNOl1PyKnKkBKqomFrneNTKumKo6aBnkZay8AsFR
ghCI4nouasn2X8Vu3N/1xf37IJvtxPqPB+21c+mJFAYpsW6hFh5hql1ybyuv
FInT22mXkRvBF2AZdXa2BHNHTaC4fJYIF9Z8PvbdJfIW+UQepAFfW578fkTJ
5GFrCSpuiBbQRJwNXN4tHpyvU45JO0NyIdFiR1K8RSUEdUw66Ab0RiFzRqv9
jNSPtEPhdLQqEjsHAlZqSW3fBNlXOGlJe8dRSFq35qB6K0RJ3pBT1DK1sQhG
X6q2po7D8FwcgeziKK1st6s8l1VqyfX3X/GxEYYDa56wmVelVRZ1pE5blMHG
a9z7mOkCvxE3WPgJrpp0a82QyjmXR5qFWZElG9P2ULlPdFFFDfHEAJqyZeB7
rMSBFp1LSf8P77LEyrFgqnIv7YDNPFEmGVdMW4tgJHeGZj208sxps/l4Q46E
2v3enQ7zKVn9TVu2l6ZGMB6QMujYGc8romt5f9NKfZ1cpAY2x12cnv/l2fHZ
8xF3ApfeEW3SV0IICgmrVdwyRZ+yr5ZGQy3uONfSYS3jf+es7U1v+YeLrTeS
QyuJblHribX41g2z0L5Xdsy+lqPVkYFToOvRMwU5RynA6stVdtLxrI+2L1tq
4stEcmkJkVchm4brdraSZ5TgAgzu/jvbY+p7tuUG2FbfzKUjdHTVGNDd8Ern
rR/0ANGC0fM75faAGbNrK2yl8ahQXeq31nI6U0t89wbHzntvG1hy7q3qvdt5
7+63ZHKWvDKlFUJZJKe5+RwICitT4DGxA96HO+RnY+WJrWORmJr9C9DuruWC
qb+/1HeW4nx3kSdAKgUTmrOqyPMZeRyYiFB33HUELiop1q3S1O7BRkoHWFBU
bdqU5LDdUb16Sgkf7XpgHtazmiR/VareNUXlOk4XRqut4/TWiBfRpnjki3iC
BBqlU8ZSRqb8mzaMoY1uJa5qKTx0ZmwzH86ynfxGVFGMYaZi0S99h2/rSQv7
MUkucC89NQRUfSim4NQZRSFb/wCqKth6gEs1UrqyZPy2O8tY5C0rMKiuMt6f
ktgQLC68muopxAX4u5l1rqcoYOJtVdVbDRnaUm+xK5+LJLrBKomkWCvWB5uR
SKedOEJgqySity/KzMTQc1rXHt1xfvrszcXpSbL/3QELeZaeiJR4+fL06WVy
cvoctDHUyHyzt3YHw0BnvuCYlV0KXiUdNqSCxe6msxhtg3asWawMUXsEjvFL
EyFQ1EYqCbe6xDcdmFTL/O8linRoQ6X+d7FZTTNSF+OyCXhlZhh0nlxNRj56
Q74Rjt6osXyQtFi7Jtzcpr4Qel5gBQWUK9pNcrEsuWgFqKSbJXDpjGMySP01
5e3IAZC6EzBl4TxZ63AhXEhIZRVZl9QyIJ3/uqkb7hcgJ8/RJDQ0YdrlirTZ
OtvMy/BvCpjxXuG1ISe334hixkFOtUfIqmbv1nRL7m1sO3CtxiqVRvPtaOW0
0ahX3rbFUpN8IGC7NWPZ2FhNJocA1Q0tPIEGvMVBKzpwbn4aije2HIeinrSs
f8NpZf+RebPRxmOOXFwEjr3p6DxmMVxv8oZqkurX2NqPjbyUmwWjVqDlj0m3
CEvV+pOCeBzQRYnPapBKe2bPmSDUpJSLJiP6Nyhk2fjF2z5tItvUiOqg6O4z
+opsXribY0QTMfAE25xGRKtVxXH7pEEBL0wL3wkGWMqH124IL9D2vRNzoEjd
NNMyiAQMnElroNgDSLD/kQEXcH0ZfjvRQKUz83lbZgAtm41QG9wchaGR15Iz
94iL8BIFHREQohS8RllkOadalKrFEOBoldW6jFCu82m4ARfXKYGu339V898+
UpclK+Z92x6tXO2T96Wn3PePsdUd0q+U2RcseF6/xV3cFLRsdUCLgib234hG
lHW5AN6fSXcNAgHnf+cRA09FpI9gzHAixjEIBtU8k6iLBSUoeis560f6LaQn
D7Y5KYSLfKMsXnoeSJoMzCyUzdSKr/4aGh7BoL4rug5S7Is7i+IXfyeehiAr
YMHahFC+Q6bmId7qshNk+kajWeVabLhkf2H9xCxTsP5XuSTKTrXE6eXzC+ve
8GXWtXGNBlYYCLv9htkgQroiecjgea6rOt3UW1oKECXp4woawPsQbwy2CTC8
t7sHbHSo0CegOEEJXLw+1PK5qrklgzAKQs20cQfNjG01ibqbaIeOEtp88EWp
22X0uLNjrT0ftbcjftUpmz5cKZ3jOMLN/ZtozQbEgoPSrEMqt0kDYUy46lQN
8ggVGNIn9ga96Eawm1LvEtYiESA/vQbRiIoid2SAzegTVczaeP8csom4Ni5f
neUyaZfENsV3QoybwQh+y20mphVRZn5+bu5XW8zL67hyL6SlA0fVqM+e34LK
SV8Y9H7iTJF+88I8Ijtu/CWSpLApQvtUQ7y25EDAP9si8co6fIxGSjzyNMvK
Wi8ph7Xiij5OGLJn9lhvWGvOI4gU7SZ0s04CcdN2zTMSWmI+X6Pmi4xUd9wU
ZPUBBInFUNkU9pRLmwnUN2cloao94tuW/DSNfne9gKeEJwXbPg+nbKDFbAhS
4NzUK6R+ukoYBrqPYRJ/eOwYJhJB88v54eXtZ68VcD6JIaOoyqLlCLwjJ2S/
BbP7nsYgC9epVKVKZxhacL3kS0b34KySXbNSwfwT2hfU9ntHl4g2Akscony5
uZnXvcYZOeNCGAUsIYuibgdobZARu2Tff8UuWM7kbH+7D3xifPm316fYXBMz
PKRHNHvGbQ/5/U1h68kfREnlTTmOqxZzkRlyg52+g+Nj73DvL3pBvfC197tF
rhMpZoxTHp+cvkYF4SXYuMeXx6HkZr9jOq0FF18/cS7Z8d9Rz/897Pm/R8kj
P84hPfMo+Tb5LnmcfJ/8kPz4KZ/pOP8y/o3/pwN96F3Z+enl+d/EIbD/6CH2
160Pep/88OVm5Mxbn7gncMbBdBwZ7TXFiPijh9KIFMG93CQv4yITPsi8P80R
nD7P0+IAzLhG66tjm9Ail1qHFpLsRJqwydG2qbiuHVl7eGtjtBB/0bbSvK9f
iNHqqr4K2JFPb5x0Q3VIkv6aJeaaSXyVXHe+YXwnqEOcLGDxrbvQdW44XOy8
7n/bRJRtTefQ2+nIFQxsdzOLTcJexBvXxw2QEhMmII2KsV/GnAwVLtSEjUL0
E1MoK+WGWQQzCeDo6OW4JkISh0Kj9ny7FWlin3M3oK/QQwqac9ws19zGqEsz
m0O6ir6IsUEcETZHu2/ob6gzKRiz6NJF1A0CbiYJPKhBOvNkT4MXE60VhItG
YUEbvwY5St4xHE+9hMPD3eXUVJ8majdS1ZNCh1Y3Fvec9hwHhTx0dWIlUH6l
eL/YMd2yk9J+BV4LdkqKyzSLZ2yANnVr6qQbqM1A47poYO+3buv8GlP2i5Gu
SUgy7MadtLpLeb4WEsx9J08mqZuQD9wTKUAQOiexaVyv56HaGgA030X0In6F
MSi1FGqEuaDkPi4c2gGfsTFkJ8x9TE1ibF70To26dqo7pK2pOa+p9S9LgtZb
++bBeB4H22LtpM0y/0A6Z7tXM3lFG1+6Ty65LT/dJyx8B29fYXondzcKkOtW
DfE6kAH/MPgaWUPcYYYlZhQbBzlOhlMb8KKMv9Emt1r6L/L8d6BRnN/flpPO
GIfeoRXJSu6aKdJwgKsPjW5NT+K8Tpk9XxxeAQeNrHQWqTIsDgYOxog7H4tc
bk2t2/ZBtwcgNVXL2NmCTL2iuoy+jMOGgwFmfFhljekV1ZnLXc2k74w5f9FO
0nGykyklI7ZH/H2wPI4OTMut2zKIjyci0dipbLKwpVFsF5aVSM+MEKPCBwyr
xX+2m+Noe5p4fp/TEkGqg1y2FQFxWlAzOKlHE7+NW7HUuskUGS6XUeEdfH8X
CS0GYfC5tADiVBqLxZaTahkFhkmLsXV2hwVQJ9u0wsTp2r+ys8ncVeZs4YVT
T3Yd90e8zaosOsXOdkkZZdtE15exJkGFzlkcGlPRRSx1X3dryrc1WHaB+i3m
jeTG9NSZkJ0LfeA5C0jnZjFFHhXu39IiCJnEzv1CeSjJFwxfct0BxABn2AK8
dXBzo+4EUeTDr8CpDhRULsyOk4gJ9pCiWWiaAv8qR3Vhx3v5UKV6QzSFeJwt
Q6PjHZdMNfMraWyAZc3Yc4hhhcr3EG6uPdaOnNTkXhwqxyc9CoCisqVFx7VS
MDXaNUyQE2uDGTgQ21eDpUC1Nif/TrsJdFUS391BhXvQSiYYRBe+E23d13WX
/XBVKeOQRWEbNCjN5x/IMg2+TYGi5NplDmjlFhth553i04PianhPZKmtdTpB
fv3fF12v6Ma0Q8S2j4sAoOcZYd4lV6dFVOQUlTB7C0mmfoIWRdkA7ydRVL+a
299r0ui2n0xZmyInEA55eXsyt8sF7f/uPOZNfQd5xeYfZngnPU5Bei5MCLPM
lmkou+lLWnGUA6vMD6Xq302p3Ut5H2IdSMz/wsTa1VGEERtb43juuxehf2fg
RyTqgkfI50yKk7YDb3Ngt7Fvh5Tf4V30aFqFoxy3Xm5Bl+l8zjPA9EhabmiE
aM2miWsjARSULnXO9aSBmPuJ0fHwJETs+j5tNaHwN0kRuPMWht25m4PjunKh
CWQt9xPlOXgsla2QFNw18X6qux6z7QiWEN2nv15jSpHvr9nT9sgpHktHASL9
VfRvWx9Z69DJ9krdeIHbDQ2us98xAvmXJGk/tAVUtMXRd2NBErX7ynXlNmbI
42g9xSsk0oaKENw/DlsFQKH3jhS+voQt9sVqlEYJgz1AWjt39cYlsCXm3T8c
uvdq5a3gxK0v1WBtY+D6feIbnSv9//PoxtnL46eXZ385u/wbweVfvbncFeD4
gtGNwRn96fT09fHzs7+ADHl5eXr+l+Pn/6AZue5eYNil/8qE4qkC04h8479/
cMaE9K9Dv0e0BHuDNbEzf6D1w0TcUJ21inkVqm6XVq58XTMSniKpccsJbzV0
2t8MVHkXozauOkyapZaPu2e6YRsA53PDorQB91tViy6xKsn0sNN/KpLxs/I0
k0YUsyOt1JZWs10KGhILl/2LtwrMcJmoXtrRmTAaUnDBHXNWtIxB0rkHSXwJ
bfMiLyQdiRB+m5Xq1kPVn8MOcJdt/RnZpeZweqcesqrD8cGXLlSxve/20Vxu
4fdbE349CzAtUw+stz4w+9fbLkL1wpqD/doXHczmPtJyVlgDeWexMu8h3vk+
1+ZPoG/69jH9PFJAwuGarMo51gxWkkKj/hcgBT1t6wMTh39I5/GQQyx8x2V/
6UAZr0jjSAOk744Sj757iGC6nrwG+BcCc1ak9UhyxJZQmFg5ZM7hAamyZ15G
fZiaDdmiVNOR67T2NjXoP9TeTXY9Rm5s4yZq46oHOTZm3S5j1iaAd7KIktRV
rZI691tJSMAO5a/UBOEaVqQuU0pFqAsShiF3pm1vHl7dhyy0BUh8vK0h+PEC
TGDMa5CtIdAZnlZcLX2xzN5JWY6R94DmC1vKSMpxS3iICN6fPMXI2j33fN4a
lTJN1zylYDuSn7HhdMMmcdGVpTx33/xQ8haLOTGZchHSoAbsyNbmG8+CPU6c
zn25TRl50j6FnE3aJXvQ75j8UBESItSe5vBOeFAW+QJjw6OVPUuWFlHCVIt1
jrRrPCw0AP+kf4ewKhxtyIsUFmog79cpg91d14XUDrH2hm7wQ3vsPBfZPY/g
cYQ7vLpu5JrzTqWzJlCKevt7gnXdDXNkqrELXXxxPbOz3abv0sBch+Egs+oT
0Ab2AT/TXAy6Y1J/ZSuV17WDnea16NLUQ1+bUJIWXu9mGOad0vAetksl2SSE
1HdafW1k73FgjrxzwGiapQDbgQE2hEe/5kKmdE5pYYbo6xlOvkbmSdziClNI
qE1EvIm6h9TdVlC/rOuInhQq2JuYUto1VD6foGxAw1nC6o9r8EXHKfJJY26/
KnlLLGu7qdG2cXEMrAXRoe3hWnnMSXw/Bcmk63CrmpeJlDncNXOIwXhMhpy1
utBo2eL+iyzHui5nzDq9S7zaFLbpsd+QP3CITOs2qqwfPNh7nKd7oFlLahx1
mp979sL2ZMaprtKd2/Xvkmk1a8+Ci5P6EofEFgospeVzkAfejgVYsnlYcm8P
45b6QjPogumGsXTqzPyELdHscdkW55uW37EtLRq9RtNThiJImzfRW/0greji
LtWmmNeQU7+nGdRn04DOMsQ4Q4uiO0khaIB2eia+GlpbuP2+i2x/Bo9eMalT
lLZrVLbUhoPfvE/id6UmOD5tQCunc3ZH3UfEpiuVwzqvtCFcj1+7nKiTNefU
it5OxcGVs7saj80dzhu/MVYTVYBU+/1pKMYLMpheaLrWI2DvPzYpdshzxtTo
O/J79qQSvNPS19Q6PXl5gTAwtPwDX3215gTZAS9ZxJF3YHZQ8aw5vcRxAqHa
E7teqzmJPzz8garCJHEm3zrNpUalJH8x0XgDShKLXPsVx/QKMUUF741+PpWj
qUkGdoZPMH8wNe8nfTHhvgdJx2H4l1ZOKaukB8sVetdwYmabi2taERewTIvO
2lKzNmkk1lcdXN6pFZB2DvN71xBXSFg3SUWwYWv+lyDDBh4L5PaQk1M0/VdC
ly4OeMJUbMyw8ZFOKVKI3O3WytFLTEmkDMNluoUlUD/fzM/FaTWyy+cX9wzL
2NkTQFKmJjDq1GERZpqINLVZYBa81fIQmhV8qOJXSo75Vc9PX/58+Qtyi0Mg
RdTEc/JdRF0qvk1K0M3YbyrbnOxHjrxVuSkaPKZdcaLe/476/oRhDuWjh/Dn
Efz5Fv58B38ew5/v4c8P8OfHoedCBGQ8/k1/dKBvPnl58X/f7BroL8fnZ8c/
PT9NXr558dPpefLqWfLq6eXp5cWnDvRZM/rte4RJ5HHmuOXcSsctnv3o8ONH
UgxfH5+cnL38WSktZFsL5uTw3eHhJEleNabflABk8O6OXJwQXUT16BrtLZNq
w4jER7/XBBpwwTxS2N9m+itVRqAOOOtKi0OyZA93euJaU0cPk48HKSqcsenB
8eHL/KgdMsGD2MW6JOQsdVk5Pq9dLAxOeGSq7Uhse/L5J0OalIHFe6tJeHj/
XEeKcAk4cd4IgjXJCgiQ0ftz4YyhSZfyHIlZSF0BKR0UFqY+Ux8yx1ILjLBR
/AHWERAVeopLWku3GkkQ8NUwWOtotutMaqzjVJBLgnmY6hmucTd00q0kcGx7
lI1l4uN1CdKCa49L2ufFZoUpU63Ezpo+zf9OWJAVF4m7BWlyvSXfF5W/qqV2
vxbfR+IExa9ofFcypAaVnZzBabBH6B/BB1qlHVkvNlAvITdRRxTEtN/TIYOP
eK7QuuCQ9od/gN6d+/4+dmqHMSZm6kpTA3O3ETV8rdtXt0ReB8Rtu/lLlDFx
nc6dSTug2ljhebG1xS+jSCou1kJFQJN8udygs099O8vsihqLraaSvHUXqII5
cue/vg//5Y6BPiQvOxg0hBf8e+sjCxno/e/TZ/Shj9YstuHf7DS7H/5+M4pJ
6K4Zmc++3Iy8Tovs/Q05obp0pB7CUSh9JNecM7JaoCE2YpUDjmyJe27/x7XI
UHjoUJmtioB6Y/auqYWkF3lVS/1G/YZGCXltfbX4jMejrOR6cyE8DajYdNNp
Onsbck4pqfHp+HUytmmlI6f5q5aefMhjYBbSjrBD+91iZbkPvbaYWDfBBmf3
Jp5dJ5P9N0z30+caMcz++R7DfGMc58hbEmjNEGzSBOQiuGJ7ojzkOQxpUZ6j
SDNpT4MBx+gIosMOceH9DnhSXrcHNLDnJ3Tfk4x5tEIdD1yIR6sBGOrNGqTq
Km1m18Kx2w/a847z+nhDTmFDvLH4n2I3PM6EtuWTN0WqZHLZtg4H4UcxHzV7
0mInnTT0+7ET2SplJz6fvsvDB1j3EPeOBUgkWJFRET+gS0bXgkjhQ3KB31zg
Nxf4zQV+c4HfuO4UfsN8PnACH+fv9ZdoQIn2Ify1X559ufkE3xm+tfVC/ec/
cD5qWCQtef5v9m87vvli8xH/ke2cySV3OK+MkAtwrSSjmuS6N5WcuEVFN1A7
wVRy55sVbjY6fsVnRCLfuNDOgodWYuN8V7ufkxXATX/Aoh1C3mkyNY7BVq8k
Pw9159MuQGq+bZapNIzz6DlsDhqV2kmlDCvadOgmLjkz1wxOiYkl2v+NFIsO
2cRlFYPIuYuSi2tvRCAImeId4Qff4I0W7+N8WrNJ8qs/u8PhaFeLQzwbzkLs
bBcH79Kau3emVECfcxwmnaPm+BHXIc04mch4uR884NYKDx50nffMlzlciPCU
LOX6DluDAkgL2/SMGwRLIelJK8U3dC2/vO7rZs7+m51EONKaqOqYNF1ZR4eH
h9G2J/uhoMrB/5UTvF+TSndszsPHxvdDvbrOwRxYMMifYjBIcEGcHb88xrqQ
FNvTOlNwIqiyvnpN9QHOgeLJivXRHfoR+lioHa1qjdiEmV4mpTjRRyNX+iB5
bNOq//f/4qGdxudfXuhH//t/yeu2Ez+P8y83jaMjOw9Qms9evPZd8OZZNKHz
znyUd5KTH91C1AxOHxielCQe48hHj4ly+0cQymWY1jLZv87epYhgXKXLA3V3
ppRkeVuwaQiG0gceCOx7REB9oISZTU06AZlzM/jQfWD5E/+P+Qv+HUY6xOvR
0iYu8KYiGhE+f/Z0fPnTSSKPHkWCfteTD+Gj4OZTYbzrF4/G8OcZfP6mSGu+
5eTURB7N3kv4D3dRmO94lRZwNcjjR1LzA/4fjfXt4fjZ98/isfzXz344hK9/
oq/P7fBYvRX0WiSe5TfLcgbngUFC/7un+Ltn3d+J5IafpwX5ivkXLjrxWvXk
ve5r9rCSMtxtPzMnXjhNrDs1P0ne1FRO5rU0WMd/CqFIZ+yHDx9//Eg82g6z
qDJkUQyRxRz4Ne2c1AWoCT9oYnDysY+A+qKaOULaX5a+fgfCgqUOK+LqqHKb
r7KZN6qlc+t5inSnvtxzVJhxnzO4UJTD5QUmfIDJToz5qcT3xjVHcZp06ej2
3+Sg8kiADY+aalWr648eM6nayipWXHPb/gKtk4CuX3JeI6ahUa5YhWUgCQVH
ck37w5357Ky4c5xPCKEdWKVvpZ4rprv2UoApwl3UG60RWZTUoGuZY9/3cjbb
VHogDGdoWJ+sZzApKsBLVWQs3+SmWrdJhxjpLPZ2ErKnS6V8Iqq9wfu543Lq
UP6eO98Vbb2Z+sZvFEPhTvPKKOrkWKofqnvfkjmtNmCQK1o5xkaC16O7euX5
ZiVhfsI7nFQllqJQ1ZxhK0RPDAFAeMxGEBKKEHOV8PWv6+QkI6c3CgS6v/HE
OeM+ZWjJRBtqKFS5tSdReIPV1c7oTqUcrHepdZjmLbGj00Oi/e//7cEDYL8P
Hvz3/2HiE6CVI5S+oyCcySx8G19BYSp7oR0IJaOfXwR4kU3/Tasowub5ganN
yfnHW2FEMOQYhxzDkGYY21BD89p9UgUWEjVIHPxlHbBKEUSDBDgFdzh+Ltd2
rxuh2iOzyocJQ84zleptCHxeZBR4AYr1TkHmLfCatMDWzKUDEyt5iuJ85M7T
5Ro2DdgjsN9/xfbvJeIE02rkXqTFrxss2V28hcWcpyUr3Zfw0ufZSgpOw0zz
KrnOlmtkU2gMVvl0YyrsGqrRIwaxT64S938AkpJZVxBKAQA=

-->

</rfc>

