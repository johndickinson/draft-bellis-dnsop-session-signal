<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="April" day="17"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The EDNS(0) Extension Mechanism for DNS is explicitly defined to only have
“per-message” semantics.
This document defines a new Session Signaling Opcode used to communicate persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP KeepAlive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.
This document defines a new Session Signaling Opcode used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are empty.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message, following the four (empty)
data sections.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

<figure><artwork><![CDATA[




]]></artwork></figure>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.
A Session Signaling request message MUST contain exactly one Operation TLV.
Depending on the operation, the corresponding Session Signaling response
message MAY contain no Operation TLV, or it may contain a single corresponding
response Operation TLV, with the same SSOP-TYPE as in the request message.</t>

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

<t>The first TLV in a Session Signaling request message
(and its counterpart in the corresponding Session Signaling response message, if present)
is the Operation TLV.
Any subsequent TLVs after this initial Operation TLV (if present) are Modifier TLVs.</t>

<t>If a Session Signaling request is received containing an unrecognized Operation TLV
then an error response with RCODE SSOPNOTIMP (tentatively 11) is returned.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs are silently ignored.</t>

</section>
<section anchor="protocol-details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.
DNS over plain UDP is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>Session Signaling messages relate only to the specific session in which
they are being carried.  Where an application-layer middle box (e.g., a DNS proxy,
forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<section anchor="lifecycle" title="Session Lifecycle and Timers">

<t>A session begins when a client makes a new connection to a server.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

<t>Two timer values are associated with a session: the idle timeout, and the
keepalive interval. On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.</t>

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval timer,
not the idle timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the idle timeout timer remains fixed at zero, and an idle timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and response,
typically a period of a few hundred milliseconds at most.
At the client, the idle timeout timer is set to zero upon transmission of a request
and remains at zero until reception of the corresponding response.
At the server, the idle timeout timer is set to zero upon reception of a request
and remains at zero until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription active,
with no messages flowing in either direction, for far longer than the idle timeout,
and this is not an error.
This is why there are two separate timers: the idle timeout, and the keepalive interval.
Just because a session has no traffic for an extended period of time
does not automatically make that session “idle”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

<t>The first timer value, the idle timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The purpose of the idle timeout is for the server to balance its trade off between
the costs of setting up new sessions and the costs of maintaining idle sessions.
A server with abundant session capacity can offer a high idle timeout, to
permit clients to keep a speculative session open for a long time, to save the
cost of establishing a new session for future communications with that server.
A server with scarce memory resources can offer a low idle timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<t>For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

<t>For the idle timeout value, lower values result in
more frequent session teardown and re-establishment.
Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for idle sessions.</t>

<t>For the keepalive interval value, lower values result in
higher volume keepalive traffic.
Higher values of the keepalive interval reduce traffic and CPU load, but
have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the idle timeout) regardless of the level of keepalive traffic required.</t>

<t>The two timer values are independent.
The idle timeout may be lower, the same, or higher than the keepalive interval,
though in most cases the idle timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter idle timeout with a longer keepalive interval signals to the client that
it should not speculatively keep idle sessions open for very long for no reason,
but when it does have an active reason to keep a session open, it doesn’t need to
be sending an agressive level of keepalive traffic. Only when the client has
a very long-lived low-traffic operation outstanding like a Push Notification subscription,
does the keepalive interval timer come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer idle timeout with a shorter keepalive interval signals to the client
that it may speculatively keep idle sessions open for a long time, but it
should be sending a lot of keepalive traffic on those idle sessions.
This configuration is expected to be less common.</t>

<t>If, at any time during the life of the session,
the idle timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the idle timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other protocols).</t>

<t>If the client wishes to keep an idle session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

<section anchor="client-initiated-termination" title="Client-Initiated Termination">

<t>A client is NOT required to wait until the idle-timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an idle session, then the client SHOULD close that connection.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination" title="Server-Initiated Termination">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
close the session by sending a Retry Delay request message, as described in <xref target="delay"/>.</t>

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If the server handles this by simply closing connections, the likely behaviour
of clients is to detect this as a network failure, and reconnect.</t>

<t>To avoid this reconnection implosion, in this situation the server also
sends a Retry Delay request message, with an RCODE of SERVFAIL,
to inform the client of the overload situation.</t>

<t>After sending a Retry Delay request message, the server MUST NOT
send any further messages on that session.</t>

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this session,
which will arrive at the server after its Retry Delay request message has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now will
certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>In the case where some, but not all, of the existing operations on a session have become invalid
(perhaps because the server has been reconfigured and is no longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated with a flood
of simultaneous retries, it SHOULD send different RECONNECT delay values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t>Apart from the cases described above, a server MUST NOT close a session with
a client, except in extraordinary error conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so chooses.
A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the connection.</t>

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a server is low on resources it MAY simply terminate a client connection with a
TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to reconnect
immediately, putting more burden on the server. Therefore, a server SHOULD instead
choose to shed client load by sending a Retry Delay message, as described above.
Upon reception of the Termination TLV the client is expected to close the session,
and if it does not then the server will abort the session five seconds later.</t>

<figure><artwork><![CDATA[


]]></artwork></figure>

</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services,
including DNS Updates <xref target="RFC2136"/>,
DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<figure><artwork><![CDATA[


















]]></artwork></figure>

</section>
<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the Opcode field set to the Session Signaling Opcode (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are all empty.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.
If a Session Signaling message is received where any of the count fields are
not zero, then data in the corresponding section MUST be silently skipped by the
receiver (unless specified otherwise by a future update to this specification).
The skipped data is silently ignored.
Any skipped data in a Session Signaling request is discarded, and not copied
to the corresponding sections in the Session Signaling response.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    Opcode     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST BE ZERO)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST BE ZERO)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST BE ZERO)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST BE ZERO)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>In a request the DNS Header QR bit MUST be zero.
If the QR bit MUST is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one.
If the QR bit is not one the message is not a response.</t>

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use on this connection if the
initiator has used it in a request for which it has not yet received a
response, or if if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>The DNS Header Opcode field holds the Session Signaling Opcode value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason for termination).</t>

<t>The standard twelve-octet DNS message header and the four (usually) empty sections
are followed by at most one Session Signaling Operation TLV.
The (optional) Operation TLV may be followed by one or more Modifier TLVs, such as
the Retry Delay TLV (0), which, in error responses, indicates the time interval
during which the client SHOULD NOT re-attempt a failed operation.</t>

<t>Future specifications may define additional Modifier TLVs.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.
In all cases a Session Signaling request message MUST contain exactly one Operation TLV,
indicating the operation to be performed.
In some cases a Session Signaling response message MAY contain no Operation TLV,
because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in question.
The specification for each Session Signaling operation type determines whether
a response for that operation type is required to carry the Operation TLV.</t>

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11).
The response MUST NOT contain an Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal error
and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option used for security purposes
<xref target="RFC7830"/> is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the future,
an explicit Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to carry
a whole series of DNS messages of different kinds, including Session Signaling messages,
and other DNS message types like Query <xref target="RFC1034"/><xref target="RFC1035"/> and Update <xref target="RFC2136"/>,
and those messages can carry EDNS(0) and TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<figure><artwork><![CDATA[


]]></artwork></figure>

</section>
<section anchor="message-handling" title="Message Handling">

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.
The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1).</t>

<t>Every Session Signaling request message (QR=0) MUST elicit a response (QR=1), which
MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.
Session Signaling request messages sent by the client elicit a response from the server, and
Session Signaling request messages sent by the server elicit a response from the client.
With most TCP implementations,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software)
and the DNS Session Signaling response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID.
In effect, the 16-bit MESSAGE ID combined with the identity of the initiator
(client or server) serves as a 17-bit unique identifier for a particular operation
on a session.</t>

<t>An initiator MUST NOT reuse a MESSAGE ID that is already in use for an outstanding
request, unless specified otherwise by the relevant specification for the
Session Signaling operation in question.
At the very least, this means that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session
while the initiator is waiting for a response to a previous request on that session,
unless specified otherwise by the relevant specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation Type Code not supported</c>
</texttable>

</section>
<section anchor="tlv-format" title="TLV Format">

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           SSOP-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          SSOP-LENGTH                          |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           SSOP-DATA                           /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SSOP-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SSOP-LENGTH:'>
  A 16 bit field in network order giving the size in octets of
SSOP-DATA.</t>
  <t hangText='SSOP-DATA:'>
  Type-code specific.</t>
</list></t>

<t>Where domain names appear within SSOP-DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (1) performs three functions.
When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the idle timeout and
keepalive interval should be from this point forward in the session.</t>

<t>Once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new idle timeout and
keepalive interval to use from this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both idle timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The SSOP-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    IDLE TIMEOUT (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='IDLE TIMEOUT:'>
  the idle timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an idle session.
If the client does not gracefully close an idle session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the idle timeout for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the idle timeout and keepalive interval
contain the client’s requested values.
In a server response to a client-initiated message,
the idle timeout and keepalive interval
contain the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the idle timeout and keepalive interval
unilaterally inform the client of the new values from this point forward in this session.
The client MUST generate a response to the server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the server-initiated Session
Signaling Keepalive message, and the response message MUST NOT contain any Operation TLV.</t>

<t>It may be appropriate for clients and servers to select different keepalive interval values
depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal network,
with no intervening NAT gateways or firewalls, can impose a higher keepalive interval,
because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, where
it is likely there will be a NAT gateway on the path, may impose a lower keepalive interval,
to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15 minutes.
In other environments it is RECOMMENDED that clients request, and servers grant,
a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Similarly, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an idle timeout value less than ten seconds.
If a client receives an Keepalive message specifying an idle timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling request
to the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifefime of a session,
the server can adapt its responses to better fit the client’s needs.</t>

<t>The Keepalive TLV (1) has similar intent to the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message on a session
once bi-directional Session Signaling support has been confirmed.
Once bi-directional Session Signaling support has been confirmed, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP KeepAlive option, this is an error and the receiver of the
EDNS(0) TCP KeepAlive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<figure><artwork><![CDATA[






]]></artwork></figure>

</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (0) is used by a server to request that a client
close the session, and not to reconnect for the indicated time interval.
It is also used as a modifier on error responses, to indicate how long the
client should wait before retrying that particular operation.</t>

<t>The SSOP-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server MAY
append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>When sent in a Session Signaling request message, from server to client, the Retry Delay TLV (0)
is considered an Operation TLV. It applies to the session as a whole,
and the client MUST close the session, as described previously.
The RCODE MUST indicate the reason for the termination.
RCODE NOERROR indicates a routine shutdown.
RCODE SERVFAIL indicates that the server is overloaded due to resource exhaustion.
RCODE REFUSED indicates that the server has been reconfigured and is no longer
able to perform one or more of the functions currently being performed on this session
(for example, a DNS Push Notification server could be reconfigured such that
is is no longer accepting DNS Push Notification requests for one or more of
the currently subscribed names).</t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling Opcode Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS Opcodes Registry for the Session Signaling Opcode.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>SSOP-RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>SSOP-KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 65535</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
MNzIPAAGTpwfZ5N37r8ATHCfFpq7AAA=

-->

</rfc>

