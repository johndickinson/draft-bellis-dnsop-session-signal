<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that has not yet been deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>
and Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifiying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-response-additional-tlv" title="Retry Delay TLV used as an Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST forcibly abort the connection immediately.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHuIZVoAA+V9+3obR5bf//UUHeoPk1oAJiVbtjVfvgwtUjZ3dBuSmtnZ
bJKvATTItoBubHeDFEbSu+RZ8mQ516pTfQEp2TM72XijjAQ0quty6lx/55zx
eOyavFlmT5OTVxfJRZM22WKzTF6vsypt8rKo3bycFekKHphX6aIZ51mzGM+L
ulyP66yu4ZFxnV8V6XJ8+K2bw8+fJo8Oj74bHx2NHx+6fF09TZpqUzePDg9/
OHzk0ipLnyZnRZNVRda42yt68es3yZ/L6l1eXCU/VeVm7d7dhofGJ/hiN0ub
p0ndzN1mja+pnybnz58l33335MmI/nZ0+Phb52blHEZ5mmxglt+7df7UJck4
acoZ/W+9XVXZoua/l1VD/3DpprkuK3oS/iRJXuDgk+THbLnMa/qId+A83doP
y+oqzDK52NZNtqqTZ7BpMHS+WY3gy9mEHk2n0yq7gacvntG/a3h1Buv54dvD
5Nl1WsEYsPn4GX09y5stvC6b35blPHkG/+KPyznM4tlx8sM3h08ey0eboqng
4bcXx/TB+ros4KF/OkqewNjfPHqcHMHW01fZKs2XT5Mq3f4+r2cTmH685IsJ
zCWrr/MqM4u+aDYwv/gbWvnxer3MwhJ1SUfw0SIv8iZLXpTl2qzn2QaoqsmL
srWYbw+PvrlrMd8cfp/88N03yeNHh9/ZxcxkWr9PcTaTWbmK1/TPk+QknwFl
1WVhFvXP5XXR+oLWdAGzm2+KcKqX2ey6KJflVZ7V0UnKk3bp9Pdx8jK9Sufp
MiuSZxksJ5OPX79flNU8uZjlWTHLkjdp9c7sDX9rNub1v3yTfPPTcWtfcFvn
yR+AxOe0Ur8Pv6Tz39c8pe4mXPRvwkVapf+pNqGGBQ3vwvEEZlXAYs0WHONl
Lgv7BW8BTL2GycwyO37KT09W9PTvr/DT7nsuJ8mbTQ0sqsrNmy7LVfwxvedt
kS4W+TKHj+fRLdrbs4wAZpNfXZuNefUsefTdk8Pv77o2Pxz9kHz/5Lvk6PHj
iAesZSa/n6bF1S+0BpcXsOAVcP2bDE/xVXq1zE6O+UCbtLrCaV03zfrp11/f
3t5OauILev+Qm3y9TuGC118X+Mt5tky32TydvfuaR2Apc/nsTfImq+hNSAHr
qpwukW3O0k0NpzrdwibCzNIZSp9kmjW3GRARTearGs7rqqzy5nqVpMU8OeF3
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
HJdi7MDC2DSyE+bOkCaPNC96p0Z9ENU50tbbnNfb+pcloeatffNgvI6DabGu
0maZvyMNtN3PlnykxJukfoVc4VDQt09Y+C7HvmbvTu4+qA65bhkNrxEZkA7D
m5FRxB08WH5G8W2Q6mRUtYEpKgYabSKqtfCiqEAHwsQJ722p6Yzh6J1dkeTk
roQT7Ybey+OHRrdmKfFhp6yfrxGvgANKVlaLjBkWDgPHZISfj1Mut6aWaPvY
2wOQ0qp13WyFol7BXUZfxiHFwXAyPqySx/Ti6czlrva7Xxph1vSeOFPIVEsR
SyP+PtgZRwemSdFtGcTDU5FY7EI2ScnSWrMLiEqky0CISOEDhpXiP9vtRLSh
Rzy/LykiLwUwLtuCXlwU1D5LSq7Eb+PmFaTVySxdXS6j2jL4/i4GWcy/4GFp
QbOp+hOLJScFIQoMihZj69oOC6Den2mFecS1f2Vnk7kPx9nCC5+e1DTuKHeb
VVl0ip3tksKztu2oL/xLgghdsTg0ZmaL2Om+7tZUKGuwCgF1qMsbySfpKbsg
Oxd6YXPmjM7NIn08Htu/pUUQMomd+4XyTtIeGFTkugOIuc0gBXjr4OZG9dyj
OIdfgVMdJ6hUmFom8RHsukOz0AQB/lWO6sCO9/KhSjGDaArxOFsGJcc7Lmle
5ldSCh4rd7GfEIMIle+62lx7BBy5pMmZOFRxTqq6A0VlS4tZa+UvamxrmCAn
1sYycB62nwarXWr5Sf6d1l/vqhy+Hr6K66B1TDBkLnwn2rqv6i774cJJxv2K
4jNoSJrePpCiGTyZAjzJtS8X0Mottg7OOwWABwXQ8J7IUlvrdILH+lsIo9d0
B9ohXtvLQsDE84zw45L30iITcmpKmLyF7VLLvkUjNkD7WTTSr5j299sz2uhn
08qmyAlEQ17ankTmckG64u603k19B8HEBhsmPCc9bjx6LkwIM7aWaagV6esw
cZQCrJP5UC763bTXvWb3IT+r3X0O+XX1CGGWRt+P1fyhH5E4Cl4ZbySIo7QD
OHNgO7F/hVTO4X3xOFQFiBy3Xm6Bjel8zjPA5EESGKG9WzpkuUxcO1Cv+G2p
va0HCbTaT2uO30Vc3y7285YWilET24crbdHMnas3OK6T3vPlbdsfRCkBHupk
K/wE/0m8uepNx8Q0Qg1E1+XP1LretxDs6eziFC6lowAp/iIKs63Zq7XRZHul
lrmg4YYG19nvGIEcPpKiHjqfKRji6NuxAH3arbO6ghbzwXG0nlINEghDzQVu
GUeVAt7PuysKX03BFqtivUeDeEGBJzWbGxfjEtgY8v4Yjqx7PfBW4NbWuWmg
sDH++z4Bh879/v883HD26vjZ5dmfzi7/Qqjz128vd0UcfsNww+CM/nB6+ub4
xdmfQES8ujw9/9Pxi7/TjFx3LzAO0n9lQkFPQVFEzuq/fbTERNyvQ0s7NN16
oyexd32gHcFEPEGdtYo9FCpBl1aufFUzUJ0CnXEbBK/mh2YePcl7JtVWrNC4
Ei4pjlr+7J6ZeW182l05Bl2q07Pv4Yv/UGfvZ+UPP42Ofkcqpa3xZUvgN8Tf
L/sXb9WS4XpFvUSgM2HUoeBvO4akqAuDNPC5Z3uRF5JnQ5C4zUqV2aEawWEp
3NpXf0amndnl3jmElOBwDvClC7VO77sPNJdb+P3WRCjPAq7JVJjqrSLLTue2
l01dk+aEvvJl7LK5D0acFdbG3Fn+yrtNd77PtTkGaIC+yUg/1xJUbaD3VTnH
yrJKG2gX//zsTaJ4P+tGEi94yH/xGD0spcbFYelAGeBH45SM2vj2KPFwtUeI
PutJBIB/IZJlRXqIZBNsCbaIZS/m7DOXum3mZTm189uQ8UdVArnyZ2/p+/5D
7d1k12NVxkZlokalOmFj69Htsh5t9nIn7SZJXdWq5HK/lYTs4VB+SY0CrqFE
CizlIISiFmEY8gjansrh1X1QPFs9w4ekGsLrLsDmxEQA2RpCaeFpxTW1F8vs
vdSUGHknYr6wFXSkaLPETIjg/clT4Kjd6MsnelFxzHTNU4o6d0+zhvPomsRF
V5aStH3HNUnIK+bEZMpFyBsasOxam29MeXucOJ37cpsyckZ9DjmbfEJ2Qt8x
+aEKGkSoPR2pnfCgLHKnxaZAKy2UbB+ihKmWfxxpq2pYaEDKSZcHYVU42pDb
JizUYMSvU0aHu67Pph137I1+4If22Hkusnse5OIIqHd13cg1552ixvJKKeow
74lgdTfMkfHEXmhxfvXMzra4vUuVch2Gg8yqT0AbZAT8LOrkLsVDtlKfO9HM
C0kE0aWpk7s20Rgtz91Nycs7BcQ9zpUqgWk39J7T6utdeY8Dc+QOA0bTLAUJ
DgywIQA3tzznc0oLM8RAz/NNwTyJGyFhzgU1E4g3MeoeLzBZ1nVETwp1zk1Y
Ju2aDl9OUDYm4Cxh9YcG+KLjFPmkMWldlbwlFkrd1GhtuDiM1EKx0PZwiTbm
JL7qvqSedbhVzctEyhxu/jfEYDxsQc5anVq0bHHIRbZcXZczZp3eB11tCttp
1W/I7zjKpHUDVdYPHuw9ztM91DQftXI6HZc9e2ELL+PcUGkJ7Pp3yfS3tGfB
xTF9ZT1iCwXWgfJJuwNvx+oh2Twsubdxakt9oRl08WbDcDN1L37Glmi6tWyL
852S79iWFo1eow0pQxHqyxvNra6BVnRxa1xTicou/o6WQV9MAzrLECYMjWzu
JIWgAdrpmRBlaIDg9vsusv0ZPHrFpE6BTm+ZmXKbkdpw8Kv3STyh1CrF4+y1
FjenQ9R9RGx6FzmsM0obwhXetReGuj1zzkW4o1Pq55aSyaOimAoZar88DZVg
QQDT20yfbAS0/fsmxSZqztgZfed9z7ZFggBa+mpQpyevLhAYhRlbgam+XnM6
6YDTKmLHOzAvqHXWnIzhON1OjYldr9UMvu8ffU+1TpI4722d5lJdUVKlmGK8
9SRpOK79imN6hdihgodGt5sK0dSkzjrDJJg5mBLqk74IbN+DpOAwIErrgZRV
0oNuCu1NOI2xzcI1CYdLL6ZFZ22pWZv0muorNi3v1Lo+O4f5cpBUN0lD0FJr
/pdgpQYeCwT0iJMzNP1VAoUuDi8SdnQoRNf4KKOUz0PWdWuF5CUm6FG+3TLd
wsZQS9fMz8xpnazLFxf3jILYtRAkUGYkMOLUYYVfmoj0QFlgTrhV4RC6FDyd
4jRKjvlVL05f/XT5M3KDQyA1VLNzckxETQ2+SUpQvNi7KZue7EdeulW5KRqE
7O4Ky/T+d9T3JwxzKB89gj+P4c838Odb+PME/nwHf76HPz8MPRcCDuPxr/qj
A3392cuL//t610B/Oj4/O/7xxWny6u3LH0/Pk9fPk9fPLk8vLz53oC+a0a/f
I0ypjvOoLWdWOm7x5MeHnz6R1vfm+OTk7NVPSmkh91gQHIfvDw8nSfK6Me2J
BG6CN3nk4vTgIqqU1mgrklT7CyQ+2LymgL0Lto/C4jbTX6hOADVMWVdatpDF
drjTE9eaOrqPfPhFUdGMzQ5eDV/0Ro2MCR7ELkYmEV6pGMrhcG16YJCxI1N7
RkLJky8/GVKTDCzcm0QSN++f60jxIgEZzRtBICFZAYqT/p8LZww9nZTnSGRB
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
rhL3fwFfK6kfIUgBAA==

-->

</rfc>

