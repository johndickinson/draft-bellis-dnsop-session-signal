<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (<xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only response-requiring
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and forcibly abort the connection immediately.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (<xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a request message is unsuccessful for some reason, the responder
returns an error code to the initiator (for acknowledged request messages)
or aborts the connection (for unacknowledged request messages).</t>

<t>In the case of a server returning an error code to a client, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive request message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive request message MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST be
sent as an unacknowledged request, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive request message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as a request message Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay request message to a server.
If a server receives a Retry Delay request message, this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the initator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAKiYnFoAA+W9+3obR5Iv+H8+RS31h0kNAFOSLdvqb79tWqJsTuvWJGV3
z57d8xWAAlFtoApTVSAFS3qX8yznyTaumZF1ASnZ7dM7RzOakYFCVmZkZGRc
fhExHo9dkzer7Eny7NVFctGkTbbYrpLXm6xKm7wsajcvZ0W6hgfmVbpoxnnW
LMbzoi434zqra3hkXOdXRboaHz92c/j5k+Th8YNvxw/GDx+7fFM9SZpqWzcP
j4+/O37o0ipLnyRnRZNVRda4myt67+s3yc9l9UteXCU/VOV24365CQ+Nn+F7
3SxtniR1M3fbDb6lfpKcP3+afPPN48cj+teD40dfOzcr5zDKk2QLk/zWbfIn
LknGSVPO6P/Xu3WVLWr+d1k19B8u3TbLsqIn4W+S5AUOPkm+z1arvKaPmADn
6c5+WFZXYZbJxa5usnWdPAWawdD5dj2CL2cTejSdTqvsGp6+eEr/XcOrM1jP
d18fJ0+XaQVjAO3xM/p6ljc7eF02vynLefIU/os/Lucwi6cnyXdfHT9+JB9t
i6aCh99enNAHm2VZwEP/9iB5DGN/9fBR8gBIT19l6zRfPUmqdPfnvJ5NYPrx
ki8mMJesXuZVZhZ90WxhfvE3tPKTzWaVhSXqkh7AR4u8yJsseVGWG7Oep1tg
qiYvytZivj5+8NVti/nq+Nvku2++Sh49PP7GLmYm0/pzirOZzMp1vKZ/nyTP
8hlwVl0WZlH/Xi6L1he0pguY3XxbhF29zGbLolyVV3lWRzspT9ql07/Hycv0
Kp2nq6xInmawnEw+fv1uUVbz5GKWZ8UsS96k1S+GNvytIczrv32VfPXDSYsu
SNZ58hdg8Tmt1NPhH+n8zzVPqUuEi34iXKRV+l+KCDUsaJgKl5PkRbaOKHAJ
44TPaPHfg4RalGVD53i7Ana9itj7exCLIC6nZWXZ+KfL5PjrR8cP+tlYprcG
0VEWf15sr7Y9nArTe7OtQbJVuZ1huY4/pkm+LdLFIl/l8PE8mt3BgZUfQP/8
ammm+epp8vCbx8ff3nbavnvwXfLt42+SB48eRaJjIzP58zQtrv5Ba3B5AZu2
hrviOsPNf5VerbJnJ8wHTVpd4bSWTbN58uWXNzc3k5rEiR5bFEJfblKQC/WX
Bf5ynq3SXTZPZ798ySPw3XT59E3yJqvoTcg4m6qcrlDaztJtDZs43QERYWbp
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
PFgBAA==

-->

</rfc>

