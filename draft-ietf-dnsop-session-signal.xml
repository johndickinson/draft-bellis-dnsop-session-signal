<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-12" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes packets in a particular TCP connection
to be sent to an anycast server instance that does not know about the
connection, the normal keepalive and TCP connection timeout process will allow
for recovery. If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAL42WlsAA+2963YbR5Yu+D+eIof6YVINwKQky7Zq9ZqmJMpml25FUnZV
9+nplQASRFpAJjozIQola615hXmD8yznUeZJZl8jduQFouQqT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefryMrls0iZbbFfJq01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjU/uuTl8/VFy7/jku/G343sPXb6pHiVN
ta2be8fH3x/fc2mVpY+S86LJqiJr3M01vffV6+TnsnqbF9fJD1W53bi3N+Gh
8VN8r5ulzaOkbuZuu8G31I+Sk+P734ySb799+NC5WTmHbz9KtjC579wmf+SS
ZJw05Yz+W+/WVbao+eeyaugfLt02y7KiJ+FvkuQFDHoxSR5nq1Ve06944Rfp
zv6yrK7D7JLLXd1k6zp5AnsFQ+fb9Qg+nE3o0XQ6rbJ38PTlE/p3Da/OYB3f
f3OcPFmmFYwBe46/o49nebOD12Xzm7KcJ0/gX/zrcg6zeHKafP/g+OF9+dW2
aCp4+M3lKf1isywLeOifTpLDh98cHyUP7t2HAzk+pg+zdZqvHiVVuvuXvJ5N
YAHxoi8nMJusXuZVZpZ92WxhhvEntPbTzWaVhUXqol4VmXz0Oq3eJj+nO7Oo
J1ugqCYvytaKvjk+efDJFT04/u4o+f77h+OT45NoRTOZ27+k+N7JrFzHC/vX
SfI0nwFh1WVhVvav5bJofUALu4T5zbdFONyrbLYsylV5nWd1dKDypF0//TxO
XqTX6TxdZUXyJIMFZfLrV+8XZTVPLmd5Vsx4h8zu8Kdma179+UHy4IfT1s4U
eZPNkz8Cpc9ppX4ffknn/1LzlLqbcNm/CZdplf632oQaFjS8C1eT5Hm2jnbg
CsYJv6PFPwYGtSjLhq7zdgUEex3R+GPgisAtp2VlCfmnq+T4m/vHJ/2ELNNb
Awcpi39ZbK+3PZQK03u9rYGxVbmdYbmOf02TfFOki0W+yuHX82h2BweWjcD+
59dLM82XT5J73z48/u6T9+37k++Pku8efjs+uX8/um8bmcu/TNPi+hdahcsL
OLY1CIt3GR7/y/R6lT09ZUpo0uoaJ7Zsms2jr7++ubmZ1MRV9OIiL/p6kwJv
qL8u8JvzbJXusnk6e/s1j8DC6erJ6+R1VtGbkHQ2VTldIdudpdsajnG6g22E
maUzFFrJNGtuMqA+msxXdXK6ui6rvFmuk7SYJ0/5Hcnpkz8yPXtBsJ/5DXBL
FXrH34zh/+4dOzcej+GSwKnAdJy7WuZ1AlJ0u4a7kMyzRV5kdZImRXZDQvfV
6yevnp4lsLYhGZwcPr18dTRx8P+BjOo6vYYBYPPX2yIHuZglZXj0BpaZFwnu
aA6SqWhcrQOKvK5HybZGWdvsNtkYLul1sxy/S1fbLDm8ev7TEYjLoknfT2Di
QFYJ/ApmW2Uy83nSLNMmgWOAWeiQcEzrrNw29cjBIazzgiYzot2Gq17tNnQs
m3SOYpp/79JkUcFe34DkT3CHZHjch+w9zJzmCjIcRkjhsGm//FrCiietDRb9
ILl49oRUBKQNfq/Z82WWzkH2lhu8GTSdKsP7TjcluVnms2WyTGHUfLHIKhxW
9h1WDEtv8lk9SZLhF6NWgi+uMloWv1w2a4TU+y6nGeF8rrf5nIgadmhWFkXG
NFxlYyBt3qvwBV7CGlhyWuT1mnYLfpyv8EM9jXwO26VHMmF6XOdz+K1zd5Cx
V8Aj6S1InRmQA7x8AYpaWtQbUGJqT4xls4RtghMvkjdPX+MxTTN8Uw6HmqVI
RatdUm+yWb7Is/nI8eGla5DGIx7gHXwfb++HD/8bbAweyMeP8g/cJPgHXUn/
6PNL+PR/x0+/++a7jx8n7nILZ2GmNoO5lHgqhsZHCbDW6/EKeNDckzkNjPMH
jl7hoWaFE8JfZrxzflj8Lc7B3668wcXCpkyzAk6wQTpcpu+AVsLmO7oJOJ8M
6HIK+uESSBxpGi4BvL6uyxkxabqU8NayzswlrHFhQGPhoM4L/mWdA/fh68zz
SFd1CUT8DigPZldu6VrU2w1OHUasYOfGQGUNv00XMeHTzd7DJuECz2CFh6Ab
nuntSl5EdIQbwCfz8LvvT+Bk4M3Z+80qB4Gy2jl//0ugVDh22o4DOISxvPDA
Xo6flzkQob4S79IUOTJx66Z0bDMksH8roKMGRvRbM66AP+M6/F4mh3Bifiyk
pj9m2SbF44YrTHSsNHMPaOYID1gvNKxhBeMyDePDa3jtHHgdLEMea6p8xrZO
vt6UIk7sG/2ylKSSFQgopI7O3vO68DZOEvfM3oZUHkaCKUDDSKtpDvRX5bCV
IERhFnAl4anZKkduAtObrZBgUssUphkJPJpDGI7Po85gcjpl3pYaR8YlbuDn
jKjmv7Ygv7OauTiM3KR0qK3vTW4rtuCWg1A6/Perx6cn/zFK8DKSKgDzeXg0
2ifUWuIMJYwQx28SbUCwsF4c6LZCrneZwETpTHHohpijF4Yjp/McEoLJLYSg
XM4wrBeAyLFoO4CO8BUgVcpqR1uJv8mRnNa8z7grMDfYyIl7tq2IWdNYazBZ
p0Fkw67hW/ELuCLm17M0HHWWsBLHB2bOxR1++MAf4b1icViDEQ1yGwloUYGG
isQIlOzHN4zUybC0Yzg2nBgsCIwApUORvUygE5qKfwaUuNW7bDzdAR2IxIbD
wrFGyXTb0IsX5bZiZTYBEbSaw4z/9PTJqzcvr0bJ6Uv54eWl/uaCfjii/cWT
hVP8a1aVNI10NgMDhGUaDJ1XDv7Nc5uzeGU2QV/GK4yUBgfBswZdb4usJW1S
JFG8V0R/5aBn5TDQKhwQnJsQ5RGx/M0G7jPTGa4TLzeRYWb3V7Zl4n4G6QbH
U29YtWXa3wCXgjUCla52f0U5XpYrufnEvHENyJXFp0LvqrJZeV3kf2Ueg6TA
RwhEDTfF3eRAgspaC/8MrZpVAz8JBzx/W7wtypuI+ujRdNGQXjG0LpCFzLrz
txmdBtLattkikxA1i/cFeSGtiiYGr6GR0imYR83O2fWM4DagdscXUmYZLUCZ
HnI4oVvWAVF8Im9WAVyzrgJM4uJiPE2FtvF55c9542CgNeodKkHptfQbYG9w
Ms0kOUtB2OO5s5JI7AG+pvcTp583RPDA5VUXTJEJe22V+DdMGRcKdi8oksCt
KprfqkyRfvhWwIauUVuAz1e7EaoVOIsVSFfY3vRdmc/RoigWIHlVF+ozRJCR
FLvkBnbOkVJT4Lr5yhtODTOgT9uqh27WtpgxNcAhTdxpcl3CGEQFTPlViTuT
0yHT5Oic/Avg4byut5mhZTfNFsAd4RLIq0aoPoDM3q7SaoWKuKwM2TapwtPy
PRwXfDcHDgJH/zNO2H95jcY/+rJUkApHpSuF9xVnlpACnIEovEo2dbadl+OL
i5HzeieuAE7mGlTICtb6V9LNrMZlpf0UyXbFekm2WjnQV4mfe70BaRF2ZsYc
Aw8ZP7/Ja+I9eOmBUSUZ7RwwLDAYgB85nr/KTtxGOPgpSYVo2sJ6I9HAtlg8
oGwIXBLmFyxikmV5Q0+6YDHJg3yKuLoZ8gIw8a+Rf+cLGALXklZAAqj6IjFX
qAvC4/4ciIzwgpoNdUi6GSlZcKFA26DZ4tfwdOzRGbo15+WUedLyFrBc9Ech
jaQ16RB6i+G9Ll0BsdcyVlYLZ7VK2bis8AxxO9ScwHNqylm5mji647gAPxtc
hNFwiPnjNUc+WWeo9DaZM7xw5LXO7vik/TXpW2QQFRlxuAXotaqzd0h0Lasm
Itvz1yoh4DDo1m0q1GInseKK+ja+Jt7ceo3KyJ7R8Wt1dr0WAYl8DVUXT12o
zJQ3TGMzMAIqIPFgP4R9qzJQFepggJutq5NftmI7wMzXQElhl/01TC7IveKJ
30p0VTz84EjnPDI87MAYQwrFu7ZI89WWd5h4jn8P0O7du3fRrr6AieYVqWZ1
8jwtrreoANG1epsBzwTdok4OXry5vDoY8X+Tl6/o54uzP705vzh7ij9f/nj6
/Ln/gZ9w8I9Xb57L5/hT+OaTVy9enL18yl+G3yatX704/csB78UB3PfzVy9P
nx/wZli9F4mHbym50UAtQcJMazD66lmVT5lKH8ORnjwQG/Heycn33pT/7uTb
B/APtLGZXMki4X/CTu4cqjNpRfJjhVS7yRswakcozeolUj5e7wlu4xXpzuhv
3iUf7jThXx+dOwCCOFAdkFh5BoTZL6xUwYYBkoNwWw/oOyhDp/kcjksEUUJK
5iGctJDCEXlV0/UIGXHF2hA+U9uH6iPxjKEpCgIYxUwOXHxHe5AjawDtbOTU
1Gc/DhuYxEjcLX0k6o7pd5GwE6f4L2DP5IeRRYtdchBoH872feMFrT993hHS
xt6jeLpGOnfR3WaFx5qitC2PnBsnVzx2sFHZ+SqiDXdCJBi8MxhvovmvxFx0
ifXhHOaTbAJSOC+2uOXo5AIpDfQCZ+s9UqCPwz2ujyYwh7Ocfm+0STMjlN1q
oocliWJNUpQlULwrjaeesJFCebBNKzg/MnNRQ/SXJJ3CRk0C4aHMJt1sxYJo
mW/0vTpqgspydSDTdq8uz/Gjd1kxpg9AwgF5HcAETxMk/+TSTMb7nZCkZNub
G/SYzjdljnyImJWRvM4cAB4wWdDJuzxtH39kBfLxx7sqTD03CjJZgymOO8Yv
jFkE8CqjbcoLh4MBm0Htq47VjuB8jO8FX4X+jVCDG31taAk1dCHg7q12yOcN
LaDwRb/KfCK3pu8hFHfAC/lBuj6wqagHAL3/LOwgb0+7hs+B4bLX5rpKZ8iP
QNk+YD8hXzJ00rACgdeYnv1PMMPyxQ5ofkG/zEnNBjo7gp1AGcn8IqWteHb+
cuRKMZ1A3rzDKJs4bNlZq6pBPRmeasWiqo5vNAsAWbRZgGM/mZdu+KC/TrQ2
fVhcVnjPV/AbFANMNcQKRmjQ0AfMTbfAHNGXiwv7qk6uzl+cjX8+Pb8Sooy+
G1384P2afPo8YGdmObHkKWhOg6cBe3txedWzt/1be86zeHz5NLksUYeqk9PX
5zwNtGFmyzx7xwdXZ00jXmd3+eo/n5+//OHsQrVj9T9M2UmN+yfPJjWNG4kx
XvSBYdh1uWhuUAaRopyCwYx3m7wV9HWQsDdpTnFMuKLlukXoolzVsbCkHe9/
C0VG9PBj+nHC2HiSX9WduZiXgCIkg5SwHNJORC3D5QUljTQ0HJ5YLb/ABc8c
Ps4CZjutcSlIKGBVoDRGwkp7NUg4z21hrRGvabsqu06rOTmM4eu82puUN8Hv
C01Xj0Jk67beirINs6qz1qnxslAMYaICLsRlLLC8oxE2Ijkk3hWI8rMmf+TI
oPTbODBarPCC7HTP87cZWpEjI/F0Ewcm3XkLP//Fs+5uQnfA7sThDno7KPaK
irWIFCvGN84feDiYRnM62qyqyqpmXhCou8opckPOMbJt4UzxYrGsWORVTV4p
E59h+VqhES5BhQUY4zC0EkZWvMurslgT//MhnwydMWivwH2n+eg1eoceEQme
oGyq8wq9AiP2dTnz5nlJ/ju1WGCfFqv0Rl+ra/LG4w53w7Vn7pcOSvh2NTe7
ZdwR6ELDC4XiXdwEpHn1bYWMU2TssUAnJkvkYLYhLxJuRRd91qx2Y39+GPfJ
kLGfL3ja81LGYUvCLhjuIKkPduEDFDFy02yHcya3NUfV2N7XVWbvkdGEHelZ
eBwpYGWmZp4P+h16NNEN6MkLD5XdnuS0cweLFIwe/oy5iEZOlY6KNh1nBbm2
YZ2waXDCYQAzONuSsZxrq8D5ep3NkWevdqBL/gB3u+B3sg+1d+Caolmomsyz
BTPhQFdkUl6HcbqPWP8t7uU6hSMKj8F8HcYRKGwCtN7kKzmXRf4ePUTsI46X
1fa9wDRUQRDDuMoWFb6IddFtU2JqyoxIGo+Tv8h+QJy3q9M1i6x8hsYvxh5m
7BmKYpNLdhK2Iv41OwqUz/cNdYBnz3ocao93E/R0pfhFtitTYxz5QHrCx7DI
r7eVevNhw9Fjk87nGDMg8kGlhdxBxXY9RTsTWVxwwOkIaYhawO7AIfv1w3R7
l5/z3XPiXw5P7p/A5LetDza5bjD9pn9xyjytNVs0IubRBXDxEx1xNRfz+N63
3937+PETu3KoEUr/bTHq4bkabHWYn2PF+LfunV/dIWgrvyCvkXFYd8BNw1Ew
NI8XhOxveh4oGNRJdFdtQTMJXoIH3kvALoOj/jNhVVViCKARtzaAWHHYHp1l
fYtNCN9q7wIGYpE10GagSdDzAifiQbzDq5ynV3q5QVyjLlfvsmjHAw0eZmj8
n7cCosFD5r9uFsXSsEA7mJi131ygo3hkJDTy35B0wNgxSh1xyzs2sxs4qqxW
qUcRVzZF2T01zcTU7+UMbLxgRAWDKjNkNf6Z2t4PFCAmnNG+hXjaGNJxa/SG
yjuJnFiqrOAIttfL4EKnKBQnRKDrdLmrkUPKRXXGP1oKcw8vHHE8gNNUQgIC
vhTEKTsNjfFEYhxYNHsVcgwbNJTw1ZQbdvGRp70WRzQHmOxSyfkcmRhT3Ek2
Qlsbh0xGbyHLpDKrSUlCvRMFCMeMnZEftFcSxHrrk0r0HlnjmIP7GoGReCOy
dUp6ElUBdDdcsI9uxo6HKhsbj83ImLdfUbrQdi1GoddRdKohDhyTUp28y8uV
RhFInN6kuxGPcKNE2bnFaAqS5qURsMq7hMVJCOsgWbwsb0iVw6WLY20DKitI
ZFAmZ+WGRWWP9U3pEW9DRIl2CJQQTGfQUCJ9jU2uP7h4ylvyk7HcHMNwKnNr
1TZY+wrDExWh2+rlpevNEjQGmXE0hicOmLeRXzD81kud19t6mbxET433L4DN
CZOQ+CCInPPx04mWR9Tz8Qa+geLnaV4zbSQXmHjKHvYFekE+NcIa/kPZUDsc
h9zqZH9JJNwsoxV/5eSeZVlSeBz3hpJt2JDNq2Sa1nk9QcdtHYXJQh4bu2Bo
HPEYYgIXatDkDVrli4z0NpK+NvljWuXZQu2/r73ZRqGr1DoO9UT5GmBgeMAN
2BOHHrmQjxSSSCm/hJPikHn1njLYAVvDGPKmzlYLDWJiaLv3WxP3EjglzHNF
LBBZz2YDBC0eMGT7qConGp7O8F6BoeKG5i+aLgy4wU/wjNCapswX2mA0VHFz
e6djGARRk+aJyOKB1ofi96KxYs6RN4XFon5E0ZW25V5jDKnPAMcPcLL0Yb9t
Xx9gbL/PHZBRRkQ9YNtzZtjAmJwoVkSxm/AZZnawXcyWbMOHqm+AnXlcNr1x
Rf7yp17MaR4i5pDVdEahVEVJVvrTRTLlUzKpRqO2KzwxGVYTh1U0qiwxh+fD
LvonjW97cXZ5efrDWXL+lJM9OEpe4Mv+4OSLQ4vi6eGjwiGNWh1FADgX9LNS
61DzHHQHDU+K6J99LZgbQyIClU6mcXXGvZaALzxyQKzRa178QJE2Pl5reJwk
KYn2hynLIAtXW9J2NONCcm6LKGOhx4XlB/2DQyIrQ/pdvmfh/Ys21plf58Fp
yJrCYXmdpOnYhCo46rGGvzfbCjNYgcGw71KyVjSjtikl7hI9TTo33JmRta7S
2m9eN3kRp0OBmL7rSy9V66coOWcSX5E30UfAUdH5R8ooFxnUNgtBFR5fX+IP
zyZPeE+8CW72squRQ103ep9kZYtOBd8aX/3l9ZlSmCEw2ZRWOmDf+fad4oVO
xYxIrDGmmZYdptOp94/ZJhH2z/W98rA+oqwbSVocJeQ1KmezbaWeTd7J9tah
64yCE0jkQy9G7gEWEeoEoEIdAr1tKESPOgIwixl+m0zC5igqJmlnIjxK0IdA
DuFU3KE8KFjNILQ+fJDfk/ZRSfXAhw9edQceit83unz0bf/rPV9nRVFyeXuy
+CnnkNdJJjKmnbHQbs0ZdWaqdCGB7idE+h/wy1EU3JgkRkGV0GZyJbOIch6I
Fvh2YKAtzSnUoS8kRozHASclgadU9oDjOVVmAlLyCXNvmwsLmkjVeii9hls7
cU8wV+dLhkXFC43y4aE1kwY15i3tAB2GePI1o0nTIeuuhthRgYGQHFnlKm4p
zQRo7BlSPGZCepXXFtCYKg7V/yXT3xdBKH1wlYi7RuuXpia3yIkrXZLE1yJT
Tfg92IagikcZVyxekb/4WhbHydPb6bgpwSSAS4vpBybU3koK8Wb+YpW9R2uN
NmtaCsdzJjkjxOzYJ4D6DRqikiwZ5bhr/hvlXTWhRML1FWUktihDAgfk39ac
+ijtvZOTlKPxJdl5pD3RHq92II+WZONHGR5+k709qnQCdHVJ8Qo8btywy6cy
s4ffPrwPW4VJGtk7dBT5xE7SHshprEUpnLka0jfJu9kqeLJFSJFpt8p4n9c1
JrSTifkVmodfhQFJ/LlywwUoGCgvpYzkuRlVCd3QjkmwMXUoLqitK7RMhHeZ
bRm0WEmwK/X6p1URxfsGxhyeC9M+0DKG8mtgenjD9Qr5e0WH4sRJhEGWAil3
QuXisHbM2b2W8LXZP7tAziDF8AHpDRFVyEzs5y9Pr2hPQKhlN5htRrsG9IeZ
v01+zTYbxenrbdYmOimOw41zmAgOE5llGyUrunHiXoGv4RU9CGQvszkQC1cn
N0srKnUouBSAE+ALUdMb451JvlL58ZVTPWwFAgjG8JHlkexyJXTkl80WO/zg
05tR6aELXpJzqcp6UrI0BgSE3qBHi0KfNhhJzk90+WmelPDo1xpne5rB61d1
8uHOnH/6CB/fSUyGTnIW0cKHOxFtwOORoUFqyTSTXSO+QMmEPvlCcuuciaza
YAO/UhRfmyDlyztUswxZ944DWZS9pQzc5iFK5Udy+OGDTUhEey1k8G1WeAxY
Jsnc5fjbh8KIqdzLaLasEIE6vKCdK1XvChk2GBzT9EGvXEqa4Y4M71EIeKI+
NyNtHUkf6ZtSlu0dqDniWi8xMIBTDLVKfhrIczg/MUmtnJrmY2NsOxPIxUwp
4F5FBnyiWLE7GnPI8AzQRllTWQ7M6237iqg+g7ym8YoACcgtnNdMSqeQMOK4
EVCCG8gP68mbZBdF/Pzz6Is2jRIVcimFpYRtfIpcqqylW2ewQiLsKA9eMtxd
mGfOXn1z5uKzU0aDhCMGqzU9Uwmpxn5j0QfMkkeSEeo6axoRV4aTxXMk0U5e
Ws35jFxsvD0aNTChC34hr33bjMsFiL9iHkeOrGE2ETWN6x2IiupW1QFpMy0P
sYMtKXj2BRU0LBbJfFupbhg7GW3mIWpL6gNHL4Tef1Vl4oAcZSiSCxb0dM3f
3x8xbJdCCPtPm+i1NACF6ESfuI8UyDVSzI71XFuxAA55EL/Qw7Rn2ErAH5pN
5g7+EwT3//1//l8ouOE/zaqe/Gcz2xz4WQ57pWl+wZNIM4I5aOFVSlY2V6Sj
1ebDEoENB2pHo2Rb+PvlKO+G6Pj89OVpvGUchpOkJFj/Ac/7gN1FRHIRYxen
AdAnV5JRKeM7OtjpjoACKnYBghHCMQRScruSTsulgRBHIkJsXDTh3CZVjIXA
kPva5OG4ZLUhkxhJFGb/I0dKPF+G1VJUjbQnHwUn2vAhKbMYzwF0BjLfmidc
Y8qlamUjZbfsqerbGGZZZld8ngT5vuPN0MlpTUK83rbP0e313tWOUznSSAPw
9d/rLVZJohIfJLPD7NaoEJzrLlDRNRMIwQRNU3ZB35WKbUk0jV2s02xV3kzc
Zb7OqRjs87ZPgqgaHe3bPtnZzvbt9WPLNlGo8DM2y7vd9OlWGng3UT/aGrc3
uzCAEvDHQbVtO7oOY6cJK5o2aU8PS0q4fJg9OKv5FlJ1jhP/+MtXZxcXry4S
Kv2SRC+WBqylRnPGvMxAKcg/2F0Z1ft4mglOeBgDHWsvz93hgXf6vYQreR5y
0A5GCZa03/uPqKKdRz45OXJsP5hiIZmfXKQukcRRJ32RkzXxHDS+2nY8iqHR
OgKMrWjUW8dTt4GnxCojERuWzFWHe8821L/hbMJj4owPFemYBq5vnrjHW+9B
ZF2HvI3+cohXgQFdfJgxInwvm/XQxqwSDzlbjZYCltpq550zfkdb5+L8CYRo
WxQrD4XNadgzEz0SCpNt582tzZMNpXO0rye80BkjL0oB0DJ22SWukAEztVEk
BDzUbeavbVyUU7QUCxvNYBYWCSyffio3yZ8tFjlpuMDugWHEejX9vXY7jDWp
rhab+z71Wnahczn9ZUQBym5CAzVj2ICEivTC9lxKuI4j3nizj3QBKKMi672c
LrqGNFXKlFlNEq0DkgSa33I0qXXydc465Ck59kQsBMEhrrzpDKRpQxElUrp2
3c/VndTleOFYSKnqmmOwe07Zp0nKkCP7VqXpQFBK9LG8+rl1OH62Yayv6t5X
w/xcr5gyo912Fq8oCNEvaO2V1CR3dNnhfQBbF4Nn6g3ECnxj1g0phKYKnGIn
MmivdikZWyEFnq6PZ/O3nzmPbj2CJjWN0YtaoeeexB0U11IHwYU+7ZiGji+g
JxbqhBwdta/rAlsdvRP2dbAToILlqI9/Vs0XyGe5yVwvnIdcoHCNyU9kRar1
LrPM7uaZjFolEh2BR/Fj9Dv0ySBynfHWvkuBUCSZ3CvQLTZ4hkZRZwXz0i7C
pvj4hTCUDldQzwjaAl/84vQvSbaSVFKpVGcSDfg10Zra+QohJQghHYDuZOJh
O/zUT70LI4BVEKGil7RfYtPUybdWhwXqTZUYAQyhoFywEwQupNJbMmmBIutl
K29HEgpJ2Uhx+WyaD56j4/Rz5HYgbfL5p5fr7ty5gyiQqkVfLjnq9eFOzT99
BEXckrqxh/cS8yMnYIJJ7JAGPSyvCVQKOA7lYHB0VRiFInpQCENHUCoicRdg
AAjjogBzR1BcOBNYykxm2woDzH4SUZojqnfzTAWzQX2QcrtE0gJNkbkO5C8n
flO8WDS9r31uZgBo5FRUkYBThVdE51Gcm2rMGM6yvKasUAEPGtEz+MFfMZlA
J4KiDTP5tBI9CzgWvjpEPficUUChVXJJbXQULktMDqMAD1OkphVXZIIw9V49
vzyaJOoD0EHYwASCVdjEGQMDqY7/NRfSoLYfZ2XrAGI7FRhbqXe0TDii/HrZ
eAAOVNTjTYN5ewKJ9w+/H/aHKxsNqIoAYNCidYTghQqIc4GKzGCYSabgEDTP
IzJVBQ3CiDsdJUBJsH8IfdFee8Xr80aQfpwCDtwnly5+1MnG3JeAGRInw5to
6SYhBAelWQuUUnCXiOvQGHmMaqpLIr4soWkLfuIzSEWEUJKJfDUqdOD07a5i
uGW/EUOWINNhy8brAAoIxgn2NlnxtKti4udF2HJ7421isZmfn5v7hR3EwSZk
Hx5fHQFG4ST1yib6Aw2FRH4E51F3cHhEdvyK84BD+IMjfohoNMNkPw8UY+kZ
maFaQBwdk4Jg74hrW8eUsVFo3lZplSOskq2ytqbthNUT2TJYls9+DlAWhFvm
CZ22bp6Rw1OUuyVVOZVh94GvZoTuheqrePukaMr5CgpVDYqvcEoUuSKPMuEq
mYCccWvtewFPqZbE1HDiJmTkJKe9LtV5uaLaTwTuECIJG51E6Kh1ua0Qlpcc
liVX99Pw8vZQQDBxj4WS2N1Rc3p6g0VbGI5K7Ts0FghSdpNq+tMM47Gul5TJ
0BmcVbJvViTv/w3zVC7KbTEfX1X5JmTOuhDgEOhTDCjigRUELlnOWZ8g/43B
KRb00NphTeAqZ00ZK3nwHcA88w1l3PUGzeFeGORtKqVjCAB0k77CeyXhqwcn
9z9+JC6HQYSTyf2IFzarGv/SMxrfM1kH4Z6hoJMpgp54qwla4qMAj/qsKeGH
xhjjGBFczo/pO/b9q++2DUKgvtaRXjYFS2mPGu8GbMDXwHM6D/GeWD8taM2k
JSsNuds5nAKrVIVGTWekELyYmIC15OU1CBiRi0bUsqc1vbVtp7NXAT5bW5t8
wLVSe03VM7yuJ5qWWRCm6r4Vur+BV9qQQjegQPPo3VIt/HQ4vngG5rf3AbJr
I0pnEs8GU9Y+34aP6cmgsIgn6ZbzibSSCnTqgjGoKYGCU2AinxqFyNnI9yfr
DP0x2hdB7c1JQsIFXG9Khi1G4qgyg+SWY3DdK+AKcy5IwyqsxEXnwTfhys5h
uxt2rgiuoaS/cYInSY19lxK53wuPi/dEfCqiwQjGBke0NTqv8DT+S4fZ5Hqi
DBxm/n5HahYwScJAIjVJkjPk3r3PqiOBOyHGmTbLEVswnf0nFEAQjsb3gjkh
mBxj8vYYfZetyUpr3sIUBWcuqk41V6kFJFOyNk2BdPbI6DjeuSMBS/N9VLMC
7olonTJCNBf0SPjqwhp2tF7sPBwHU5UH3WFuYWY6IuqQIjxmPyoqTRle6uHk
DLOQ2hu2o9E9gxo3k67JfTCYbp0kE6pD5tN3YUtM5AhVCrlXhKhQ++eFRwcg
u7Hj33PBRE0u0nAZ6K2VegqzBZaO81F4q4IX77GPllGOU+DVYLieckHNDHGk
KPnGOxMI3sJZYMigfSUtR7Fmm1L88FWrvKyO4aT16wqfwVtkXvLIcSZQcCIV
BDMU1wMJkQY0QCL7sVB4OALWENhblbXdfAZsCUniuko3Sw5G42BxBta2YPcK
1TzM4brh99dUKe0Fsv7aiO4j1ILDbNTCxh2Yl4KAT3sTzZ8nYRaPB0HBccIY
w6hErB0IS+nsinW3Oh9mNzAW4gL1tY8rxJ28KhN4dIv6p3hhKAls5N3K5ODi
mlVlGX6NvtkB+elNdUHLp0KM2jpnAwNkoMEAyg1vyAsN4hokxZaGVCTbDePT
ebvnatn2RpMfcGcz2DkphZKptW7SV1l4xNDW7PHqkE+OTaRwwKhGadHpLK9m
27VaLtPMBewQ8nd054DGZcox+P7b60SHQLIjawqN8PRIoihAWL5WdJlfL1cU
Lx3rsmDSz0AXjFJowszFLtM5+hRKhk8KyD9yZI7ohhxjX1oFyolW6KDzSJ/m
e4f1kUgMrM0EMl0tRlSzQ7hkzOoV38gVkddDjk+27TB4lo+SgPMs75pqFXEK
jD+UWNsBfX4naAOiYT1jZOMPd6RITfMPVAObZte5wAiw2deH3t2FrI6S9pwv
xdFmKFTHJjFCjevIZwI238KanwQ1eFsQJ/QTsYE5JgWSsnR6GpsDeXRDDiKF
FaGeMBj1EFAInwNK1yoUv7Q+HgAHjyuHLFx5ciu4cpHuzkKWI8WwrmtirBFX
5No5UamFexXeTo1mga4HnDVXKEoc+9mrixegM3sznAPeGGnSdE+NCZyfXT1D
wcgbHmBtvCyfeK/37f+c9P0NwxzLr+7B3/vw9wH8/Qb+PoS/38Lf7+Dv90PP
6TD/NB6Pf9NfHejX4XWY+szhP7/+7Wf0pwueldybziz/rTUD+v8X4dnfaY+E
/pNDJTOkwaPfaY96ZyQX8R9oRsIR/oFmJKzpH2hGt//jZ/T1noeQjz7FUo09
f76+zUC3+fP1326PVIDfIbn3IwvbZ8zlpRj8haqIH+6wMP7ItdrFUHFy01dl
rgdvZNJEhokG6QmZ9w/mwmApBkHha1rHzjlCoxCDCckSmmDFASn1FfpIJJvg
XDNqysDLAHcSZZWTpSRF1FQsiPaWma0HZ41S83yyF2P4hsktU6nbzCWjSjcD
pydgmgwQQNU3itVp8yfRcSJxR9Hy7KBoVWbYewyV1x6sCNUC2Q7bZdzwAz1D
swzrViftJkW9g6jnyaWf0ICHFWDQxtPkdlAon0BC4YwiPlar6XyiWj9HMHNf
4UCpIpIZ25tbb0unsTTEDE+eAOniNPXpk5l0IdQIZuppV+d4/tQRDdiLYJM9
vd2Rt5LrEQ8nWswIdDUGXko7E+NwyTuGUpzuTFZEmAe+CqcWz0dAGe2U1Ihv
T8dOBs3+gAcqjh/J8JK0J3Z8gFlDmAv+hZy2QJWzeePId2SBCKmA6baohgo3
oRdsGGlB41g/RiAdVoyBTn7xz8dHPt8z4HioiswGZaA9cvN8+t1hki3IhP1z
Qt8CTunkCOza/klRYL9/Tm1wlYEp8Av2sHrFbcBwzcZbEZK8uXC9X/RZ2LEI
4NCxEg0S1eRLZ4XRBTk2ARsbGqNrDLVGFSAU50GcO9TIa5nlmxBl+RwCvYpP
ObJ1lyUK6JapK6gqAwYvjfdvSAWCRBBEYLEV4HLrEWK3Nfxy2sLACdg3plUc
yDEZu0fQc2pubIDSIP7ZfMVTya+BVWVzVzKm74bN7S+xH0mvYUgZ2MNOQQJd
2aSTY7yn6lNJ2Id/IlFIlH6RNcAJqWGsLX2o8NfaaFDrDUznEMmkYVkSEiQn
UZHQGjMFBJMRiyY3jZAldUOJEsr8NoyYY3/OBgy4C5gY2seU2GMSCrswpJjv
u6TiViNPKO8s47fh5jMsxSPnfk2eYIvVX5MXBbZezmfw49MsyP5f3a9j/POI
/0N/zI/4LxjjGL6l8bxfgx/e9EcKgT9YHX7lBB5Uh8av6tXiq40f34NfXp5d
/PTs9Pw5/ijJPSls0FxKYwn3T7dd0J5TjdEZNBn+Kg56H6f556evXpyev8Qf
MffgjF4J66B/zhlEcheiEdQzi5CUxj6J44hGe0CLvjp/8Rr3DG4rPi4hdxgI
H/kGPrk4e/bm8uxptC/zDHRH7a67KVd5aHdE3/uehz59c/Uj/gTjnooDjBhO
73QkF//khGcjJRC/WsXpq5qzObHwL2/VvtCM3ZsAM8TV10RtdYwdPM20GlE4
GvqAQzFHFMQy1xsJXGJaWsE755BWqxhXoj3soA1RMPWoxd0hQxden6iK36v1
i/68D8NxE8q57u9hZ3uP2OEmISd5GXFSZgGxmup8i57UcLE6uqgxSq72fAkJ
tgLgFExFNXY/3JnXJSIUfHTDvRh7vLlE/ZjogryG0cDmsYcxVxjkUK2nbx25
NrRYaIbYV8sHBkKzesefC16F9Xqqe79bNtDlXRyCHzJ8DcbVZwCYtdQlW9lI
2361jPDNvggk7f8LsGgTX9HLIfdQytuC+eJ3ZR0Etc9o3GBLm84CXtnrgFeG
clvgy3zBIt8buB9VGvqc921rG2aLowDi6cekKSkKuhF7aQjUZpK8hAvYHa7b
r7XxdXSieRKKsmduAkDrcVC1601esXOijhu6fSFUWwBYZfA4A90WQ6ndBrfN
Rbht0j1djr6OKFf2t4t/N4gVBOcE/GklAHayb3FnzZpK27WNI94JSeRkT5GN
6ZDlWyamZ5nfOScyP5jIGUPg+2yT2JugfNd8Iwgu5e55Y/psw85cElYZPPrx
I82O9tnCLSS3OtBewDtniiMlG7IH8M6nFn0S8o40UgmXcsUcEirjzX0eHF7/
gkRtkOxgrrxLq2rXi3EnDYSHzNAeuYVKcgQylaOCA4eipbld92UpyxX04tZ8
GWqxvt2V239CNsHWH8jvfUpdgEH3/wq6oMBSYHfIfJP6ggoyogitxfYJB05g
WZeTMol28qGiZHqs2P7ukHUQZDSktHLFtIOx4tl4UDrY6SExp9d9ABFg4t4M
QAUIeBa3E/bEKjlmkp2C++gz9HeSNx5AcKWbIWdAxYvE5CQzB9K/hkALyOWI
CeLSy3NnE9eNrB+hileBgUe5sFSqsmg3+jGZF07RUrDtTd5Q5qykJpPDhmaZ
swqB3JNy4qlFOmK6T0w9bMeVG6PJo1oZgE+ot2PBvnTyPtrLJS0IiXiPBNAH
XnZdanlKxwDnL5AZPtIuY56J9btxbxtYSRQX2ne38s6vXqBjn1IcH7aCRg5q
u1dRohi2EDQxlz3vNn6j0g0Qz4izR9ErTK0hYqBZbsjkq2/2ZzF4HENxgqpv
rr2VhETjUxpuu3ltR9BCjRUpSyw6jJi21Hca53ONMQTY0WA9lppM8QdCKgJp
FE3RfbZzcYh52HcSpR/gJdlq380DvLg2JZZdGOTL16vGWDWLeA811991NqOw
nugITcJDREmSowzmItIlg0B6PA114O3wcnfY52cO9aLedy1xRUMpJHNFpJch
U80ai2rddngnve5omHNTcnfBZTReFOiGu86Gpytg0vMdbXjdc/F0z9l6wbrY
zLJJ6RJmuHkruidp/SaOaFLDkFt26+rcYF0dTzw03qOYUxKnp6FgaKQNHWnp
w7yBrrA43sNmWanmkRh85YiNeIiAA7nzLq8aikmQQ2J/wHLEZDn1fcWoNKUJ
6C3lojuCTBcfow5tmRVVrFpF29CqjuBTKDrR0P5jMdckL6ZUlrNG8XNISaTU
/IQwKT2k6T1yTItewvUR5l2O3tU5vKAeKKt1viVLnYQj3O5TD8IpuvgUk888
Rdc+xc5erfLi7ScP0sUH2R5k3ynarfY7UXrETFs18MlotXrZ7hB7vCS3Fba2
9i4ssBVWKzG+1duiSonaxdiHIWjF1Pu7pYYfUKpAn+Z+MEp088ngw65yxMA8
Uv/VgO5kFKYAZZc21vW584IF9LjPmW0yNFtjyQ3NiXXQaGItZc5KpViVC063
2ylxLVWkLwB+7lWE/U/2YPm5eCkohZgQEDypQBo1rdnJVzJvm1K8VVYE46mU
lS1bFQHY/TK2Utlkvt2TOrBoQv7hASxEdiJ/drLTf5e8znAL9vz5XbPfcELP
z17+cPXjP8qMbvXntvl446enV6f7BvqHzMdTKnnkHiWnycnDMVos2wJr1Rhw
PLuWiLAWmhxO82uCyEyLo4QiLiXX0F0zul5kjmg2twAySHAHPZz0e0LgpF9i
EI5irxfZdQ5yFo2GQDB/29nVCD2CmQa7htty6ZTxBOW9+CO+FSc2xtBcKEph
Tyc1qGITDRGwkbliX+0CBThlDXGWgieMlKIT5SZFBf9guiqnB4lW5cag9j6C
BtIfnTs98TQCf5S+gHbyHadCcKjmteWs+TRfYWBXvh/6ykaYRXUsTyNt4UJk
E8oD9xlRo+GIUX+IKE5dMKmDpbjKOSY01Mxp+I3tOFg7FDbqJtq582DUmvSB
1nOjz128w2KlPq9rJ8agPkFx1jkTFjBdIcjLa5JKWqW0d4Inkw/vqZWx0RfC
Ulp+YjtjDc14a0iSRpGMdq3y8jQ4cLrxT/aTOJv0xPP5lDs8srnhO1pBM3Gv
Oo19fOFaZTZhtL/djuvxIHQBL1eE9ispUN12QrEvXcP+jhCiOdCLeQRTycaJ
8g5Gre5DTtNAbRhLIuge8LvViahfYSWsDuXKIRrrbkSD0qCjxDfiDBs6T90H
g5Mld2XRJh7rKhOHa7jPxt0QaaDy7sjhIONxqKXjQy0roceQFCfTNyEFUwTl
ARqjxDo3lFgnBxN6RXcvB6aLf453LHDVN8ZRJ7fzfNHLTexmCpVxPV7k7Iv4
kjY219Rfc9EO23i2aXRs3H48mx+J87Drr1RgN9612DfVB6/rPLyu8UMOIGgy
8bZG9p7D/szPoU2Y+A3dl7rwZfv6yU0tyk/s6q1SOz/f+2qu4mfI45581JZb
2TqVzV5ZZhdtWkucjTon5VpPDGZsjsy2YJxmzghyxlnjpP0k6U5odcPzS/h/
K7bA8x4yQT6Cofp2jaT1j+UdrvYJwrGN5Lbt293dgf5lu1svO+ku233psn0C
lvRR4s7Dl+c/4I4INIAvtYqjQ9JL0jodXPfGFn5kwVsU2TpcwUrejMW2kH4f
qMIKbBDlbamdUXqMyvgF5Ppjf5oAIdoM5IhwTS5a7RTOzmTB+FA/hzkVAyzq
O9HtlKDT0dSfV1pTQhCM390//viRnUQM3AbroSVKzY+TfIMA9Zu3wlEjh1j8
vm2qb4m4Z9mBow+kJrXagfo0JX/Y0islwtix3qYeVo1UJGeLmrv5ZyKsXBs7
IEioyYxA9jifBy/aKiWoIvmm2089fH2041HKiCxEJgiCsyVcFYE1IfCRjPZA
Xy3NRycJEz+ukLslUSZOndy9S87zu3dbNOw6s8gV0lv8X23fmZlXuuJoGOXV
nC80j9M/Ia0ZI2yFKTazxtiSoUoa1yn2eWrJO1IaDXlrE3oSS3rnFO1WW29T
pFpi4zje3bs6DdgHKUOS5Tl/Fyt74LWSy9274rSGb6I56FHetLegU4XvZlky
MmPu22obTOqFyUyhPsIRdOPlKxcufABftDTGTVuoTP9PW7TnPRrAA9/CR6AB
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
0Kudn6y8hyaCET+nrQc1D1LOPSNntBWniRWnI3K25usNe+uE3lxfco8esrcQ
u/vdci3SGjdbkICzzgLNurgdK9Z2U64B5h9TkkKBtdb+eIBEOb+CN0Wr8+lX
Wv2Y2oXqFm3SZjmis/fL5PvWu0pb+BgbxD1ZI2iQwNSVXXoCm6cbMkyxLgzO
Kive5VVZcL2R95Iy7g/1r32Hbzt//e4BRqEpCCuoi9+ffPfxo1TuaRqez/Xz
O8qasP8uOrXzuSi/NKq+Qp+YrsrZ25ETqEUt7UjVDZa3+r0Pbyuxy3Q2I7in
azpBicfKHvemcD32vF4O8+LsyasXL85ePj17asWPx43h9+jdJGsBE/J7eBxc
uIdYLVdsm0yxuXoeE/TFWjJw1XlMbAZrb4EVCXbJIiQbqliPhP+QhGf2KGKI
Gju00fy7mrC/lcSKIhWYwQpKj8dxfnaFJhuSBcfvHuOuPxEb4jUWMrIQ5kN1
B14VZbhmj80CrHQszPWAkUeB+RqVHGGDfKuIewmsFU7gge6w0Ok397+7Ry6q
YNgRZ2b/z17Rh5/61MLMu4Wkui0c+yRpVWMsdxtU1SkyOaxoIP7c8TEYr1xm
yrLVKeYuwgpgaW4oNPVLbWwq5oZy1dk9oyVvAQKOglF7sjKTU/ke6WbY4DzD
vl9hKVLEJkXuQEBEAIh+EmULvMt8uA4vHyyAnCdFU5Uk2FNgWFSVBnJ6wwWM
4j/wy/PpOI6GyQrulK2xtDhMii/8a5aupHChB9oH77JIBVU9kZ+ARIqhZxQy
iVHze5yj6m37LFfbPj+b8MhBughxgYbKHMRTYlV8g8zUtSikIwmr6kNvcb1v
SfZDK9nQ3ufgKp3uvQS/1dGjtY0qGouyTx62/TqcExrBLsSev73jfZm3pzuM
qCNUZ/87O3768mR/d8fPJd+SUJzp1xRgZaIUuFDCteJMhjko4ZQD2lsPmdg6
L7DJoxLPj0cu5LlQ0Xw5m6U+Jl9lAQSLOuRJarOvvolA6uPSNLivCDAU/S4a
JKrIauXTEzKvYhtru2wiNHjZPOMmAR3LPkj7YMd797TPNcA5MHLmvonIqhW9
HLktSj+07DGOED0kzSc4PVmKwVcgLviuSjWuTwnX4jjCHhIYCXNcZlYmn0pw
TIW3oIqzrTFG8g5Uc4bwQy2JYOTNVkcrC1VQ6wwdLnm9Zg1rXjK8AWkI1VoS
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
36n4XbXWDeQDpUwZb07aDUl8OYUhganrw1lK6/eA8M3HifLRz7F8WlzHK6zc
5vm2vE/xUXMFj89+A9biEYIGnbO8TCTVYbzRIY4jH3jqizw+osJEMaJWYyf6
8rawuNJ+Q/7A2ABaRihacNxpyB6vB9UZPk93N9HggERPOkD4PQCrDXf9GroF
3TR8rtylm+XRYQpMevEZrgOvZcThsNZefOiWdUMz6EIlR/e/VyP7jL0AOe87
/H5qK1oEqZmfzkfcFlzMxVpLDJNvQxqM/M3qVCHgEHbdn8BW/OJz1/xrieYF
fNTPXrfToSjzNVp/G2xfFs5rNjWPv+eCgw84gEt+kuyDFykqggj+5wBBhZ0j
u9zKfg0evdYUpWkW7HZTYhwpS0e/eZ9EUeaMIM0sVzQUhpWq+y6sgWx0N9Ro
aImtrDC6lr+LXIIs1PvLM0xk2omcj90KZcU1W92cyLyx3iynaN6tl6eFbfFN
bzP9EDB9ES42dm5ypgtn33nfEkrUZ5BSow2tOTwDW+rw+Ig6RQfx8Yo74AyF
/SPBsyfhB/lLna/zVVoReBVbGvilfa8Vl+u33937jmqVZMO+1nuY5pLHKKAG
TDbe3Jfsdtd+xSm9Qhy7KI9QtypCEUNqMmhdm0MmBslm0udk7HuQdDtOttXC
oLLqCWYYlDkuS2zLLMV9b1jXKjprS83aBAR20PvmG71LQ+59Y31xfU67hi35
cIeLz5im2p8Gqrl3pFE0cUthfxnjJjqMvR1HiYU+bsqxli4aozHd4+NJetqu
TPbkibUn/v9niuGfi7Ori79I/cWepKy/cV6WeSum5JyaTP3fJ9mGkTY9SgGL
Im1P7vkRZxDTnTTwDmQW4gfthHRfwzhxF4q0Je4tJUS73ZLmXVE/Zu44+uED
FyErenubZr2/114sG+IlV0VAZDLBXtdD/zoczszeVGKvA256zX1W6C+9wW4o
/zlI6Cguj/Z/KD4wtZWimbYygQPyuubvR3Xwtv0BGthAMITtEAKw0ctxB2+W
JaFp9ag6XbXfDev90bGRscnFvLniYLJ0WIIyiBiCvtTZJx5jtT9YpPmGIDdN
Yk0oNs6xPS8on9r4O1jmaVKBWMdCPIS9aCFeTOArz15dvIAvdXPDe6KrlCyC
7Y7mhPqutfyhIZJPhtAIJL7h8uzip2en58/7XhEX7TNcjcJZaP8esFqW6bZu
lCziYn6u478LN+fZm8uzp3te0lsMZ8JD6Johmmm0p/a20Ab02rPagAep7mY8
0qoJtPrRU5aNcdxxiYJP5OlzKEzoMK9O31z9+Lkr+sdckNPqxNykBnLTWh9Y
9woSFRziBSHCw28fLmKwPtSrenrTSYw5lGqabTEQJdJHTc3BdEaZdNKGsjOs
8xcAJ2Hho8rI1sPUHO5rh9eeiyYVBkkd+V54BczoOouq++klPXVamG/GcJUa
H+p5yJc+EoJeoTOsM58t4kMU2mIrgi8iAE/O7zJgPZxvwY5QO1XCIbAwCnBi
fZOiHAJfKsIMFMlng30MUS7wAfQvSOAadvbNzM1DpGeknW0V3UUQSHpr10Nm
zCguB48LzFqcVl0k0leAGtzOLdebuNdc6bNTLdrUlzBFSvUu1s2Qb9DC5uBi
3N6bh7pzoFnONiMe6xnmplzls11yKKzwiIUXndtnDh2uMg9tASPsgxSm7NQO
cx97vsSHwsWOKFGJ1huCc5qaBcoOVbZhnySptWXgJWRWMfRFKST4zyrqDvfI
t6MOgqhgmXHSrBmZbY0+xABN4oQVYjXpyHiHo+/XBkMoRMUxB9gWF0k6K14J
7rGZ3FS5UhTGR68ZJyk0wXPL7Rr9CWDV7GrKAEC8atU74prikIVMBPmDn5Be
vnlJi2EkJfxKXgWEmE7BcnTjrlraaUt9ARtxFTd2AXFDPkZfveiwI1RPBSXj
Jhqz0yrLtsRKOphG4dR5acH2vmBlxAR2WrJFCDggJlGvLWK+bMN2n0eC/ZAc
vao4WZ1DqvUf6BqahBzlpSaLSM8FZsRoYkrHfXqsgVA1XWJPh56xqzAJacHB
QS2ah9J3TNbSYO6nwYgITRk4h/1PF/98fGRS/yJ7pO6z4Ed/n8TQTxheA96I
TnzPN/dlOgYDYVsRGqImXrVpVI5oLgwTOGT3VHAqYs+EhmsRUkIHH4wT+HrM
XLVEkAB88WVk6ibpdZqrT2XA8NrzgsS8gOwjpyYZq0a8DgbhsPa12H7DRhtX
M3arHMVbteF/ib9q4LHgtrrPbiut3fa+qyilinS2oVQjutX0fSPWbmwE68rX
1sMpwgETDGXmZ+ZUWFw9v9znwrILoIOSaUiyVuoQToreLr0SFghgYKOpWBoR
/CuiNCbUBmX8/OzlD1c/opVwnMCeZwSrD4uKsM8fkHuF/Cmyz8khyQktwlmX
24K44j5/2oCTredvGOZYfnUP/t6Hvw/g7zfw9yH8/Rb+fgd/vx96LviuxuPf
9FcH+vqzlxf/+XrfQD+dXpyfPn5+lrx88+Lx2UXy6lny+C9XZ5efPdAXzei3
75E7tTkFSsHqrVYqboUM7h9//Eh88PXp06fnL38QQhMmEqTg8fvj40mSvGpM
DxNJ+MW7O3KRKYl+HNJHvWSpJIFCgMeD7rihVEMXchC0qGU7/YXgI6irAiIz
MlIjKzrhFoOFEM0chYCvrlRRzqZQyDbydpDG+id4DPs4l1gzgpk6N27w1Ert
kYFPkly4yZefS24FWh5m69H2+idr+uP61DHaCUI7liUMf11xsn3jF2U5UjdY
MP8TMKiwsnZ6HYOVk56gCYswmIZwp7imjXRAEIPUQ4awHGp2G0ZH5Kkgj5yD
xqGHuMHt0EnXccN7bKWRjWXiYzbhyL8ruAGX2zXpOdiUh3DJ2iABNT2Q/5Xy
R9eMpXcDomS5o+Qz/o5ANyucINIpGLlF44EGkTK0woLl558u0NnPmGJe5SQ1
Bp+9kLN+ofSJg8hXYHLHXssy6iqZUoW0ofTj6LH3D3Ry24HexFrnZ85LxkJq
Yggawm9O8tVqi/lvDTEI1GBg56bicWWH6ArsMZawS86W4IY8Hs8xm/fEjpAN
DvwZ/OifOqNwxMYshPRG/5H5QHXKKErzqRfeZi7wHlTM6Yf+E5BptuiFv/z3
mMsJ/XAu4Gjj5Blp/mek+fu5xDT3t5xL6I4IrPiNIMfCzx97iEv9uqMAMiW3
kaE+iFm0UoKdTwlGidVImxOmOV4y8nsdKisM/Jb0fdZ6Yi72pfQC/YRG8d5O
QtLuM+XqfmhEkz5TVmKsMD6h5uNbk3cKIwe7l6IXT8av4cCMYTfSgtGI5fj8
34FZSL+qTvlKFzEu9w2BWkXz7XKICc3uzb7ZvRmo+tk3yc+fYVQS1D/LU5hl
bIKMvCWAJgjVS5jCMGO97yu8aS+BXnaBB9ZX8zGK9I9OoQtXVwkFBK+EO+yU
UshrD4A2DvyUb3vCJiHd1M4cueBFUCsv4PPK86xJNT4tsP1gKxzKGgzNjjfm
1G5M+zj+G+yNj+HQJn32FgnEKSPsdVgQu+9maCmCEKXOGerW2mzKOm+ykNLx
yN2aYXXj3rdiWLLNeiQezrprIg2LjD2f9IzzK7FC4jh0oemiEVH9mlziJ5f4
ySV+comfXOInrjuF3zCfX01iFUrNP8cz/LOfafxvs4a/9XzIz8Vurv5UFZzE
7zgftUOSVurMn+1Pez75m83HhDgsXOkMe3wWtTd2WPXA6xXilejUk/JL/tj7
ctIEPX4rbWkp0UK6+QzewNHgUhKk1MtlO8ixf948DRML49TBvHOSSChzUIPG
IN4zawisCQMG4uQipSeYS+enL0+TJ5IHq6BqoI6hiH71mlyqF9l1Tkq9z4Ok
LwVRq/IRuxDS66TH7L9fPT49+Q/CCE25O9FR8tCimP2v/8mvcJq4//JSf/W/
/qe8djehuRC+9V4Mt4mf98Vvn/a91rRPTnTemLmCXPvlubjHZ+U8VB7gAi5a
81f/Y/dbhwdeBgBNJuehQcjBUSuNQTzakq9I0iRUxg3sCNfoe8njn+foJFv3
s44Y2nTFUE/wIuz2FdryT3A5uuI9uy3Bchz05CHlofUPIQof+75XyeEye58i
hsA6XR2pkyolGOqbgs0D0Ih/5YF+TV5i2OlX2hIw3pEVkko/g1+6X5kNxP8x
P+DPMNIx/KFvkvia82jFHCuV4bfPnoyvHj9N5MGTiPvve/Jemy8PP3offhW8
OMo8933jwRi+9Qx+D6p1zcl95LTiBSzInuO7xB63MbeOJwoiBvMr/o/GenA8
fvbts3gs//Gz747h48f08YUdHoFUgXjw3qy+XpXYFxLD1P57T/B7z7rfEyYH
X08LcgXyN1xMGhytq8OKPCx3Yzg0ubHmMjBWUs0ULtryA+lTcxNTH7JYuhsH
0fT6t+wAQZVB/fQb7625g72L0+/53dAeydKo1/eYSgtuMqoHXiengnKpXjj2
KH53cu8hOcAuAt4FRr1hsejDDKp0d73Kdw/CKYdlCQ04zmLT9KBKQJTpdnOe
+BkeO2ajvMvhDfGkpAOB4ly0lhjX7DKryahnIbILHtepvIDprzTbZt5iG5Ww
DaSH//Hvd+/Crbh793/8x6RFQ14tPuiSqj8XpW4njmENVZ6ZryRvajIAX0tf
3zc+YyhaP5GEHWZRZdlKEVEQBGpDB+mzHDBdY+ExV/XXPkVfG5WiRk/gCBpn
RBSYdM5JLRUMjGnfiMSykYdFM+eOxz4w7zM5gs/jkKvC0d8JpwTaxRGmCXDt
HTv6C+mqh9MkIiBqo6OXqBseIMGQu0PO/aDHDLiSCtw1w6nbbyCxBRA8yQ1B
qUb15xV2rCFPIYU3tdMbq1LGKS5YLB6CkXZgnb5FDsq9Ul0vBRh89aLeVqIk
FiU12ALCRZtpBrxGD4TDs8Jw6hlMCl/JMLbYJgkexWm01atzoXzfpE+qXJVK
SPQR+i7K+qvnl6GQySBO0F6ZWIo/Vqxqwhpkaqlec5YQ0RMMOcYhxzCkGcY2
wQiYY2JKZ2mVmJof/KamrWLBnS0FIalPbnwOk8ruH3RjEQekXPiAUEgGmOH0
Gkr3KrKVggDNiSdoQ1C60SCumF9syoYDq3ypQhDBSWw/Gh+2ZUZUwF3OYZ6V
6VTRpG+pAJDzccORtTtaUCcmPCecXKvfOk3YnyJWCOGWYa2L6Oy0F+V1lW6W
oHxhCMH3wMEU4XyGAQeHs2swZ3iH7/Nw2L8wYKJ/Lkpm6Pcn83oaPRpuRTyK
+udi/ozpwc2Q5iZ3aUSNHrllK+wbbPa4XIw12wh4EFr6lNtQ20RougSnYUp8
w4FK0uItgTJdNtkG/pElj8uq+es626Gj7ypfJ09QrRu5i3S1gYsAnAs44+sU
uMCP5WIBInjk/hUm/ccSC2tT+M7ZnCBknmc3OTx5imUJWLAD78lxmG2e4LfL
kXuagrWWXM7g8qZ/zUcOHvllm1zijOBoLtKSfbKPs6rIs+SncvVXFT95lSyz
1QZZEdpXVQ6qtZp0kRhT0wr0SHKBuP8H/Yral1Z8AQA=

-->

</rfc>

