<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but a DSONOTIMP response could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
that the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request,
unless specified otherwise by the relevant specification
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused whilst that operation remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving a long-lived operation uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as
a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=1) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=2) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active,
it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST forcibly abort the connection immediately.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=2) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAOhQaloAA+W9+3obR5In+n8+RS39h0kNAJOSLNvqb7/TtEjZnNatSap7
es6e3a8AFMhqA1WYqgIptKR32WfZJ9u4ZkbWBSRld2+fWc9qWwIKWXmJjOsv
IsbjsWvyZpk9T07eXCQXTdpki80yebvOqrTJy6J283JWpCt4YF6li2acZ81i
PC/qcj2us7qGR8Z1flWky/Hht24OP3+ePD48+m58dDR+cujydfU8aapN3Tw+
PPzh8LFLqyx9npwVTVYVWeNur+jFb98lfy6rX/LiKvmpKjdr98tteGh8gi92
s7R5ntTN3G3W+Jr6eXL+8kXy3XfPno3ob0eHT751blbOYZTnyQZm+b1b589d
koyTppzR/9bbVZUtav57WTX0D5dumuuyoifhT5LkBQ4+SX7Mlsu8po94B87T
rf2wrK7CLJOLbd1kqzp5AZsGQ+eb1Qi+nE3o0XQ6rbIbePriBf27hldnsJ4f
vj1MXlynFYwBm4+f0dezvNnC67L5bVnOkxfwL/64nMMsXhwnPzw9fPZEPtoU
TQUPv784pg/W12UBD/3LUfIMxn76+ElyBFtPX2WrNF8+T6p0+/u8nk1g+vGS
LyYwl6y+zqvMLPqi2cD84m9o5cfr9TILS9QlHcFHi7zImyx5VZZrs54XG6Cq
Ji/K1mK+PTx6etdinh5+n/zw3dPkyePD7+xiZjKt36c4m8msXMVr+tdJcpLP
gLLqsjCL+tfyumh9QWu6gNnNN0U41ctsdl2Uy/Iqz+roJOVJu3T6+zh5nV6l
83SZFcmLDJaTycdvPyzKap5czPKsmGXJu7T6xewNf2s25u2/PU2e/nTc2hfc
1nnyByDxOa3U78Nf0/nva55SdxMu+jfhIq3S/1SbUMOChnfheAKzKmCxZguO
8TKXhf2CtwCmXsNkZpkdP+WnJyt6+vdX+Gn3PZeT5N2mBhZV5eZNl+Uq/pje
875IF4t8mcPH8+gW7e1ZRgCzya+uzca8eZE8/u7Z4fd3XZsfjn5Ivn/2XXL0
5EnEA9Yyk99P0+Lqr7QGlxew4BVw/ZsMT/FNerXMTo75QJu0usJpXTfN+vk3
39ze3k5q4gt6/5CbfLNO4YLX3xT4y3m2TLfZPJ398g2PwFLm8sW75F1W0ZuQ
AtZVOV0i25ylmxpOdbqFTYSZpTOUPsk0a24zICKazNc1nNdVWeXN9SpJi3ly
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
gsPtsKiYO+xX5r4Q0/uM89wZjWUUAvwsqbs9ArXWcmxwffyKDSzOiWh/u38i
rZCxYQoiKqWLoFTUMV1G9zeFLU16EOVoNeU4LoDHudysbYtqFncUHfh5L4oG
vvZafKsrMy2qr3e5L+TUb4OmtYDSYJddsuO/o57/e9zzf0+SJ36cQ3rmSfI0
+TZ5lnyXfJ/88JDPdJx/Gf/K/9OBPvWu7Pz08vwvoozsP3mM7djqg94nP/12
M3Lmrc/d8+TYiK2RaVNE5PfksfStQvgNN1/JOIHTe2T2pzmiwUAxKg5AhDRa
txPbShW5lKuxoCES+3khlk2bn3NpEpI0eIXjYCB/0ZYQ3qwXYrSQUF8a4sjn
CwicoU2ScueS6M6J/5TMBt9ftOO/IdMlgN+sqeI61/3wgKIjfW8Dvt74L8mO
FpAumaF1U21msTjqDWhz1bUQMTKuBLKlObRrRFnIHlXxGbngbXGKlBsxUBQp
wJeil+OaCOsTSkXZ8+1me8f2btdhr5gAcoqziyzXxIKoqR+3ttJV9HmETUCR
Qm9a1Vl/Qz2sQICiOYlBNYynTRJ4UP1x5smewuHG+SoBLHWqgiC9BpOJNHMc
Ty2U4eHuMqjUnkL1SgozkZfQQrDENNAWlXXiQrcAdojLrzScHxvFyf4ixs2i
lOyWeFODfRbsVjNjE0erW1OfUVhByjnSuC4a2NvMOI2edYXFSIE4JBk2ISet
rgWer4W8Ld8hiknqJiTj9HgpECbGCHL1/fU85A1FipsUOk//In6FcY1rNaso
pkLIeq791Ikts1ptJ8z9sUxWClyNvqlRNyhVwbRZ8bpCxFw2R/rh0+hflvin
t/bNg95Bdt3FqkqbZf6O7PF2dz+yyIg3SWKsXOFQ1LBPWPiGj75u4W7uPqAN
uW56rleITKSPIVI4TlzGnMVn5BMHoU5dm9rRLZUCjXZS09o7kQuiEwfl7Lm2
0HQB7BQ06khwcmumifaF7WXxQ6MbKBXLXqecn28Rr4C9V1ZUi4gZlg0Dp2Rk
n3eKgr1t6oq1Tr09AOmsWi/GVj7oldtl9GXsvxz0Xdtu3qYhQWcud/Ug/FJ3
tkKEY7SxScAWOyP+PlgZjw9Mp4bbMkiH5yKw2E41GU7SX6wbVU2kzHJwf+ED
hpPiP9s11bWqeTy/O5Nqh3NqL9tynnede4hIFnf8Nq7gTUqdzNJhV2ebro7v
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

-->

</rfc>

