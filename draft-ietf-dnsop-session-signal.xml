<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="05"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
so all implementations of DSO are required to implement the Keepalive TLV.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAOdJrVoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtWmiERk
XHbs+/72eDx2Td6sskfJkxeXyWWTNtliu0pebrIqbfKyqN28nBXpGh6YV+mi
GedZsxjPi7rcjOusruGRcZ1fF+lqfPzAzeHrj5J7xycPx/fHX7t8Uz1Kmmpb
N/eOj789vufSKksfJedFk1VF1riba3rty1fJT2X1Ji+uk++rcrtxb27CQ+Mn
+Fo3S5tHSd3M3XaDL6kfJRdPHycnx/e/HtFP33zz4IFzs3IOozxKtjDHh26T
P3JJMk6ackb/rXfrKlvU/HNZNfQPl26bZVnRk/A3SfICB58k32WrVV7Tr3j9
F+nO/rKsrsMsk8td3WTrOnkMWwZD59v1CD6cTejRdDqtsrfw9OVj+ncNr85g
Pd9+fZw8XqYVjAFbj7+jj2d5s4PXZfObspwnj+Ff/OtyDrN4fJp8+9Xxg/vy
q23RVPDw68tT+sVmWRbw0L+cJA9g7K/u3U9OYOvpo2yd5qtHSZXu/pzXswlM
P17y5QTmktXLvMrMoi+bLcwv/oRWfrrZrLKwRF3SCfxqkRd5kyXPynJj1vN4
CzTV5EXZWszXxydffWwxXx0/TL795qvk/r3jb+xiZjKtP6c4m8msXMdr+rdJ
8iSfAWXVZWEW9W/lsmh9QGu6hNnNt0U41atstizKVXmdZ3V0kvKkXTr9PE6e
p9fpPF1lRfI4g+Vk8uuX7xZlNU8uZ3lWzLLkVVq9MXvDn5qNefm3r5Kvvj9t
7Qtu6zz5C5D4nFbq9+HndP7nmqfU3YTL/k24TKv0v9Qm1LCg4V24miTPsnW0
A1cwTvgdLf474FCLsmzoHm9XQK7XEXl/B1wRuOW0rCwZ/3iVHH99//ikn4xl
emtgHWXx58X2ettDqTC9V9saOFuV2xmW6/jXNMnXRbpY5Kscfj2PZndwYPkH
7H9+vTTTfPE4uffNg+OHH7tt3558mzx88E1ycv9+xDo2MpM/T9Pi+mdag8sL
OLQ1iIq3GR7+i/R6lT05ZTpo0uoap7Vsms2jL7+8ubmZ1MRO9NoiE/pykwJf
qL8s8JvzbJXusnk6e/Mlj8Ci6erxq+RVVtGbkHA2VTldIbedpdsaDnG6g02E
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
RCB7MweSyUP1seR4wuxJaZW1s1mdhv+PUOxXoO1TohjlcS/aqPYm8O60MB8x
3vOG0sokb4/MdpplzmIFVUFKGKUOpNNy20xM9VTHoZeaNnusaoQae2qPJK1+
yQdlL5d08SHiPRLsCHjZdam52x1rjL9ANtlIW2p4JtbvzLutez1RCFLfysG7
QHoxNX2+XXzYik82qAFdLU0LGuqXYzzve95tO/e6AeIZcWoV+gYJDDnGNOTu
Az41fX8s20NmiStMPTTtrSTQAx/Yvu3mtb0CC1VgWW7KxCMoQtxS38iTzzUu
NWWr0/qtNKT+JwLFAGkUTdF9sotpiHnYdxKlH+Al2WrrqgO8uBagnO1Z8ujq
VWNYhEW8h5oI6zqbUVh/ZFS/7NFIsDYpXG8XkS4pidLQYKjBXYeXu8M+b6M3
G4MHU6JLhlJI5opIL0OikjUg1OLp8E563dEw56bMx4JzzL0o0A13nQ1PV8Ck
5zva8Lrn4umes0Z7g3mplk1KSwzDzVsxHsl5NdEkkxmE3LJbdOIGi0544qHL
DEUekjg7CQVDIz1XqJBwmDfQFRb3a9gsK9V83a5Pq7Z+bxFwIHfe5lVDnmky
UveHrUZMllPfRIPytpuAF1AuuiPIdPExakeSWVHFqlW0Da3UYT6FIlmjFOFw
WP+JmFE1rXNtod44M9gO1DmUIPaVhTpuqVlLIaQczXaf2A+n4+LTST7xdFz7
dOwerPLizUfPxsVnEy19+Exk9+hpv/7SQ62ZXPOPRyDVj3KHmN0lOSawnaZ3
UoDmv1oJwK7a06piqM2OAN5Bx6UemS2l+oAsyT49/GCU6JaT+YYNUbj9t0I8
Xw1oQkb9CRhIaWOdWzsvJrCT5ifMNhmarbHLhubEGmU0sZZqZmVMrJgFt8rt
VLKWYtEX1Dz3An//kz0gUC5eSs7ts2tGzCiQRk0LU3KEzNuGEW+VFah4KmVl
K7REnHW/jBj8Gwn7UptLCeI22sd3KOqdNuIm/OQElv8quXrhFuz584dmNOGE
np29+P7qh3+WGd3qz21zrMZPTq9O9w30T5ljpVTyyD1KTpOTB2O0P7YFdppg
pNrsWoJ9WjVwOM2vCVstLY64U6801r1mWKbIuNAMXak9Fvc9Omvp9wTdRr/E
MAuF1S6y6xykK5oAgWB+39nVWGWPQWRqIVwGewhPUN6LP+JbcWJjDL6ECgP2
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
aq1GXCTG1JgCPZKcHu7/AZvVBNW4cAEA

-->

</rfc>

