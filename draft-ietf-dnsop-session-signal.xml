<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determinated to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message at the same time using the same MESSAGE ID.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table is provided as a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAH/QnFoAA+W963YbV5Ym+P88RQz1w6QKgElJlmXl6jVJS5TNSt2SpOzM
mp6uFQACRNhABCoiIAqWtVa/Qr9BP0s/yjzJ7Os5+8QFomSnJ7tGWSqLRODE
ueyzr9/eezweuyZvVtnj5OnLy+SySZtssV0lrzZZlTZ5WdRuXs6KdA0PzKt0
0YzzrFmM50VdbsZ1VtfwyLjOr4t0NT5+6Obw9cfJveOTR+OT8b2HLt9Uj5Om
2tbNvePjb47vubTK0sfJedFkVZE17uaa3vvqdfJjWf2cF9fJd1W53bifb8JD
46f4XjdLm8dJ3czddoNvqR8nF8+eJF9//fDhiP51cnz/K+dm5RxGeZxsYZKP
3CZ/7JJknDTljP5b79ZVtqj532XV0A8u3TbLsqIn4W+S5AUOPkm+zVarvKZf
8QZcpDv7y7K6DrNMLnd1k63r5AnsGQydb9cj+HA2oUfT6bTK3sLTl0/o5xpe
ncF6vvnqOHmyTCsYA/Yef0cfz/JmB6/L5jdlOU+ewE/863IOs3hymnzz4Pjh
ffnVtmgqePjN5Sn9YrMsC3joX06ShzD2g3v3kxPYevooW6f56nFSpbs/5/Vs
AtOPl3w5gblk9TKvMrPoy2YL84s/oZWfbjarLCxRl3QCv1rkRd5kyfOy3Jj1
PNkCUTV5UbYW89XxyYOPLebB8aPkm68fJPfvHX9tFzOTaf05xdlMZuU6XtO/
TpKn+Qwoqy4Ls6h/LZdF6wNa0yXMbr4twqleZbNlUa7K6zyro5OUJ+3S6d/j
5EV6nc7TVVYkTzJYTia/fvVuUVbz5HKWZ8UsS16n1c9mb/hTszGv/vYgefDd
aWtfcFvnyV+AxOe0Ur8PP6XzP9c8pe4mXPZvwmVapf+pNqGGBQ3vwtUkeZ6t
ox24gnHC72jx3wKHWpRlQ/d4uwJyvY7I+1tgi8Aup2VlyfiHq+T4q/vHJ/1k
LNNbA+soiz8vttfbHkqF6b3e1sDZqtzOsFzHv6ZJvinSxSJf5fDreTS7gwPL
P2D/8+ulmebLJ8m9rx8eP/rYbfvm5Jvk0cOvk5P79yPWsZGZ/HmaFtc/0Rpc
XsChrUFWvM3w8F+m16vs6SnTQZNW1zitZdNsHn/55c3NzaQmdqLXFpnQl5sU
+EL9ZYHfnGerdJfN09nPX/IILJuunrxOXmcVvQkJZ1OV0xVy21m6reEQpzvY
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

-->

</rfc>

