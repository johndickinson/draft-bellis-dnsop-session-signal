<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of eight different contexts.</t>

<t>The first four contexts are requests from client to server,
and the corresponding response from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
in response to a client “C-P” request
(a request with nonzero MESSAGE ID indicating that a response is required).</t>
</list></t>

<t>The second four contexts are the reverse: requests from server to client,
and the corresponding response from client back to server.</t>

<figure><artwork><![CDATA[
              ++-----+-----+-----+-----++-----+-----+-----+-----++
              || C-P | C-U | C-A | C-R || S-P | S-U | S-A | S-R ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | RetryDelay ||     |     |     |  X  ||     |  X  |     |     ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | KeepAlive  ||  X  |     |     |  X  ||     |  X  |     |     ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | Padding    ||     |     |  X  |  X  ||     |     |  X  |  X  ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIANluUFoAA+2963obR7Ig+D+fopb+YVINwKRky7bOt982LVI2T+vWJNWX
s7M7XwEokGUBVThVBVJoSe8yzzJPNnHNjKwLSMlyT+/sqA+PSaAqMzIyMjLu
MR6PXZM3y+xJcvLyIrlo0iZbbJbJq3VWpU1eFrWbl7MiXcED8ypdNOM8axbj
eVGX63Gd1TU8Mq7zqyJdjg+/c3N4/Uny8PDo+/HR0fjRocvX1ZOkqTZ18/Dw
8MfDhy6tsvRJclY0WVVkjbu9oolfvU7+WlZv8+Iq+bkqN2v39jY8ND7Bid0s
bZ4kdTN3mzVOUz9Jzp89Tb7//vHjEf12dPjoO+dm5RxGeZJsAMof3Dp/4pJk
nDTljP5bb1dVtqj597Jq6A+XbprrsqIn4SdJ8gIHnyQ/ZctlXtNHjIHzdGs/
LKurAGVysa2bbFUnTwFpMHS+WY3gy9mEHk2n0yq7gacvntLfNUydwXp+/O4w
eXqdVjAGIB8/o69nebOF6bL5bVnOk6fwF39czgGKp8fJj98ePn4kH22KpoKH
31wc0wfr67KAh/5wlDyGsb99+Cg5AtTTV9kqzZdPkird/jGvZxMAP17yxQRg
yerrvMrMoi+aDcAXf0MrP16vl1lYoi7pCD5a5EXeZMnzslyb9TzdAFU1eVG2
FvPd4dG3dy3m28Mfkh+//zZ59PDwe7uYmYD1xxShmczKVbymf58kJ/kMKKsu
C7Oofy+vi9YXtKYLgG6+KcKuXmaz66Jclld5Vkc7KU/apdPv4+RFepXO02VW
JE8zWE4mH796tyireXIxy7NiliWv0+qtwQ1/axDz6m/fJt/+fNzCC6J1nvwJ
SHxOK/V4+DWd/7FmkLpIuOhHwkVapf9LIaGGBQ1j4XgCUBWwWIOCYzzMZWG/
YBQA6DUAM8vs+Ck/PVnR03+8wk+781xOktebGlhUlZuZLstV/DHN86ZIF4t8
mcPH8+gU7e1ZRgDQ5FfXBjEvnyYPv398+MNdx+bHox+THx5/nxw9ehTxgLVA
8sdpWlz9SmtweQELXgHXv8lwF1+mV8vs5Jg3tEmrKwTrumnWT7755vb2dlIT
X9Dzh9zkm3UKB7z+psA359ky3WbzdPb2Gx6Bb5nLp6+T11lFMyEFrKtyukS2
OUs3NezqdAtIBMjSGd4+yTRrbjMgIgLm6xr266qs8uZ6laTFPDnhOZLjp39i
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
ZStgABSm12AQOY72LS2a3G4f6BDF1ZPwke/gm/PTZ28uTk8ivMwzuKYLKVCx
Lpd5yAim937koY/fXP6Cv8G4x2JTID7QC87REYMRgYR5F1TdrAOce1N7uiCL
JRNWbUsgUKImxuCUhfIUtJ25jpm3ExVVzNXqy3wQQSCpqHXuJdaCDVvBTqz2
iLiICgs9VCRGggbwtVrf8zu7HzaW8oQUk/sdRB6ory5twlzEyvjks/ffF0fw
OasiHy4kvMccSW/ZjrItYXgDtvUneHXh/VfzusTwzI9uR0mSHiMYETo6pJDl
cXLNPLbP5LWc/FB+SKcduXamTqgJ0hdTE0doTNqWPA2eC1ldrRCJqodfjdC6
r2zQQ6iSUeHFqnb9kd+YdrUzO+rTk67obrkj5+q3pVwd97lQW1KdrXlFlHYZ
p08NpSL9fyCvauKj9ziaLoTttdKReK6sk4LVycC0oQenIZT2NYfSckTO+/cS
WetjcfjIw9GuUkmI6qZxEfLaqVyflpPlenOyvIcoysm6d3rVyDVRflVy7/yq
AcjbQVcYdkvkUrvPSBK7B3qIHyN7x92h203QbUiV3GUisdtD1euxxwstaGAS
tMXVRkBtLvkEDalEPewYMRJljuR4RcNVgpnJfPz70xzpCLZWzuXqMPL3RSmx
cr0cbyfXAULvjYvr5zh1OGf0mhSRQQ/ZWANqfYA9HOyhU4jP3MEOJ+7N7gcS
ydzgokYeqRJ1JF7VkTOV61BwK762rNWUaGgvGHOQDSx0/d0BMkFENROltMjW
p6W73LKnEd5jFYjUFLVHBWwW7ZRl4zjksnNIH0sK1kYbTy3pVqibErQ5cz2U
vnCNVIAFRLdNMzGhOJ2whtSE0PHt3oi6kTakjkjlRHKx21MkRRjo9jgYYKE+
0rF1mbDoGCNz1G9d6NMy0dfZ1czRMBDdme3z0iqeplmKu/dU9GkfGEKlHYwV
cQcMtvqhu4NyRhwXgmHgNyGukMK7gDRJ8allH3dc0WrsUOWmjU3r5BvdBb5F
Ycvyl/vEkPHl31/7WjaWPAixvtQZ7y7DLhoIK3PWpKM+wH/DUsEN8MsIQvc7
m1/uYjYWUjoRe3iYNlqhZA8POIseQYeX6g96JDnkfhEjXsPsXQeDUXhzKAXV
mEJeWPYssAEXUT3JOlILZ6hwUNaJudvv+TCou8E+KMZ1Q2HkoJc41TIEZFiR
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

-->

</rfc>

