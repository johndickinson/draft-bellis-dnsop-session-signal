<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that same
server for at least one hour.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DNS request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table is provided as a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC2782;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAGG8nFoAA+W9/XYbR5Iv+H8+RS31h0kNAJOSLNvqc88OLVE2p/XVJGV3
z97dOQWgQFQbqMJUFUjBss7ZV9g3uM9yH2WfZOMzM7I+IEp2e3tn1aOxSBSy
MiMjI+PjFxHj8dg1ebPKniTPXl0ml03aZIvtKnm9yaq0ycuidvNyVqRreGBe
pYtmnGfNYjwv6nIzrrO6hkfGdX5dpKvx8WM3h68/SR4cn3wzPhk/eOzyTfUk
aapt3Tw4Pv72+IFLqyx9kpwXTVYVWeNur+m9r98kP5XVz3lxnXxflduN+/k2
PDR+hu91s7R5ktTN3G03+Jb6SXLx/Gny9dePH4/oXyfHD79yblbOYZQnyRYm
+Y3b5E9ckoyTppzRf+vdusoWNf+7rBr6waXbZllW9CT8TZK8wMEnyXfZapXX
9CsmwEW6s78sq+swy+RyVzfZuk6eAs1g6Hy7HsGHswk9mk6nVXYDT18+pZ9r
eHUG6/n2q+Pk6TKtYAygPf6OPp7lzQ5el81vy3KePIWf+NflHGbx9DT59tHx
44fyq23RVPDw28tT+sVmWRbw0L+cJI9h7EcPHiYnQHr6KFun+epJUqW7f83r
2QSmHy/5cgJzyeplXmVm0ZfNFuYXf0IrP91sVllYoi7pBH61yIu8yZIXZbkx
63m6BaZq8qJsLear45NHH1vMo+Nvkm+/fpQ8fHD8tV3MTKb1rynOZjIr1/Ga
/m2SPMtnwFl1WZhF/Vu5LFof0JouYXbzbRF29SqbLYtyVV7nWR3tpDxpl07/
Hicv0+t0nq6yInmawXIy+fXrd4uymieXszwrZlnyJq1+NrThTw1hXv/1UfLo
+9MWXZCs8+TPwOJzWqmnw9/T+b/WPKUuES77iXCZVul/KSLUsKBhKlxNkhfZ
OqLAFYwTfkeL/w4k1KIsGzrH2xWw63XE3t+BWARxOS0ry8Y/XiXHXz08Puln
Y5neGkRHWfzrYnu97eFUmN6bbQ2SrcrtDMt1/Gua5NsiXSzyVQ6/nkezOziw
8gPon18vzTRfPU0efP34+JuPnbZvT75Nvnn8dXLy8GEkOjYyk3+dpsX132kN
Li9g09ZwV9xkuPmv0utV9uyU+aBJq2uc1rJpNk++/PL29nZSkzjRY4tC6MtN
CnKh/rLAb86zVbrL5uns5y95BL6brp6+Sd5kFb0JGWdTldMVSttZuq1hE6c7
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
rjkKCmKRQHO/H1klUPYd30QHTR4bubiWjPpM0oJrwNfbvCF7RD/GpnYl12Xg
rrioh2jBRtJmAolDB2PC9vTgremKxBtAmxqo7j9nRqTMTT/8SOsqxc2y/QsV
jmeqs7crq9+y9hJ0iqAGH8aClMwpEBVjDKdztBX7gEZnSMujIlWlvjKvV8vq
CLBN6qDWbiig1q4ET7KKvOhwtgQaTciYmfTJiV2YBGsdmegbJ9ry20kDrnRm
voKIGUDrf2J8GYmkOAxyu3J9DxJqvESx1wJEioI6pW9hHlHVqdpFUfZ1Vusy
QoGx71JpZL2vqmY7ACJWGntluNL59C7jPHE+jDeyB49Vim7nRc4BjqtJGVy0
QKJb1aa0WQ72nQl1Am/LYLY/4ewb5aAW4tR23QmwRSlWEi5IfOImRhq2i3dN
Ep7gUHN4pl57AeypYmAJTNUle/6c9PzvQc//HiYP/TjH9MzD5FHyVfI4+Tr5
Jvn2U36n4/zL+Df+Twf6tbOq81enT6/Ofzy/+ltydf7y7PXbq+Tw4QPsV1cf
dWnw6x8woz+fnb05fXH+4xnM7ers4sfTF3/QjFyXFk/ck6F6XR5+L6CjyHQI
7aeoLMTDB9KUDIP/3Nkgu6Y7JvQbOJzmiEgBXbE4gouwkYp49My2yCXLPSoT
rsUMVI0gsHAj9mH77omzewZy7yZuYLUIk5zaVK7SSvEvajaPSYzEOX/+Purk
8Q7U9JIe53ESkfYYJoziHWMQ7UvmY/6NLt/p7vcgS/7Jdt/Py29/Gm2+jyOF
bM6+qmRGYyRUHrNDz/Ktt2cYS9TLBjaitU5Fq+9GtNx+LvjU3Q3townfvV2z
/y16dZTVE5bC9TD1a6SuGyr3ziGEQ03iWVm5kJJwVzrQXG7h+zuTU4abEmPj
WiWketNAaidpB94dE4qmdW5Fcr1T1Uj4xZHjC3w4b2Q4beRqGVXGbTzTpo1P
UuqZK8F0aqEbb3a5Av0vZGThHLpoCNF3GM7QrpNCGZR8YJ2QrEBvSDG2KmJY
AbWvSCvE29b+fZ1Rpf7jpRg8PVvIxdEFHW6q8QRorbzyT07K7NhnhueW1yYI
gtgh0Zux9inZNPHwecbHcnCG1JE9Utfa++mrNPjGHr4oBwFa0BDBkRFgLezV
eZu7NdUBMdGDisHnjQCue5InwqYKuyIjOj+znqhC4t/RYldZsGyma0fg+Kla
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
Bl8BAA==

-->

</rfc>

