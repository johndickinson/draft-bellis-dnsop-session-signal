<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="05"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
so all implementations of DSO are required to implement the Keepalive TLV.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) signifies that the DSO-TYPE
of the primary TLV in the DSO request message is not implemented by the receiver.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAA32nFoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtUWwURk
XHbs+/72eDx2Td6sskfJkxeXyWWTNtliu0pebrIqbfKyqN28nBXpGh6YV+mi
GedZsxjPi7rcjOusruGRcZ1fF+lqfPzAzeHrj5J7xycPx/fHX7t8Uz1Kmmpb
N/eOj789vufSKksfJedFk1VF1riba3rty1fJT2X1Ji+uk++rcrtxb27CQ+Mn
+Fo3S5tHSd3M3XaDL6kfJRdPHycnx/e/HtG/vvnmwQPnZuUcRnmUbGGOD90m
f+SSZJw05Yz+W+/WVbao+d9l1dAPLt02y7KiJ+FvkuQFDj5JvstWq7ymj3j9
F+nOflhW12GWyeWubrJ1nTyGLYOh8+16BL+cTejRdDqtsrfw9OVj+rmGV2ew
nm+/Pk4eL9MKxoCtx8/o17O82cHrsvlNWc6Tx/ATf1zOYRaPT5Nvvzp+cF8+
2hZNBQ+/vjylDzbLsoCH/uUkeQBjf3XvfnICW0+/ytZpvnqUVOnuz3k9m8D0
4yVfTmAuWb3Mq8ws+rLZwvzi39DKTzebVRaWqEs6gY8WeZE3WfKsLDdmPY+3
QFNNXpStxXx9fPLVxxbz1fHD5Ntvvkru3zv+xi5mJtP6c4qzmczKdbymf5sk
T/IZUFZdFmZR/1Yui9YvaE2XMLv5tginepXNlkW5Kq/zrI5OUp60S6d/j5Pn
6XU6T1dZkTzOYDmZfPzy3aKs5snlLM+KWZa8Sqs3Zm/4t2ZjXv7tq+Sr709b
+4LbOk/+AiQ+p5X6ffg5nf+55il1N+GyfxMu0yr9L7UJNSxoeBeuJsmzbB3t
wBWMEz6jxX8HHGpRlg3d4+0KyPU6Iu/vgCsCt5yWlSXjH6+S46/vH5/0k7FM
bw2soyz+vNheb3soFab3alsDZ6tyO8NyHX9Mk3xdpItFvsrh43k0u4MDyz9g
//PrpZnmi8fJvW8eHD/82G379uTb5OGDb5KT+/cj1rGRmfx5mhbXP9MaXF7A
oa1BVLzN8PBfpNer7Mkp00GTVtc4rWXTbB59+eXNzc2kJnai1xaZ0JebFPhC
/WWB35xnq3SXzdPZmy95BBZNV49fJa+yit6EhLOpyukKue0s3dZwiNMdbCLM
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
wnD/D+LssGzlcQEA

-->

</rfc>

