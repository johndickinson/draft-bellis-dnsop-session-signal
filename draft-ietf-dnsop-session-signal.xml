<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-07" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="19"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model” popularized in the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAG7fr1oAA+2963YbR5Yu+D+eIof6YVINwKQk27Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefLiMrls0iZbbFfJy01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY+/cXP4+qPk3vHJw/H98cm3Lt9Uj5Km
2tbNvePjb4/vubTK0kfJedFkVZE17uaa3vvyVfJTWb3Ji+vk+6rcbtybm/DQ
+Am+183S5lFSN3O33eBb6kfJxdPHycnx/a9G9NM333z9tXOzcg6jPEq2MMmH
bpM/ckkyTppyRv+td+sqW9T8c1k19A+XbptlWdGT8DdJ8gIHnyTfZatVXtOv
eAMu0p39ZVldh1kml7u6ydZ18hj2DIbOt+sRfDib0KPpdFplb+Hpy8f07xpe
ncF6vv3qOHm8TCsYA/Yef0cfz/JmB6/L5jdlOU8ew7/41+UcZvH4NPn2wfHX
9+VX26Kp4OHXl6f0i82yLOChfzlJvoaxH9y7n5zA1tNH2TrNV4+SKt39Oa9n
E5h+vOTLCcwlq5d5lZlFXzZbmF/8Ca38dLNZZWGJuqQT+NUiL/ImS56V5cas
5/EWiKrJi7K1mK+OTx58bDEPjh8m337zILl/D6jMLGYm0/pzirOZzMp1vKZ/
myRP8hlQVl0WZlH/Vi6L1ge0pkuY3XxbhFO9ymbLolyV13lWRycpT9ql08/j
5Hl6nc7TVVYkjzNYTia/fvluUVbz5HKWZ8UsS16l1RuzN/yp2ZiXf3uQPPj+
tLUvuK3z5C9A4nNaqd+Hn9P5n2ueUncTLvs34TKt0v9Sm1DDgoZ34WqSPMvW
0Q5cwTjhd7T474BDLcqyoXu8XQG5Xkfk/R2wRWCX07KyZPzjVXL81f3jk34y
lumtgXWUxZ8X2+ttD6XC9F5ta+BsVW5nWK7jX9MkXxfpYpGvcvj1PJrdwYHl
H7D/+fXSTPPF4+TeN18fP/zYbfv25Nvk4dffJCf370esYyMz+fM0La5/pjW4
vIBDW4OseJvh4b9Ir1fZk1OmgyatrnFay6bZPPryy5ubm0lN7ESvLTKhLzcp
8IX6ywK/Oc9W6S6bp7M3X/IILJuuHr9KXmUVvQkJZ1OV0xVy21m6reEQpzvY
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
P1AgO3GvBypnBUuGmwJ6YpVsP0lOwH306as7SaoMmJDSd4gT5ONFIti+mQPJ
5KEaXnI8YfakdOTa2axOw/9HKPYr0PYpUYzyuBdt5H0TeHcKHoA49HlDaWWS
t0dmO80yZ7GCqiAljFKj02m5bSamWKzj0EtNNz9WNQIOAHVhko7C5IOyl0ua
BRHxHgm+BbzsutTc7Y41xl8gm2ykbT88E+t35t3WvZ4oTKpvN+FdIL24nz7f
Lj5sxVAb1ICulqZNDvX0MZ73Pe+2DYLdAPGMOLUKfYME2BzjLnKHBJ+avj+W
7WG9xBWmHpr2VhIwgw9s33bz2l6BhSqwUrNTdBgxbanvF8rnGlfWstVp/VYa
Uv8TAXeANIqm6D7ZxTTEPOw7idIP8JJstUPWAV5cC6LO9ix5dPWqMXTDIt5D
TYR1nc0orD8yqrH2iClYmxSut4tIl5REabow1Eevw8vdYZ+3MRRTeQ+mRJcM
pZDMFZFehkQla0CoxdPhnfS6o2HOTZmPBeeYe1GgG+46G56ugEnPd7Thdc/F
0z1njRaLxjLLJqVth+HmrRiP5LyaaJLJDEJu2S06cYNFJzzx0AmHIg9JnJ2E
gqGRvjBUNznMG+gKi/s1bJaVar5M2adVW7+3CDiQO2/zqiHPNBmp+8NWIybL
qW/0QXnbTcA0KBfdEWS6+Bi1TMmsqGLVKtqGVuown0KRrFGKcDis/0TMqJrW
ubZwdJwZbAfqHEoQ+8pCHXfurKXuU45mu0/sh9Nx8ekkn3g6rn06dg9WefHm
o2fj4rOJlj58JrJ79LRff+nh4Eyu+ccjkOpHuUPM7pIcE9i10zspQPNfrQQE
WO1pVTHUZkeQ8aDjUivOllJ9QJZknx5+MEp0y8l8w6Yt3GVcYaivBjQho/4E
nKa0sc6tnRcT2LDzE2abDM3W2GVDc2KNMppYSzWzMiZWzIJb5XYqWUux6Atq
nnuBv//JHqAqFy8l5y7dNQOEFEijplMqOULmbcOIt8oKVDyVsrIVWiLOul/G
PgEbCftSN00J4jbaLngo6p024ib85ASW/yq5euEW7Pnzh2Y04YSenb34/uqH
f5YZ3erPbXOsxk9Or073DfRPmWOlVPLIPUpOk5Ovx2h/bAvshsFoutm1BPu0
auBwml8T/ltaHHFDYOnfe83QUZFxoRm6Unss7nt01tLvCV6OfolhFgqrXWTX
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
yenh/h8Am3w7tXEBAA==

-->

</rfc>

