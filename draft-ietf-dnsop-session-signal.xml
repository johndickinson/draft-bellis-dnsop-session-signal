<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>At present, DSO is specified only for DNS over TCP, and for DNS over TLS over TCP.
Any use of DSO over some other connection technology needs to be
specified in an appropriate document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS over TLS over TCP,
is outside the scope of this specification, and must be determined using some out-of-band
configuration information. There is no provision within the DSO specification to turn
TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that same
server for at least one hour.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (<xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only response-requiring
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a request message the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a request message is unsuccessful for some reason, the responder
returns an error code to the initiator (for acknowledged request messages)
or aborts the connection (for unacknowledged request messages).</t>

<t>In the case of a server returning an error code to a client, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive request message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive request message MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST be
sent as an unacknowledged request, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive request message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as a request message Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay request message to a server.
If a server receives a Retry Delay request message, this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&RFC6335;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHCgnFoAA+W963YbR7Ym+D+eIof6YVIHgElJlm3V6jVFS5TNU7oVSdlV
Z3rmrASQINMGMnEyE6RgSWv1K8wb9LP0o8yT9L5G7MgLSMkud81pn1aXBCQi
47JjX7+993g8dk3eLLMnybNX58l5kzbZYrNMXq+zKm3ysqjdvJwV6QoemFfp
ohnnWbMYz4u6XI/rrK7hkXGdXxbpcnz42M3h50+SB4dH34yPxg8eu3xdPUma
alM3Dw4Pvz184NIqS58kp0WTVUXWuJtLeu/rN8lPZfVLXlwm31flZu1+uQkP
jZ/he90sbZ4kdTN3mzW+pX6SnD1/mnz99ePHI/rb0eHDr5yblXMY5UmygUl+
49b5E5ck46QpZ/S/9XZVZYua/15WDf3DpZvmqqzoSfiTJHmBg0+S77LlMq/p
I96As3RrPyyryzDL5HxbN9mqTp7CnsHQ+WY1gi9nE3o0nU6r7BqePn9K/67h
1Rms59uvDpOnV2kFY8De42f09SxvtvC6bH5TlvPkKfyLPy7nMIunx8m3jw4f
P5SPNkVTwcNvz4/pg/VVWcBD/3KUPIaxHz14mBzB1tNX2SrNl0+SKt3+Oa9n
E5h+vOTzCcwlq6/yKjOLPm82ML/4G1r58Xq9zMISdUlH8NEiL/ImS16U5dqs
5+kGiKrJi7K1mK8Ojx7dtphHh98k3379KHn44PBru5iZTOvPKc5mMitX8Zr+
dZI8y2dAWXVZmEX9a3lVtL6gNZ3D7OabIpzqRTa7KspleZlndXSS8qRdOv19
nLxML9N5usyK5GkGy8nk49fvFmU1T85neVbMsuRNWv1i9oa/NRvz+m+Pkkff
H7f2Bbd1nvwFSHxOK/X78HM6/3PNU+puwnn/JpynVfqfahNqWNDwLlxMkhfZ
KtqBCxgnfEaL/w441KIsG7rHmyWQ62VE3t8BWwR2OS0rS8Y/XiSHXz08POon
Y5neClhHWfx5sbnc9FAqTO/NpgbOVuV2huUq/pgm+bZIF4t8mcPH82h2e3uW
f8D+55dXZpqvniYPvn58+M1tt+3bo2+Tbx5/nRw9fBixjrXM5M/TtLj8mdbg
8gIObQWy4jrDw3+VXi6zZ8dMB01aXeK0rppm/eTLL29ubiY1sRO9tsiEvlyn
wBfqLwv85Txbpttsns5++ZJHYNl08fRN8iar6E1IOOuqnC6R287STQ2HON3C
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
AA==

-->

</rfc>

