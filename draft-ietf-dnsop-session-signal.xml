<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Extra TLVs”.
The Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response TLVs”.
A DSO response message is not required to carry Response TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Extra TLVs”.</t>

<t>Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>It is anticipated that most DSO request messages will be acknowledged
request messages, specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Extra TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-extra-tlv" title="Retry Delay TLV used as an Extra TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses an Extra TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Extra TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>C-E - Extra TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  C-R  C-E | S-P  S-U  S-A  S-R  S-E |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
wcmUS4eoDWAef3IED6qN+EFdBHwv8euH8OHl6cVfnh2fPce/sidnwRlMnD1C
taGKb+k0k2pHLpMyzz/FRR8hmP92cv7i+Owl/hWT6U/plbAP+ifmVDVouXtP
JpXQU4EGJkBhRREmkeNq39KmKez2gS6RCeLAQvjId/DNxemz15enJxFe5hmI
aW0ytS6XeSiCpt/9yEsfv776Bf8G6x6LT4H4QC84R0cMRgQSlppQz7UOcO51
7emCPJZMWLXt+kC1qZiDUxbKU9B35jpu3k5WVDFXry/zQQSBtKLWvZdcC3Zs
BT+x+iPivjGs9FBfHEkawJ/V+jt/svvhYKk0SjG530Hkgcbq0ia8i1gZ33yO
/vt+EL5MV/TDhaT3mCvpPdtRgSksb8C28QRvLrz/al6XmJ750e3owtLjBCNC
x4AUsjyuJ5rH/pm8lpsfOi7pa0euXZwU2qD05dTEGRqTtidPk+dCIVsrRaLq
4Vcj9O4rG/QQqmZUeLWq3XLlN1aa7SwI+/Q6M5Itd5SZ/bYqs+O+EGpLq7Nt
vojSruKKsaHqq/8PlJJNfPYeZ9OFtL1WKRa/K+tUnXWKTm3qwWlIpX3FqbSc
kfP+vWTW+lwcvvKZrz3qq34i5LWr1z6tDM2FMrRpFmc2mbK0qEzMfUZN2n1A
6i1Hc74KrdG6tJ5yNJ9ZdmdBGtKIBk0456H0tWL3K1br34jYUJKNxfhLKzJC
ze/5ogxZPj1cF83xqEAkR0kMEgNrrnkb/QWcdNNaMHIjvvpLnEZtCvQ88v9B
JxKV/Lnfud7vTPhHA0ewTn0/tVUpOYUdyUB5sa1uOK791Gggh7CfO9eBJ9HP
pMcQRhPHmnzsixEAnUMcC5+5Q3RM3OvdDyRS5cI9rzxlSoaWRKARnb6xISq5
xddWDJkOHu0NY4m6gYVUhTtAJoiopaZ0ntn6rgUut6x8hDK/AvODMhypv9Gi
XdFugqzclRApc0mJ7egPq6U0De14gjZnCYGaKu6R+vOAmrtpJiZtqZMCkpp0
Q9aEGjHN0oZMN2msSekI9lZJjw6i5YMBceOzQluCl9XsGJmjfk9Mn0WOceGu
FwOdKJF+0b5ZrRJhrejcfabie/BJNNT5w3hcd8Bgm2O6OyhnxDk0mDL/NuRg
EhMC0iQjsZZz3KHOqGNIDcE2Nm1AdHQX+BaFLS9p7otoWB4KuFFVNiLWd8Lj
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

-->

</rfc>

