<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-04" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="August" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS Stateful Operations OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and 
termination. This mechanism is intended to reduce the overhead of existing 
“per-packet” signaling mechanisms with “per-message” semantics as well as 
defining new stateful operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new DNS Stateful Operations OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Stateful Operations, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for DNS Stateful Operations
(see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyzer tools that have not been updated
to recognize the DNS Stateful Operations format, this will result
in the Stateful Operations data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Stateful Operations data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a DNS Stateful Operation request message)
or a responder (when sending a DNS Stateful Operation response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a DNS Stateful Operation request message)
or an initiator (when receiving a DNS Stateful Operation response message).</t>

<t>DNS Stateful Operations are expressed using type-length-value (TLV) syntax.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>A DSO “Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>Two timers are defined in this document: an inactivity timeout and a keepalive
interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactivity timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="session-establishment" title=" Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>DSO messages relate only to the specific “session” in which
they are being carried. A “session” is established over a connection when
either side of the connection sends the first DSO
TLV and it is acknowledged by the other side. While this specification defines
an initial set of three TLVs, additional TLVs may be defined in
additional specifications. All three of the TLVs defined are mandatory to implement.</t>

<t>A client MAY attempt to initiate DSO messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement DSO, and the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>A server SHOULD NOT initiate DSO messages until a
client-initiated DSO message is received first,
unless in an environment where it is known in advance by other
means that the client supports DSO.
This requirement is to ensure that the clients that do not support
DSO do not receive unsolicited inbound DSO
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support DSO,
once the client has sent at least one DSO message (or it is
known in advance by other means that the client supports DSO)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “DSO session” is in
progress. Clients and servers should behave as described in this specification
with regard to inactivity timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it to setup state that it has not yet ready
to delete. For example state could be a subscription as defined in 
<xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>TLV dependent</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODE’s is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN 
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dso-data" title="DSO Data">

<t>The standard twelve-octet DNS message header is followed by the DSO Data.</t>

<t>The first TLV in a DSO request message is called the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are called Modifier TLVs.</t>

<t>Depending on the operation a DSO response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>An “Operation TLV” specifies the operation to be performed.</t>

<t>A DSO message MUST contain at most one Operation TLV.</t>

<t>In all cases a DSO request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a DSO response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same DSO-TYPE as in the request message. The specification for each DSO
type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a DSO response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first DSO TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a DSO message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If a DSO request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE DSONOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a DSO message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for DSO messages, an Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, an explicit Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<t>Operation TLVs SHOULD normally require a response and, therefore, set the TLV
Acknowledgement bit in a request. However, for some Operation TLVs, this may be
undesirable and the TLV Acknowledgement bit MAY be cleared in the request. Each
Operation TLV definition should stipulate whether an acknowledgement is
REQUIRED. If the TLV Acknowledgement bit is cleared in a request, a response
MUST NOT be sent. Modifier TLVs MUST NEVER set the Acknowledgement bit. The
Acknowledgement bit is NEVER set in the response to an Operation TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | A |                        DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='A:'>
  A 1 bit TLV Response flag indicating whether or not an Operation TLV requires
a response Acknowledgement.
DSO-TYPE:</t>
  <t>A 15 bit field in network order giving the type of the current DSO TLV per
the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every DSO request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. DSO request messages sent by the client 
elicit a response from the server, and DSO request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DSO 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
DSO request message MUST elicit a 
DSO response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>The Keepalive Operation TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive Operation TLVs are sent for the
sole purpose of keeping a session alive because that session has current or recent
activity that warrants keeping the session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then that would
create a circular livelock where keepalive traffic would be sent indefinitely to keep
a session alive, where the only activity on that session would be keepalive traffic
keeping the session alive so that further keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive Operation TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive Operation TLV resets a session’s keepalive timer,
and at the same time requests what the Session Timer timeout values should be from this point forward in the session.</t>

<t>An acknowledgement is always required for a Keepalive Operation TLV and the TLV
Acknowledgement bit MUST be set in the request when originated by either the
client or the server.</t>

<t>Once a DSO session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactive session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the inactivity timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactivity timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the inactivity timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated DSO Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated DSO Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>TODO: We may wish to change this, now that we’ve decided that we don’t need
all requests to generate responses.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="client-handling-of-received-session-timer-values" title="Client handling of received Session Timer values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then received
Session Timer values dictated by the server. The two time values contained in the
DSO Keepalive TLV from the server may each be higher, lower, or the same as the
respective Session Timer values the client previously had for this session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and the keepalive interval given in the DSO Keepalive TLV
indicates the maximum time that may elapse before another message must be sent
or received on this session, if the session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value superficially
appears a little more subtle, though the meaning of the inactivity timeout is unchanged –
it still indicates the maximum permissible time allowed without activity on a session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this session is unaffected by exchange of DSO Keepalive messages.
Upon reception of an inactivity timeout value from the server, that
becomes the new maximum permissible time without activity on a session.</t>

<t><list style="symbols">
  <t>If the time since the last non-keepalive activity on this session is not
greater than the inactivity timeout, then the session may remain open for now.
When such time comes that the time since the last non-keepalive activity on this session exceeds
the inactivity timeout dictated by the server, the client MUST then close the session,
as described above.</t>
  <t>If more than the maximum permissible time has already elapsed since the last
non-keepalive activity on this session, then this session has already been inactive
for longer than the server permits, and the client MUST immediately close this session.</t>
  <t>If more than twice the new maximum permissible time has already elapsed since the last
non-keepalive activity on this session, then this session is eligible to be
forcibly terminated by the server, though if a server abruptly reduces the
inactivity timeout in this way the server SHOULD give the client a grace period
of one quarter of the new inactivity timeout, to give the client time to close
the connection gracefully before the server resorts to terminating it forcibly.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
session has been established.
Once a DSO session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operation-tlv" title="Use as an Operation TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An acknowledgement is not desired for a Retry Delay Operation TLV and the TLV
Acknowledgement bit MUST be cleared in the request.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a DSO response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as a Modifier TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As in <xref target="RFC7830"/> the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO
request, response, or both. If a request is received with a Encryption
Padding TLV, then the response SHOULD also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs. See <xref target="I-D.ietf-dprive-padding-policy"/></t>

</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactivity timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactivity timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactivity timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval timer come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit DSO
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a DSO Keepalive message resets only the keepalive interval 
timer, not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timeout timer remains conceptually fixed at zero, and an inactivity timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress for
as long as the state is active, until it is cancelled.
This means that a session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active state 
that is awaiting for events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactivity timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactivity timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic.</t>

<t>A longer inactivity timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactivity timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactivity timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle-boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As in <xref target="RFC7766"/>, to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).  However, it is noted that certain primary/
secondary configurations with many busy zones might need to use more
than one TCP connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC0768;
&I-D.ietf-dnssd-push;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
pvLSixLxhK6UW/EJ5F/c5EwYqvXeYlix/KKlhDCXUWNrodS2ipg0TclZ6Q/8
kzaCDUdkw6JWdjq+xlVLhCROYaNMhh4kPQcXXpRr8XtICnJL/YtmeY26uxNy
IZ89EqGc0ox0SD9b5O8L7nw9CJ6EYoYDc9peo7iarimkQfwtnBPulKNyypw9
dDlk02zF4JjSRDTYW+QKdCVKsNG+aDjljsOYx1pKy1FMbvssUas+M6eL9D4v
KBZF4OUv92TjVeJL/ZxDb+qA22sTb3O9Btq0mLQ2BKYNePCAtdKyVJ8VMo/5
kSkUVPaTRiaJ6Gnrpa8NkhHWBVGLqegsYFiVkeNg/dZkXJ762Okal2n0NBpD
UqRaFkvftryY+KHd5RgEVOFHBwjUAYC9FQ4XuulHulDPmE1P1fb6190kPLKk
2OXEZrjrhU35Tg+znsNvIVN7a3CXVokus/fFcr3knaTzRZuyyFYYbeDOa1mp
zd8YfvVdoe/AkOI0VMaHMyeJ7MaPQayAMiHEedq3E9uS6V6b0eBNglhmhGLK
SbIvtTlqW7T4K2pKOm45xbtaz6VFGVf87Z6c2m+WzGmmfjjEHrNNiypdPy4p
6Zt6y4qjK5NqN9TvSMwaF6sJyP16wgkBE0tB/a4+PsMIHW/2VPqsEgfFVO11
g2aMS93BtmcBIiWjgKe4tjpNlLc4EPDPtytbDC3d1HowLp6NbiYDNXPSxGlV
OXai/RPodl9qWiQ93Vl+WZXDeLjuwgLie06uemlPfwcJJw5KOmpyGqpVzhER
kPfqmluLUPS6XnF0/QpwsfgcBNkuO6Cf3yeSg9vwXefSlNCuZ5D2t5bGwozm
6NS+86SgXNJIcj9duvut1Bak2XiPDk7JJmqXk8qN7ji7gyKjuIKj2Wqd2q1P
C+hIxEx37bea93En4f67YgE7/C6KeSHt4Ma0+o5h2kMAxC6LWbT0snG9XrWU
fM1dulvqYLLNPGX+28wOqTrivLhJ2pRm7ECRWCCmlGHS1t/WfBmuMTR6D1i1
NR7LtYp3x6X2tvXViKgzAALvpJ6mdNGWtE8gPTkY8qwOXuSLUKp7V2q/Zrvt
4HUir1N+ngSDqYMrV+5Qg/cytIy7d0XBKLQo/krJG5u92+6x1MQ1ZkdIXv5W
0cKRuZxO8xjRwFFRxcY1hzGcPYB08EyL6VFfwKPvQdImOHzi7sossOl2oX1/
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
5J37v3solHlA3QAA

-->

</rfc>

