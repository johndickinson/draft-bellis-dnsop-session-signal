<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of eight different contexts.</t>

<t>The first four contexts are requests from client to server,
and the corresponding response from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV sent in DSO Request message,
from client to server, with nonzero MESSAGE ID indicating
that the request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Request message,
from client to server, with zero MESSAGE ID indicating
that the request should not generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
in response to a client request with nonzero MESSAGE ID.</t>
</list></t>

<t>The second four contexts are the reverse: requests from server to client,
and the corresponding response from client back to server.</t>

<figure><artwork><![CDATA[
                    +-----+-----+-----+-----+-----+-----+-----+-----+
                    | C-P | C-U | C-A | C-R | S-P | S-U | S-A | S-R |
+-------------------+-----+-----+-----+-----+-----+-----+-----+-----+
| RetryDelay        |     |     |     |  X  |     |  X  |     |     |
+-------------------+-----+-----+-----+-----+-----+-----+-----+-----+
| KeepAlive         |  X  |     |     |  X  |     |  X  |     |     |
+-------------------+-----+-----+-----+-----+-----+-----+-----+-----+
| EncryptionPadding |     |     |  X  |  X  |     |     |  X  |  X  |
+-------------------+-----+-----+-----+-----+-----+-----+-----+-----+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
11gpEGa546Cg31wb4RH3wjWGSNm8EcjrhNrRk7ATaKS765N4dovMVujo7zLz
m1pzGOkz/OP49Rnz52XW1BEEbGJa6h0H2+9a/Lkb74r3pL9qqUKaz8BVIUpL
ZsblJXzVcDj4wmu1cpiXXqLYMZR9uJ3qwOWBCjo3sg14WW59GjoF9P4rcf+7
hQ/Lgkcx/7VarFw/dGXIweUDcSU5Z8bHbFknMf8uJHfdmLvkBTJAD+HGaQkO
KYh5BaIAalOiUN515TgjT7J7HHsvWR2ilydj8DXeyJuCJdGQ9SQN06UqHnXN
YsLY53jCAzVz3YL6uNyO05s0X1Ltu5iQa1OKQLPwhCOupT+6abRk1KLn2nSC
nRvc3ur9V6GTRaczxBmrTyTjxjW9pZpcu7ro+/dx8wjtmyqaBdrB1NyKjdaQ
8FsdxtOaDwoFkasOlmGjFliuMl+rNNvmglJmF8Ng8nXGyd8SWIqDmMr5eMGS
pwM3tK0RTrmCqxb7Zf7yLrRFlGACUwYbLxEsJ6qMXIxP3O2hwfim1nGhlDhn
U1vaVtSwFjZcbuji4BEpija2F7Z2TtuKwf6KtVlruX4MXdxCMzHOb2u1QYuM
E09En27Xhh3tan+GfbgQVZwbG005GhyP48GBON7lq82KD4rnoi61tBSljtD8
LetuaaqLs1858HTNqiNp25cOV9Ykliapw2gqkdLOzyjqq7ueLgo66/EOLeeb
xLWa+XoSiLqstkoP+TQLmtOpCqYLJyC0aWn/dqNLVWobcOuuntZ2knWIWe0S
UufQwEbhOpisqHW7h9aOTPMKu8iydsz5Ja2NdzqZ8f2LcEzdTXbPQdWSl9vQ
ZNekMKRifApGFFiIz69kUwjpILSwnu596F9iuXjNSQ3Ylpj6LGnzihCOBWeZ
67KGJimmNUpQiO9uZPU7tHR6VRhfmNqtkKJAoVSvS8uZ4ftOaD9lxCj2pC8S
B9iYCcXPs0WKQi27HkILOtM97+i7xIuxz9oPjJi4lDBFnFOSCCXphdpU1hbU
Eqrkq6ev38BY6VyD+PyRVfPNmTSRtEhABhk3l4SbTnrPaEFtcqRytVZe85U3
/SQlG8nWGrLGRQZQDoF9NI6JyDcHHyujGZlcCxE8OBguduBR78U6YK6qQ6h/
tKVe1+AKO14MSgd2VwZWnbzdU3Pk+4j0HVgReKiAkLiB2dgFlIKHTh3X9kgW
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

-->

</rfc>

