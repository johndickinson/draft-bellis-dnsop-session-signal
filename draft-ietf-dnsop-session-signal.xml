<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>Two timers are defined in this document: an inactive timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Explicitly discuss how this updates RFC7766.</t>

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactive timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

<t>TODO: Discuss DNS transactions (query/responses) compared to DNS operations 
(e.g. DNS Push subscription) since DNS operations are not described in RFC7766. Perhaps we should add “DNS operations” to the terminology?</t>

<t>TODO: Reference that DNS Push defines additional Operational TLVs. Future 
specifications may define additional Modifier TLVs.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.
DNS over plain UDP is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>(QUESTION: Given there are now two DNS-over-QUIC drafts should we include a
statement here about the applicability to QUIC?)</t>

<t>Session Signaling messages relate only to the specific session in which
they are being carried.  Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to inactive timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both inactive timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  INACTIVE TIMEOUT (32 bits)                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVE TIMEOUT:'>
  the inactive timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactive session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the inactive timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactive timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the inactive timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactive timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactive timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactive timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactive timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactive timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the inactive timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactive timeout timer remains fixed at zero, and an inactive timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactive timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactive timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
inactive timeout, and this is not an error. This is why there are two separate 
timers: the inactive timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-inactive-timeout" title="The Inactive Timeout">

<t>The purpose of the inactive timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactive timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactive timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactive timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactive timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactive timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactive-timeout" title="Values for the Inactive Timeout">

<t>For the inactive timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactive timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer inactive timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactive timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactive timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactive timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAJaDWlkAA+1923YbR5Lge35FLvXQpAeASV1t7dnTTZOUzW6JpEmqvT0v
ewpAgiwLqMJUFUihJZ0zHzL7c/MlG9e8VBUgyvZ0++yubNkkUJUZGRkZ94gc
DoemyZu5e2mPz67slavrvCzsVX5TZPO8uDHTclJkC/h6WmWzZpi7ZjacFnW5
HNb87LCmZ4f7T8w0a+DBx/sHL4b7L4ZPTL6sXtqmWtXN4/39b/cfm6xy2Ut7
WjSuKlxj7m9o1vML+1NZvYPZ7PdVuVqad/fhoeExzmsmWfPS1s3UrJY4S/3S
Xr46si9ePH9uzKScwrsv7QpA+8Ys85fG2qFtygn9v14vKjer+eeyaugXk62a
27KiJ+GvtXmBQ47sd24+z2v6iJd9ma3jD8vqJsBmr9Z14xa1PSoLHDpfLQbw
5WREj2bjceXu4OmrI/q9hqkdrOLbZ/v26DarYAx7RZ/R15O8WcN0bnpfllN7
BL/xx+UUoDg6tN8+3X/+RD5aFU0FD7+9OqQPlrdlAQ/9y4F9DmM/ffzEHgDC
6Su3yPL5S1tl6z/l9WQE4KdLvhoBLK6+zSsXLfqqWQF86Te08sPlcu7CEnVJ
B/DRLC/yxtnXZbmM1nO0WjpATFG2FvNs/+Dp5xbzdP8b++2Lp/bJ4/0X8WIm
AtafMoRmNCkX6Zr+PLLH+QToqS6LaFF/Lm+L1he0piuAbroqwq5eu8ltUc7L
m9zVyU7Kk/HS6eehfZPdZNNs7gp75GA5Tj4+fz8rq6m9muSumDh7kVXvItzw
txFizv/nU/v0+8MWXhCtU/sXIPEprdTj4eds+qeaQeoi4aofCVdZlf1fhYQa
FrQZC4cjgKqAxUYoOMTDDDwu+oJRAKDXAMzExeNn/PRoQU//6QY/7c5zPbIX
qxoYU5VHM12Xi/Rjmudtkc1m+TyHj6ctiv/m6RP79MUT++LJt09jIJYyyJ/G
WXHzM01v8gJgXWRNfudwA86ym7k7PuS9aLLqBs/lbdMsX3799f39/aimI61H
BxnB18sMzmb9dYFvTt08W7tpNnn3NY/AMuH66MJeuIpmws1bVuV4jhxvkq1q
2JDxGtYPkGWTBsXG2DX3DvafgPlDDai+Kau8uV3YrJjaY57DHh79hSnK8+Dt
nGcDq1Jps/9sCP8+3jdmOBwCmQJRAjjGXN/mtQXxtVoANdqpAwblapvZwt13
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

-->

</rfc>

