<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-04" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="18"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>Two timers are defined in this document: an inactivity timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactivity timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>There are discussions about using DNS over the QUIC transport protocol <xref target="I-D.ietf-quic-transport"/>.
Specifications for DNS over QUIC are still preliminary and it is not
yet known whether QUIC will provide a suitable transport for Session
Signaling.</t>

<t>Session Signaling messages relate only to the specific “session” in which
they are being carried. A “session” is established over a connection when
either side of the connection sends the first session signaling operation
TLV and it is acknowledged by the other side. While this specification defines
and initial set of two operations, additional operations may be defined in
additional specifications.</t>

<t>Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to inactivity timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactivity session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the inactivity timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactivity timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the inactivity timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactivity timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactivity timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactivity timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timeout timer remains fixed at zero, and an inactivity timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactivity timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactivity timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer inactivity timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactivity timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactivity timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC0768;
&I-D.ietf-quic-transport;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
Z5P35v8A1t3JtDHFAAA=

-->

</rfc>

