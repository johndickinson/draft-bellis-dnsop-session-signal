<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Extra TLVs”.
The Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response TLVs”.
A DSO response message is not required to carry Response TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Extra TLVs”.</t>

<t>Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>It is anticipated that most DSO request messages will be acknowledged
request messages, specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Extra TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-extra-tlv" title="Retry Delay TLV used as an Extra TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses an Extra TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Extra TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>C-E - Extra TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  C-R  C-E | S-P  S-U  S-A  S-R  S-E |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAPpzVloAA+2963obR5Ig+j+fog79w6QGgEnJlm31t99pWqRsTuvWJNU9
Pbvn7FcACmRZQBWmqkAKLeld9ln2yTaumZF1ASlZ7u0ze9TDMQlUZUZGRkbG
PcbjsWvyZpk9SU5eXiQXTdpki80yebXOqrTJy6J283JWpCt4YF6li2acZ81i
PC/qcj2us7qGR8Z1flWky/Hhd24Orz9JHh4efT8+Oho/OnT5unqSNNWmbh4e
Hv54+NClVZY+Sc6KJquKrHG3VzTxq9fJX8vqbV5cJT9X5Wbt3t6Gh8YnOLGb
pc2TpG7mbrPGaeonyfmzp8n33z9+PKLfjg4ffefcrJzDKE+SDUD5g1vnT1yS
jJOmnNF/6+2qyhY1/15WDf3h0k1zXVb0JPwkSV7g4JPkp2y5zGv6iDFwnm7t
h2V1FaBMLrZ1k63q5CkgDYbON6sRfDmb0KPpdFplN/D0xVP6u4apM1jPj98d
Jk+v0wrGAOTjZ/T1LG+2MF02vy3LefIU/uKPyzlA8fQ4+fHbw8eP5KNN0VTw
8JuLY/pgfV0W8NC/HCWPYexvHz5KjgD19FW2SvPlk6RKt3/M69kEwI+XfDEB
WLL6Oq8ys+iLZgPwxd/Qyo/X62UWlqhLOoKPFnmRN1nyvCzXZj1PN0BVTV6U
rcV8d3j07V2L+fbwh+TH779NHj08/N4uZiZg/TFFaCazchWv6V8nyUk+A8qq
y8Is6l/L66L1Ba3pAqCbb4qwq5fZ7Lool+VVntXRTsqTdun0+zh5kV6l83SZ
FcnTDJaTycev3i3Kap5czPKsmGXJ67R6a3DD3xrEvPq3b5Nvfz5u4QXROk/+
BCQ+p5V6PPyazv9YM0hdJFz0I+EirdL/VEioYUHDWDieAFQFLNag4BgPc1nY
LxgFAHoNwMwyO37KT09W9PQfr/DT7jyXk+T1pgYWVeVmpstyFX9M87wp0sUi
X+bw8Tw6RXt7lhEANPnVtUHMy6fJw+8fH/5w17H58ejH5IfH3ydHjx5FPGAt
kPxxmhZXv9IaXF7AglfA9W8y3MWX6dUyOznmDW3S6grBum6a9ZNvvrm9vZ3U
xBf0/CE3+WadwgGvvynwzXm2TLfZPJ29/YZH4Fvm8unr5HVW0UxIAeuqnC6R
bc7STQ27Ot0CEgGydIa3TzLNmtsMiIiA+bqG/boqq7y5XiVpMU9OeI7k+Omf
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
lSrOTVFBb8UX5wil/rO5Wgq/osA5Kyky0Ect2rJ1pvXWrgkYJNwrQPw87LMJ
EGTFjjyspuYWNycW0jDhp+ir8NvHZloiElSnnB9eZj97rUGTkzheC2VZ1ASB
e+QUnWoDMn2XMbgN16lUVklnaN93vQRMSvQgVMkuqPRq/imVnrf+tvXlsKzh
hLs1CTGqz4aPN5fXv9c4I2dMAqMQyMOXUbcn26Rjl8eIn/dfsTuas5Ha3+6f
SKNabHeDUcrStY3t1Lar4/6msIXWD6LEyKYcx5U3uVACWbVO38H2hY7MnTd6
I+rga29Ga7XJpXX09Zf2ZeN61smWd66kUj9xbleD9KOe/z3s+d+j5JEf55Ce
eZR8m3yXPE6+T35IfvyUz0JL9t/4v91t689PL8//Jgr+/qOH2PGqPuh98sOX
g8iZWbH/eWp0x5GRX1Msz/Ho4ed2acdHQJaVel02HtDJfcJKR1ur4tpMpO/h
qY3DSviLtp7mLdRCjFZa9ZVsjnyKjqipbZL0xyxuZ05iBZnihhqYj5iThUBY
a/5znRMOBzuv+2ebiLi9qdWQLbHuZNoFtruZxUphb2gU13gMUQHGvUEyFQcJ
GYUyZGmrEhv5ySem2EvKJewpUiBEJkaT45qo918olmf3t1tVIbYhd73q4nHm
kCn2YuWanxP1TWOFSFfR57Y1MSoUzfHy1en5+avzJLSgT5MK1Fk00WLgBMZM
TBJ4UF1miW1Wn7YNf8Z3KlER6hMFefwa7lH2osF4avUbHu4uI6XaKFG+kcp0
5Miz0rFY77QLIIjkoc46i4HylgaGxYbmlqaU9ovwGu0v8eXTLIaYrPOqk8Wg
k2ygWgON66KBvR26LfWrh9cvBoOzhGTYLKstGuflbEPeEuVrIUnS99ZhkroJ
OW09ln+Q3CSlQT2RPQ/VVgUgeBfRRDyFUSm1nF8U+EAJKlz8rhOuxOqQBZg7
C5nkrrzoBY366KhBpC2pOS+p9S9LXMhbO/Oge459Z7F00maZfyCZs909jcyi
jS8/lWvD8VBCte+yaLUgv4u7GwHIdTPfvQxkInA4KhdZg3Y2NGiIUjPRtkuq
UzvqRBl/o22ntHxVZMnvxCdxjmr7nnRGPfQmreiu5D42E+222cvVh0a3yidx
XqfMng8Or4CdQPZ2lltl+DoY2Bhz3Xnf4nJr6jW2N7o9AImpWorJFhXpvarL
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
bAqVwSqfbkyNXUM1usVw7ZOpxP0vb+p759Q7AQA=

-->

</rfc>

