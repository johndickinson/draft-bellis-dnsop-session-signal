<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
TwpiIwEA

-->

</rfc>

