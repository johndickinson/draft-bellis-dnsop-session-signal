<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a response-requiring DSO request message using a newly-defined DSO-TYPE that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAN/tnFoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtUWiURk
XHbs67f3Ho/HrsmbVfYoefLiMrls0iZbbFfJy01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY8fuDl8/VFy7/jk4fhkfO+ByzfVo6Sp
tnVz7/j42+N7Lq2y9FFyXjRZVWSNu7mm9758lfxUVm/y4jr5viq3G/fmJjw0
foLvdbO0eZTUzdxtN/iW+lFy8fRxcnJ8/+sR/eubbx48cG5WzmGUR8kWJvnQ
bfJHLknGSVPO6L/1bl1li5r/XVYN/eDSbbMsK3oS/iZJXuDgk+S7bLXKa/oV
b8BFurO/LKvrMMvkclc32bpOHsOewdD5dj2CD2cTejSdTqvsLTx9+Zh+ruHV
Gazn26+Pk8fLtIIxYO/xd/TxLG928LpsflOW8+Qx/MS/Lucwi8enybdfHT+4
L7/aFk0FD7++PKVfbJZlAQ/9y0nyAMb+6t795AS2nj7K1mm+epRU6e7PeT2b
wPTjJV9OYC5ZvcyrzCz6stnC/OJPaOWnm80qC0vUJZ3ArxZ5kTdZ8qwsN2Y9
j7dAVE1elK3FfH188tXHFvPV8cPk22++Su7fO/7GLmYm0/pzirOZzMp1vKZ/
myRP8hlQVl0WZlH/Vi6L1ge0pkuY3XxbhFO9ymbLolyV13lWRycpT9ql07/H
yfP0Op2nq6xIHmewnEx+/fLdoqzmyeUsz4pZlrxKqzdmb/hTszEv//ZV8tX3
p619wW2dJ38BEp/TSv0+/JzO/1zzlLqbcNm/CZdplf6X2oQaFjS8C1eT5Fm2
jnbgCsYJv6PFfwccalGWDd3j7QrI9Toi7++ALQK7nJaVJeMfr5Ljr+8fn/ST
sUxvDayjLP682F5veygVpvdqWwNnq3I7w3Id/5om+bpIF4t8lcOv59HsDg4s
/4D9z6+XZpovHif3vnlw/PBjt+3bk2+Thw++SU7u349Yx0Zm8udpWlz/TGtw
eQGHtgZZ8TbDw3+RXq+yJ6dMB01aXeO0lk2zefTllzc3N5Oa2IleW2RCX25S
4Av1lwV+c56t0l02T2dvvuQRWDZdPX6VvMoqehMSzqYqpyvktrN0W8MhTnew
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
I3gBbwE+H8eY3mJj7B0QZuPr/GrVACsvg5COX8xaTWwZMrq4cfT8vD3TLr6G
l9iZ0H7nDTls+hZmS3NHpXqCEXQeFV32Tqr+bepxNXlTwRLWJ5a/vpO8NPlv
oaKD0wwq5P0pVUzVijaCuaOOybyu/kmLv0CsS5tk6MvXo698RSKRqFZ9VWWw
DnnlseSWUocEHasqMpAjZspHi8pg31a6qChKt6JEq90hq9hgCVGZTJMnGbWV
UT2TaqC3K5r4qPJ6kvykNLbv6jpdCK2ujiH2EfCONsEHXMVlJ1F2nSqWRjCF
a7RnU1sCsFGjGRVNssu863QeQY2x6glj2GZcKAkGlRp1tpJz2IdJcol76E8/
ZHSHZDKnxZApUuAfQN0P6+1zkSnKzJCsg7qFvLGwPlYGUd00mGbEQ3rjOK+b
uMh8F3rtesoZJd7WVHF5SxmOMtUN1neqjeFOsvWIMbSxQmLrO2EuNtcyj4uy
YIwSblxdZxZ3g6THXxkWThi6e/Hi7PFV8uTs2enfKffDN5NsN1MNFOjLpRjO
4qSvOutMAWQcF0M+j8O/aKGabZAhah8SNhXOiUTIzSflEUfuI3H7lmHfSy7p
0FZLKdNiu55mpM/HuWN4mWYY+ZhcT0be3Udej1gzPEpa/FrLQNykvqYrqCPF
nCSFRj4Wq5Iz+cBi2K6AFWfsxMN7UZMVIwdA2kQAOYTzZKHugsOb4HEqhK6o
6HE6/xkUWq54LCfP7kc0GWHa5ZqMjTrbzsvwM3lYea/wQhFQz29EMWNXvWr0
ZB+zRjfdkeaKHR2XanZSERbfD1tOGxMFlOvtsHwWH8gGu7LIxsZGDNn6VAut
8AQagn5HKvMeM/e8MF8NBalazkH2QEZmvA9zxXdsb3FxcgYPWpfGdUaxQows
GLl9ZJU4Oe9G+x/JYyMXl7cRyT3L1LmRFlyfvt7m1N2p+xw2Ly25eAT3S0eN
Q6tKkr4SNjv0ticQUGesttaJwkBbL6gaP2fapDxT/56RVoESFiBv8m8OiSCt
dzI7IIcykK8AowmbMpPuOJx1b316gjEduRAa42RbJlS4+3nTrDKTKNyIBJGC
InYsLgdK7aoMZl8REuSZ5KofxE/4WgbsupIr6EsEXoyYqCroqtpQAHyd1bo+
RTWaAvvt3fFJwDeszgVlKwyfEXGrjOvb41xBe/NsjKAFjmlTH23LirQALhKp
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
AA==

-->

</rfc>

