<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Extra TLVs”.
The Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response TLVs”.
A DSO response message is not required to carry Response TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Extra TLVs”.</t>

<t>Response TLV(s), if present, MUST occur first in the response message,
before any Extra TLVs.</t>

<t>It is anticipated that most DSO request messages will be acknowledged
request messages, specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Extra TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-extra-tlv" title="Retry Delay TLV used as an Extra TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses an Extra TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Extra TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>C-E - Extra TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  C-R  C-E | S-P  S-U  S-A  S-R  S-E |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAM8GZVoAA+2963obR5Yg+D+eIpf+YVINwKRky7bq22+KFimbXZKoIqmq
rp7ZmS8BJMi0gEx0ZkIUStK7zLPMk+25RpzIC0jJck1tz6qabRLIjMuJE+d+
GY/HrsmbZfYkOXl5mVw2aZMtNsvkfJ1VaZOXRe3m5axIV/DAvEoXzTjPmsV4
XtTlelxndQ2PjOv8ukiX48Pv3Bxef5I8PDz6fnx0NH506PJ19SRpqk3dPDw8
/PHwoUurLH2SnBVNVhVZ426vaeLzV8lfy+pNXlwnP1flZu3e3IaHxic4sZul
zZOkbuZus8Zp6ifJxbOnyfffP348ot+ODh9959ysnMMoT5INrPIHt86fuCQZ
J005o//W21WVLWr+vawa+sOlm+amrOhJ+EmSvMDBJ8lP2XKZ1/QRQ+Ai3doP
y+o6rDK53NZNtqqTpwA0GDrfrEbw5WxCj6bTaZW9hacvn9LfNUydwX5+/O4w
eXqTVjAGAB8/o69nebOF6bL5bVnOk6fwF39czmEVT4+TH789fPxIPtoUTQUP
v748pg/WN2UBD/3LUfIYxv724aPkCEBPX2WrNF8+Sap0+8e8nk1g+fGWLyew
lqy+yavMbPqy2cD64m9o58fr9TILW9QtHcFHi7zImyx5XpZrs5+nG8CqJi/K
1ma+Ozz69q7NfHv4Q/Lj998mjx4efm83M5Nl/THF1Uxm5Sre079OkpN8BphV
l4XZ1L+WN0XrC9rTJaxuvinCqV5ls5uiXJbXeVZHJylP2q3T7+PkRXqdztNl
ViRPM9hOJh+fv1uU1Ty5nOVZMcuSV2n1xsCGvzWAOf+3b5Nvfz5uwQXBOk/+
BCg+p516OPyazv9Y85K6QLjsB8JlWqX/qYBQw4aGoXA8gVUVsFkDgmO8zGVh
v2AQwNJrWMwss+On/PRkRU//8Ro/7c5zNUlebWogUVVuZroqV/HHNM/rIl0s
8mUOH8+jW7S3ZwkBrCa/vjGAefk0efj948Mf7ro2Px79mPzw+Pvk6NGjiAas
ZSV/nKbF9a+0B5cXsOEVUP23GZ7iy/R6mZ0c84E2aXWNy7ppmvWTb765vb2d
1EQX9P4hNflmncIFr78p8M15tky32TydvfmGR2Auc/X0VfIqq2gmxIB1VU6X
SDZn6aaGU51uAYiwsnSG3CeZZs1tBkhEi/m6hvO6Lqu8uVklaTFPTniO5Pjp
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
u3H28vjp1dlfzq7+RkHe56+vdjk4vqB3Y3BFfzo9fXX8/OwvwENeXp1e/OX4
+T9oRa4LC3S79F+ZULlQAjUi2/jv75wxTv2b0GwNNcFeZ01szB+ouz4RM1Rn
r6JehZK3peUrwD0osp08qXG9d681dHpPDJRYFqU2LvlJkqXWbrpnzl87BM4n
aEVZAO63ihZdZFWU6SGn/1Qo41flcSaNMGZHbqeta2RLhDfEFq76N28FmOEa
Lb24oyvheEgJDO6osyJlDKLOPVDiS0ibl3khSTQU47dZqWw9VHo1QIBb3Opr
pJeaw+ldeshDDseHPexDCcn7go/Wcgvvb4379SwEapliPL3FOdm+3mleK1ZY
c7Bf+4pf2dx7Ws4KqyDvrBQUZa0Nzufa9AnkTd+7oZ9GSphwuCarco4FOxWl
UKn/BVBBT9vawMTgH9JzfNAhVp3impt0oByxSONI95HvjhIff/cQw+l68hTg
LwzMWZHUI8kOW4rDxBITc3YPSIkrMxm3tduQLkoF1bhIYm9F8f5D7QWy61Fy
Yx03UR1XLcixMut2KbM2C7uTFZSkrmrVWrnfTkIWdOisoCoI0koRlylHIhSQ
CMOQOdP2Fg5T98UW2koV3t/WUADyAlRgTGwQ0FDQGZ5WXKp4sczeSSGHkbeA
5gtb40Zq4Yp7iBDenzz5yNoNr3weGtURTNe8pKiD9TRrOE2ySVx0ZSnZPM4b
gOnnRGTKRUhrGtAjW8A3lgV7nLic+1KbMrKkfQo6m3RRtqDfsfihshWEqD2d
mZ3QoCyyBcaKRyvnkzQtwoSpVsobactm2GgI/JPi+UKqcLQhK1LYqAl6v0k5
3N11TUhtF2uv6wY/tMfOaxHo+QgeR3GH1zeNXHOGFDVYV0xRa3+Ps64LMEeq
GpvQxRbXszrb6vUuCcx1CA4Sqz4GbcI+4LWoo7mU0NhK2WNtH6WZLbo1tdDX
xpWkVY+7GYN5py6zD9ylWl3aFbzntPp6ON7jwBxZ54DQNEsJbQcC2FBEOrf+
5nNKCzPEQO/vTcE0ifvLYBIJ1WiPgRh1UZe4X5Z1RE4K5aONTyntKiqfj1DW
oeEsYvX7Nfii4xL5pDHTXoW8JdaU3NSo27jYB9YK0SHwcBE1piS+mLmk0nWo
Vc3bRMwcblk3RGB8TIactZrQaNti/os0x7ouZ0w6vUm82hS246gHyB/YRcaJ
nLXn9YMHe4/zdA80b0mVo07nYU9eWJ/MUttW3vVDyfR5tGfBlQF97TsiCwUW
X/I5xQOzYxWUbB623NtAtCW+0Aq6wXTDsXRqzPwEkGg2uIDF+Y7Bd4ClhaM3
qHrKUBTS5lX0VjM2y7q4Rawp/zRk1O/pxPLZOKCrDD7O0B/kTlQIEqBdnvGv
hrrybr/vItvX4NFrRnXy0naVypbYcPCb4SR2V+pA4dMGtGwx53fUfUhsWsI4
LJxJAOFi2NpiQI2sOadW9LYJDaac3SVxbPJw3njAWElUA6Ta86ehGz3wYJrQ
tIzGgL3/2KTYnsoZVaPvyO/ZEEbinZa+sNXpyctLDANDzT/Q1fM1p8gOWMki
irwjZgcFz5rTSxynEKo+sWtazUr84eEPWPZRo640l2+d5lLMUNK/GGm8AiWp
Ra49xTFNIaqoxHujnU/5aGrSgZ2hE0wfTMHpSZ9PuO9BknE4/EsrvpRV0hPL
FRpHcGpmm4prYhFXOkyLzt5Sszfp4tNXmlfm1HpEO4f5vQv4akhYN0lFYsPW
/JdEhg08FtDtISenaAKwuC5d7PCEpVifYeM9nVJnDqnbreWjV5iUSDmGy3QL
W6Bmmplfi9OSYFfPL+/plrGrpwBJWZqEUaegLVc5LUQ6SiwwDd5KeRiaFWyo
YldKjnmq56cvf776BanFIaAiSuI52S6iEvHfJiXIZmw3FTAn+5Ehb1VuigaP
aZefqPffUd9PGOZQPnoIP4/g51v4+Q5+HsPP9/DzA/z8OPRc8ICMx7/pRwf6
5pO3F//7ZtdAfzm+ODv+6flp8vL1i59OL5LzZ8n506vTq8tPHeizVvTbYYRp
5HHuuKXcisctmv3o8ONHEgxfHZ+cnL38WTEt5FtLzMnhu8PDSZKcN6bZiwTI
4N0duTgluoiqwzXa2CHVau2J936vKWjABfVIw/4201+pNgK1n1hXWqGROXu4
0xPXWjpamLw/SKPCOTY9GD582R7VQyZ4ELtIl7icpZIn++e1hLyJEx6Z6jni
2558/smQJGXC4r3WJDS8f60jjXAJceIMCAprkh1QQEbv60IZQ4ccpTnis5DK
AlIKKGxMbabeZY7FFjjCRuMPsJKAiNBT3NJaWkVIgoCvh8FSR7NdZ1J8G5eC
VBLUw1TPcI3Q0EW30sCx50g2loWP1yVwCy5KLWmfl5sVpky1Ejtr+jT/O8WC
rLi02S1wk5st2b6onFXNNZOJ7mOlF0ROEPyKxrcEQmxQ3skZnCb2CO0j+IAW
WHyhiIhvmlAvQTcRRzSIab+nPD0f8VxD64JB2h/+AVp37vt+bNQOY0zM0hWn
BtZuPWo4rdtXs0Reh4jbdueFKGPiJp07k3ZAta7C86Jri11GI6m4XAtV4kzy
5XKDxj617Syza+rqs5pK8tZdQRVMkTv/+j78lzsG+pC87MSgYXjBv7c+siED
vf8+fUUf+nDNxjb8m11m98Pfb0UxCt21IvPZl1uRl2mRvL8mI1QXj9RCOAq1
j+Sac0ZWK2iIlVilgCNbC517b3FtMWQeOlRm6yKg3Ji9a2pB6UVe1VJ3Ur+h
UUJeW19tPWPxKCu53lzYTh0qNt10ms7ehJxTSmp8On6VjG1a6chp/qrFJ+/y
GFiF9ALr4H63+FjuXa8tItZNsMHVvY5X18lk/w3L/fS1RgSzf73HsN44jnPk
NQnUZihs0jjkonDF9kJ5yAsY0kZ5jiLJpL0MDjhGQxAddvAL73eCJ2W6PcCB
Pb+g+55kTKM11PHABX+0KoB6i6JI1VXazG6EYrcftOcd5/UxQE4BIF5Z/E8B
DR9nQmD5ZKBI1Uuu29ahIPwo5qNmT1rkpJOGfj9yIqBScuLz6bs0fIB0D1Hv
mIFEjBUJFdEDumR0LQgVPiSX+M0lfnOJ31ziN5f4jesu4Tes5wMn8HH+Xn+J
BuRoH8Kv/fzsy60n2M5w1taE+uc/cD2qWCQtfv5v9rcd33yx9Yj9yLat45I7
nFdGkQtwrSSjmvi6V5WcmEVFNlA9wZRT55sVbjYafsVmRCzfmNDOgoVWfON8
V7ufkxbA3WFAox2KvNNkahyDtV5Jfh5qjaXtYlR92yypPilwIh891+oCT2U0
qawq6nRoJi45M9cMTomJJer/jRS5DtnEZRUHkXO7HRfX3oiCIGSJd7gf6ijE
2vv5tGqT5Fd/dnux0a7+Yng2nIXYARc779KaW+elVM6ecxwmnaNm/xEXIs04
mchYuR884P4GDx50jfdMl9ldiOEpWcr1HbYmCiAtbDcs7s4phaEnrRTf0DL4
6qa3jzup8juRcKRFUdUwaVoijg4PDyOwJ/uhoMrB/5YTvF+HOHdszsP7xvdD
xbrOwRzYYJA/xcEgwQRxdvzyGCtDkm9P60zBiaDIev6K6gNcAMaTFuu9O/QS
2lioF6RKjdgBlSaTYpxoo5ErfZA8tmnV/+t/8tBO/fMvL/Wj//U/ZbrtxK/j
4sst4+jIrgOE5rMXr3x7tHkWLeiisx6lnWTkR7PQU3hHF7YdXpQkHuPIR48J
c/tHEMzlMK1lsn+TvUsxgnGVLg/U3JlSkuVtwaohKEofeCDQ7zEC6gMlzGxq
kglInZvBh+4D85/4P+YX/B1GOsTr0ZImLvGmYjQifP7s6fjqp5NEHj2KGP2u
Jx/CR8HMp8x41xuPxvDzDD5/XaQ133IyaiKNZusl/EMoCvEdr9ICrgZZ/Ihr
fsD/0VjfHo6fff8sHst//eyHQ/j6J/r6wg6P9VtBrkXkWX6zLGdwHugk9O89
xfeedd8Tzg2vpwXZivkNF514rXLyXneaPSylDHfbr8yJFU4T607NK8nrmsrJ
vJLuxvinIIq0pX348PHHj0Sj7TCLKkMSxSGymAO/JshJXYCa4geND04+9h5Q
X1Yzx5D2l6Wv34FhwVKJFePqqHKbr7OZNyqlc99n8nSnvt5zVJpxnzO4kJXD
5QUifIDJThzzU4ntjauO4jLp0tHtf5uDyCMONjxqKlatpj96zKRqK6lYcdFt
+wZqJyG6fsl5jZiGRrliFRaCpCg44mvaUezMZ2fFvcZ8QghBYJW+kYqumO7a
iwGmCndRb7RKZFFi7ORimWPT5XI221R6IBzO0LA8Wc9gUVSCl6rIWLqJn6JM
2EFGOou9nYjs8VIxn5Bqb/B+7ricOpS/59qkvpZW6X6xIDlQm2clFHVyLNUP
1bxv0Zx2G2KQK9o5+kaC1aO7e6X5ZidhfUI7nNQllqJQ1ZzDVgifOASAWrVL
hIRGiLlK6PrXdXKSkdEbGQLd33jhnHGfcmjJRBtkaKhyCyaRe4PF1c7oTrkc
7HepdZjmLbajy0Ok/W//9cEDIL8PHvy3/8f4J0Aqx1D6joBwJqtYZSiI5PVK
ojCVvBAEQtHo55chvMim/6ZV5GHz9MDU5uT8460QIhhyjEOOYUgzjG2QoXnt
PqkCC4maSBx8sw6xSlGIBjFwcu6w/1yu7V7XQ7VHapV3E4acZyrW21DweZGR
4wUw1hsFmbbANGnxBgHmQMVKniI7H7mLdLkGoAF5BPL7r9h7ucQ4wbQauRdp
8esGi3YXb2AzF2nJQvcVTPo8W0nJaVhpXiU32XKNZAqVwSqfbkyNXYM1esTA
9slU4v5fnredlo08AQA=

-->

</rfc>

