<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but a DSONOTIMP response could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
that the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request,
unless specified otherwise by the relevant specification
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused whilst that operation remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving a long-lived operation uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as
a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive request message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>)
a Keepalive request message MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST be
sent as an unacknowledged request, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive request message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as a request message Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAANTaloAA+W9+3obR7In+H8+RS39h0kdACYlWbbV337bNEnZPK1bk1Rf
zs7ufAWgQFYbqMKpKpBCS3qXeZZ5so1rZmRdQEp29/Se0RlNy0AhKy+Rcf1F
xHg8dk3eLLPnyenry+SySZtssVkmb9ZZlTZ5WdRuXs6KdAUPzKt00YzzrFmM
50Vdrsd1VtfwyLjOr4t0OT781s3h58+Tx4dH342PjsZPDl2+rp4nTbWpm8eH
hz8cPnZplaXPk/Oiyaoia9zdNb34zdvkz2X1S15cJz9V5WbtfrkLD41P8cVu
ljbPk7qZu80aX1M/Ty5enCTffffs2Yj+dXT45FvnZuUcRnmebGCW37t1/twl
yThpyhn9b71dVdmi5n+XVUP/4dJNc1NW9CT8TZK8wMEnyY/ZcpnX9BHvwEW6
tR+W1XWYZXK5rZtsVScnsGkwdL5ZjeDL2YQeTafTKruFpy9P6L9reHUG6/nh
28Pk5CatYAzYfPyMvp7lzRZel83vynKenMB/8cflHGZxcpz88PTw2RP5aFM0
FTz87vKYPljflAU89G9HyTMY++njJ8kRbD19la3SfPk8qdLt7/N6NoHpx0u+
nMBcsvomrzKz6MtmA/OLv6GVH6/XyywsUZd0BB8t8iJvsuRlWa7Nek42QFVN
XpStxXx7ePT0vsU8Pfw++eG7p8mTx4ff2cXMZFq/T3E2k1m5itf075PkNJ8B
ZdVlYRb17+VN0fqC1nQJs5tvinCqV9nspiiX5XWe1dFJypN26fTvcfIqvU7n
6TIrkpMMlpPJx2/eL8pqnlzO8qyYZcnbtPrF7A1/azbmzV+eJk9/Om7tC27r
PPkDkPicVur34W/p/Pc1T6m7CZf9m3CZVul/qU2oYUHDu3A8gVkVsFizBcd4
mcvCfsFbAFOvYTKzzI6f8tOTFT39+2v8tPueq0nydlMDi6py86archV/TO95
V6SLRb7M4eN5dIv29iwjgNnk1zdmY16fJI+/e3b4/X3X5oejH5Lvn32XHD15
EvGAtczk99O0uP4brcHlBSx4BVz/NsNTfJ1eL7PTYz7QJq2ucVo3TbN+/s03
d3d3k5r4gt4/5CbfrFO44PU3Bf5yni3TbTZPZ798wyOwlLk6eZu8zSp6E1LA
uiqnS2Sbs3RTw6lOt7CJMLN0htInmWbNXQZERJP5uobzui6rvLlZJWkxT075
HcnxyR+YLD0j382+BvidSq/Db0GWjR8fOjcej4HW4UxgOs5d3eR1AuJwswKS
TuYZcLmsTtKkyO5Ier55e/Lm9CyBtQ0J02T/9PLNwcTB/5+sQHqm1zAAbP5q
U+Qg37KkDI/ewTLzIsEdzUGyFI2rdUARvPUo2dQoM5vtOhvDXbtubsa36XKT
JftXL/90AOKuaNL3E5g4EFUCH8Fsq0xmPk+am7RJ4BhgFjokHNMqKzdNPXJw
CKu8oMmMaLfhxlbbNR3LOp2jmOXPXZosKtjrO5DgCe6QDI/7kL2HmdNcQQbD
CCkcNu2XX0tY8YT3e5XP58vMua+Q/1RwlYkScPczWC5s0QIUirSo1yBka7/Z
ZXMDIhRWVCTvTt/iNKYZbk0Ok85S3KXlNqnX2Sxf5Nl85Hhy6QqExogHuIXf
I3V++PB/gDqB2sSnT/xv1DE+fWKK80++vIQn/y/89vtvv//0aeIuN7MbO7MZ
TKVcLODZcISjZFkW1+MlXLG5P0UaGKefwaSy5O4mK5yc6022ohX6YfFTnIMn
nrzBtcKeTLMC9r3Bbb5JbzMgyxVw7bTI65Wjg8b5ZLDtU+BhN3CCeGRwxvD6
ui5nxIGI5uCtZZ0ZGqtxYWntSWPizgv+sM7hcjG18jzSZV0m6fw2Bbq7hofp
1OvNGqcOI1a4c6ga8Nt0ERM+3Ow9bBIu8AxWuH94kJwp8SSvdCn+vPlknn3/
wxGcDLw5e79e5sAtl1vnybtMygJOnbZjDw5hLC/cg6kA2Tf5rJ4kf77Jl3Xj
33mTIuUAxyFu1JSOldsENnAJdNTAkH5vxhXwH1yI38xkH47Mj4XU9IcsW6d4
3kDoRMdKNI+BaA7whJMqqzdL2j6QOTXTMD68gtfO4S7DOuSxpspnrJTnq3Up
7NK+0a9LaSpZAgNG8uDNH4fN53UtYb8niXthb0OqJwUUU5QNsIxpDgRY5bCX
ICRgFnAl4anZMkc+CNObLZFi4JOyKDJl3MTQaQ5hOD6QOoPJ6ZR5W2ocGZe4
hn9nRDb/uQH5lNXMpWDkJqVTbf1u8lC2DLccmO4+3kIScTCPZwejXcy6xaaR
cwpR/CqWDZQK68SBHsq8e5dXyEXCoRtiip7Jj5zOc4i5Jw9g7rCzoB3JsDS+
iBC9X8ixaFfgLSA6y2pLuwlEleRISSveatwY+Dns5cS92FTEp2mcFVhT0yCN
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

-->

</rfc>

