<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-10" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="June" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes packets in a particular TCP connection
to be sent to an anycast server instance that does not know about the
connection, the normal keepalive and TCP connection timeout process will allow
for recovery. If after the connection is, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
alqBHkkuEPf/AGzr8JbvdgEA

-->

</rfc>

