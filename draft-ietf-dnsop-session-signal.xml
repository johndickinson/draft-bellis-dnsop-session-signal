<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="19"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.
This mechanism is intended to reduce the overhead of existing 
“per-packet” signaling mechanisms with “per-message” semantics as well as 
defining new stateful operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, for DNS Stateful Operations (DSO).
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of TLVs, including ones
used to manage session timeouts and termination.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Additional TLVs may be defined in additional specifications.</t>

<t>It should be noted that the message format for DNS Stateful Operations
(see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV format) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DNS Stateful Operations format, this
will result in the Stateful Operations data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the Stateful Operations data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to the use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in anyway 
with normal DNS operations or with existing EDNS(0) based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DNS Stateful Operations there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DNS Stateful Operations
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a DNS Stateful Operation request message)
or a responder (when sending a DNS Stateful Operation response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a DNS Stateful Operation request message)
or an initiator (when receiving a DNS Stateful Operation response message).</t>

<t>DNS Stateful Operations are expressed using type-length-value (TLV) syntax.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful
Operations including definitions of three TLVs for session management and 
encryption padding. <xref target="lifecycle"/> presents a
detailed discussion of the DSO Session lifecycle including an
in-depth discussion of keepalive traffic and session termination.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO messages until
a DSO session has been mutually established, as described below.</t>

<t>A client MAY attempt to initiate DSO messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement DSO, and the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>The DSO message format (see <xref target="tlvformat"/>) includes a bit in the TLV structure
that indicates whether or not a particular DSO request message from the
initiator requires a corresponding DSO response message from the responder.
A “DSO session” is established over a connection by the client
sending a DSO request message of a kind that has the acknowledgement bit set,
indicating that it is a request message of a kind that requires a response.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits its response, the server considers
the DSO session established.</t>

<t>When the client receives the server’s DSO response,
the client considers the DSO session established.</t>

<t>Apart from cases where it is known in advance by external means
that both client and server support DSO,
session establishment can only be performed by the client sending
a DSO request message of a kind that requires a response.</t>

<t>Currently the only suitable such messages are the 
DSO Keepalive Operation TLV (see <xref target="keepalive"/>) and the
DSO Encryption Padding TLV (see <xref target="padding"/>).</t>

<t>If future documents define other client-initiated
response-requiring DSO request messages, then one of these
messages may also be used to establish a DSO session.</t>

<t>Clients MAY send non-response-requiring DSO request messages at any time
on a connection, but a “DSO session” is only considered established after:</t>

<t><list style="symbols">
  <t>the client has sents its first response-requiring DSO request message, and</t>
  <t>(at the server) the server has received this request and transmited its response</t>
  <t>(at the client) the client has received the server’s response</t>
</list></t>

<t>Once a “DSO session” has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a “DSO session” has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this DSO session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it to setup state that it has not yet
deleted. For example, state could be a subscription <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation (see <xref target="delay"/>), where the RCODE indicates the reason
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN (Name Error)
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header is followed by the DSO Data.</t>

<t>The first TLV in a DSO request message is called the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are called Modifier TLVs.</t>

<t>Depending on the operation a DSO response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="tlvformat" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<t>Operation TLVs SHOULD normally require a response and, therefore, set the TLV
Acknowledgement bit in a request. However, for some Operation TLVs, this may be
undesirable and the TLV Acknowledgement bit MAY be cleared in the request. Each
Operation TLV definition should stipulate whether an acknowledgement is
REQUIRED. If the TLV Acknowledgement bit is cleared in a request, a response
MUST NOT be sent. Modifier TLVs MUST NEVER set the Acknowledgement bit. The
Acknowledgement bit is NEVER set in the response to an Operation TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | A |                        DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='A:'>
  A 1-bit TLV Response flag indicating whether or not an Operation TLV requires
a response Acknowledgement.</t>
  <t hangText='DSO-TYPE:'>
  A 15-bit field in network order giving the type of the current DSO TLV per
the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="operation-tlvs" title="Operation TLVs">

<t>An “Operation TLV” specifies the operation to be performed.</t>

<t>A DSO message MUST contain at most one Operation TLV.</t>

<t>In all cases a DSO request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a DSO response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the MESSAGE ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same DSO-TYPE as in the request message. The specification for each DSO
type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a DSO response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first DSO TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a DSO message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If a DSO request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE DSONOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a DSO message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for DSO messages, an Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, an explicit Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with the Acknowledgement bit set in the
operation TLV MUST elicit a response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with the Acknowledgement
bit set in the operation TLV elicit a response from the server, and
DSO request messages sent by the server with the Acknowledgement
bit set in the operation TLV elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DSO 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
DSO request message MUST elicit a 
DSO response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive Operation TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive Operation TLVs are sent for the
sole purpose of keeping a DSO session alive, because that DSO session has current
or recent non-maintenance activity that warrants keeping the DSO session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO session alive, where the only activity on that DSO 
session would be the keepalive traffic keeping the DSO session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive Operation TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive Operation TLV MUST have the Acknowledgement bit set.
It resets a DSO session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO session.
If a server receives a Keepalive Operation TLV without the Acknowledgement bit set
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive Operation TLV MUST NOT have the Acknowledgement bit set.
It resets a DSO session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO session.
No client response to this unilateral declaration is required.
If a client receives a Keepalive Operation TLV with the Acknowledgement bit set
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate. However, it can be noted 
that for clients that implement only the TLVs defined in this document it is
the only way for a client to initiate a DSO session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactive DSO session.
If the client does not gracefully close an inactive DSO session,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO session, specified as a
32-bit word in network (big endian) order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO session, if the DSO session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged – it still indicates the maximum permissible time allowed 
without activity on a DSO session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO session is unaffected by exchange of DSO Keepalive messages.
The act of receiving the message containing the DSO Keepalive TLV does update 
the timeout associated with the running inactivity timer; that
becomes the new maximum permissible time without activity on a DSO session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the new inactivity timeout, 
then the DSO session may remain open for now. When the inactivity timer value 
exceeds the new inactivity timeout, the client MUST then close the DSO session,
as described above.</t>
  <t>If the current inactivity timer value is already greater than the new inactivity 
timeout, then this DSO session has already been inactive
for longer than the server permits, and the client MUST immediately close this DSO session.</t>
  <t>If the current inactivity timer value is more than twice the new inactivity timeout, 
then this DSO session is eligible to be
forcibly terminated by the server and and the client MUST immediately close this 
DSO session. However if a server abruptly reduces the
inactivity timeout in this way the server SHOULD give the client a grace period
of one quarter of the new inactivity timeout, to give the client time to close
the connection gracefully before the server resorts to terminating it forcibly.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
session has been established.
Once a DSO session has been established, if either
client or server receives a DNS message over the DSO session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32-bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operation-tlv" title="Use as an Operation TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the DSO session and underlying connection, and 
not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO session as a whole, and the client MUST close the 
DSO session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An acknowledgement is not desired for a Retry Delay Operation TLV and the TLV
Acknowledgement bit MUST be cleared in the request.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a DSO response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as a Modifier TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO session begin as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval. Just because a DSO 
session has no traffic for an extended period of time
does not automatically make that DSO session “inactive”,
if it has an active state that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO sessions and the costs of maintaining inactive 
DSO sessions. A server with abundant DSO session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO session open for a long time, to save 
the cost of establishing a new DSO session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO sessions whenever they have no outstanding
operations with that server, and then create a new DSO session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO session.
A client MAY close a DSO session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO session, twice the inactivity timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the DSO session, the server SHOULD consider the client delinquent,
and forcibly abort the DSO session.
For DSO sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in more frequent DSO session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
DSO sessions.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive DSO sessions open for very long without
reason, but when it does have an active reason to keep a DSO session open, it 
doesn’t need to be sending an aggressive level of keepalive traffic.</t>

<t>A longer inactivity timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive DSO sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive DSO sessions.
This configuration is expected to be less common.</t>

<t>To avoid repeated teardown and re-establishment of sessions,
the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactivity timeout value less than ten seconds.
If a client receives a Keepalive message specifying an inactivity timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>This does not mean that a client is forced to keep an idle connection open for
ten seconds if it doesn’t need that — a client is free to close an idle connection whenever it chooses —
it means that servers cannot <spanx style="emph">require</spanx> a client to close an idle connection in under ten seconds.</t>

<t>[Do we really want this restriction? How soon does the client reconnect after tearing down the connection? –SC]</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO session,
the client MUST take action to keep the DSO session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the DSO session,
or may allow the DSO session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the DSO session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO session. An error relating to one particular operation
on a DSO session does not necessarily imply that all other operations on that
DSO session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the DSO session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the DSO session then the client
SHOULD continue to use that DSO session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO session is the client’s responsibility.
The client makes the determination of when to close a DSO
session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Situations where a server may terminate a DSO session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session within twice the respective
time intervals dictated by the server (see <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay Operation TLV
(see below) informing the client of the reason for the DSO session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the 15-bit DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for DSO session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0x77FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x7800 - 0x7BFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x7C00 - 0x7FFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
Ma1tTgk2HBjXFO1G3O9sZGdmbhfM8f2m5xh2zx5YGplP1fetKYDrGov153PE
Hz6N4W2xlAECm5l5QoUW+gWCSFO1WYtZMmanSFUsbDRYv0cXuqWyUUK9E4FD
ba1rqqHGbRC39DzSYkzBKstR4G5IHhkg4KmcI2L7IAlVG3WP28UGVMzWnFJW
RlUmr1Ibz3BBIeHbaW/fQpZ1dumlZQLW38bXyqqknCpzzonN3FFPLwJq51wV
OiGZRYuddqpZJBBxd4BI6CCWyADSMhhF2S35rx/uacorSwLbOvIE0fb+XtKL
KMi3nQNm/swxpNzOAynwtTW4nGunCc+dJjbUgC7M77Sv8PmLszuGhdgVExgk
T1XYQeauMrj9uBBu0C0J3sYyhpHAUWgTSoSNF2KBG9Sf9z1WhKE2nsuQIshU
8WEsZRMSlHeJEWNmz2YlbQD3/svX0Ppi1ZiGBvrp8PTk8PsXx/7V25ffH5/6
18/966Pz4/OzXzrQr1rRl6gPZXM/FIfvkEBP9PbN4bNnJ69+UEwTMhAr0e6/
39+feP+a2KBwbInMxPva6cmMMQmmo1nLfc24Fx6w2rqMQtea0tNdNClrlPlm
+jNKxyjZm4pHYgCKd3riOkunnjU3onMoG2MeG/lYyJJUb8QED+I2ciXhbzb9
XKpjJurJyBBgibOb/PqTIUPeUN0QsT4Mr3UUrdBpPQ+Kp5UdUFmJwdeFMgo9
MzRHAkCkzABQKSp9GjbWC9nD1FSOAdVYSBhMLa9T3JJmPYqgI35FZWVUtAcJ
LS8FqSSlbcYuRVJxgCIHkzrbIJJd5WNZ+JgLwXLDKDos9Vq+CB1/qWYHWoCx
M29sI9zrzXvCLl4yFB4Gzq/NUhIvM1dSzbw0tLZdfqKqfJhIEDTOgC6WdgDW
LMgwz03QQbImBqqaENKMmvFco4GuCSllObbaXqrIO0+DIEyr5kgL1sU65/K6
u8Ukn5CAokY+dPWUX7XkqKcct26Cm9xcleLZQPw+6PN7LMHZ8HTyPZW97lRs
22ixoBp1DJQmcC3aHrGjVBJQ0CknICSLE/g35NqquMsXXrVu7rw9+BDh8+Ge
AElbnaGY03fDk3bQ8XIl1tNtAYRiJhh2Ias5j8tBJVOOto5XpK5PEgRD3XyX
WTzC+0c1NKgs0EBOD/mv5CCwr/ysFas6uuikVhjF1YuGZUNWKGlWmhSlxiKJ
fhnYTx8Evf2E6i4uyPvadkp3psefxM10WgHI7ZBUpl6HUPV8kzd2+LgxJUoq
R7PVZMCLIGxEgivIDoORFcQsOPIiur2G9i5OcTgByraP0d5bfOJ8RqyHIeJj
e+rb56DsDYyw7jRBJZed5NHGSHTYyFhDEjmrk3y+tLGBgAZ04XIe/BokdHIF
5WWzqXM1rZkSdXCPuW1Z7HJtsrNiJr6NhMRmdLYrN6/JSR4j3EfS+vsZ3SKN
3EjMAGGw0mw+v4oDZMgOQCASyt4NnyirWC5m0LEeXe8UAgRMovQOoDETjNew
/W6wvtIfNKM+imbU590HJHJHEVMsNooSAFQcHEAl2KYWYwEtgUq+Onrz1qNV
TcsFhCsLpPHEhv8KjUTaqH5c8qZiUzHpUKutJqmgEBtDeLtyjkRb2EG0VlEB
GRnKfthzwxl/UVKbBj6OlpZA+kcaikMXKy1gIzE8AWi15rJ2EqpjZAI3KECe
L1g6fLC/JrM13FVNh8PoSCmHxPWqAUnwvmnslb2N5XBCs82zYmtKz82tqddi
3pEEuHJwZVKPqJqB6CY1uoiMCAXoiBpUAgiQKVR00haIJj4KM1bschO7jk0S
C5o4siwl6rYDrOntEmsfZeKWZrvLAi7p5aac49jWB6JVRSfu0PaKHWSjta2p
vVlXnW4cNI+z6+rAl1u8p9jN/sShihphRTa+87MrSq9OKE2xfTXdLdy2IDp1
Q/a35CqN/N0O1g0gNnOPogk5q7xKqWeOFlosqS/R0Vy9wdxGZdMzKtdVoCIm
IheP63RU+hSIdJAJFlIVcrAVK65zkfUjUgYiKNTfosb2NriiJbJW0mdZGSbJ
9RplImna6pgU3S4VbhMKf89BfpyhPuDNh/0q65T6G9hKnOyz8apQm+iQKpBt
2grr8vGVojYSvdT3HaX2OyNUVYtAloQ32EZK8LlWvsixVF3DjSBITjqJ2xUx
m+Usk5s/DBXuAVFboQ7lnGxJedro+URKhAMsvEt6kVYNmwqAYtOaNusuN2+i
/0wfVjHDRKmlfjQy7NliS9kUKE+WZpUAjq6zGe6CrJ5Ydg3ODHnuluCiSkTc
mEEX0u2NvN4X0xeheAc3nCYZHCUbp7uiHh+qW3IydwcKfAM2WvRvtSlDe1Jh
j9hlREOS0803sww9cKt8VVE5IfbINcm24fIN7dpRuUjEZrNnoB4rCmViJ2Zy
ViitSmG9XDQQQHrDHp3hUXHlpoqWJ6NJKIzQhQMlHLBQjCouZTJQ1c8jWAyC
blAiciGShzoikJ8hFiAmNVmI8TB+gyhJJYVFeZ7JXJ1wxjAHFavlDK1UeTFt
xzXPPYTWz4sGdh3KhgZ90BRZTnuh2fqh7OnNptSTBKhFsUaZXIonsjFAKM5g
wphvO1qG5i+Im5pDgEJnOVjfyG5GHTs4ABptlFJ0c9K2x3OJISNK1Oj7FxF8
TyJuG2dy7+tcHLhUViZ6RaQzXi/4c2TyGCSpq5tNNxhZ5M5fnPH3/0pNfLWA
sUYnYODRc2zJc7dEql8ONxP3uA16TqD3YP826PnPQs9th54l7TG3hTt4G8Bi
dbeScmY4GzoEWmZT9AZ1RmWtKaEfocE8wpN/eRHbzu8RQaIaZzTWdFODlo9Q
A0rDF9IcIPYAOHl5PP7T4cm5pGjDZ02boyq1cHqJO8du0KK/Z9rGl0ip2xW/
5Pdnz/xZhRXoGn/45iTILaDjFrmU2lPeiFa+s9f/+uLk1Q/Hpxoppw3fOpSJ
lk7jUj0nDVzBUrDv2454KJgQzr5TL4Lt1BjQ9heqKDpcOGvEPdMpxHzLE5j2
YCUSTnHjXoGfUdE5PH8iZtpbHtyq+0Wj1O3ljRId8BbD1DZSGlm+kVWdNSjA
nc8C3uB0grvBMicSIpdAiBRR3AlFy+5UvUt9YMRAKadrSIxkQ1FGsb7VJ6mi
/VNaXmpINtQGo9voUscEEm0eFMOyqCW7zkLPwe2sMexI1LdxYnKf+B/ZJNIb
kSdS0OG7R2/eur7VhEzTKO9k9QVl55BMJHTEWrBYZsbdb5Ewye8gZrwBAJhy
E/DAgAmOyiEvu93lnbJ4qWWjrp2OMXgI85qIesE6qDjmWD7g3V8LGpGOQSJa
VBUkYmy4kBSOT5UlXOJlEJOm1iHC0ATSLnG8JWDxUot6dYoZAQAFPNvhpxC+
KwAD/LZY0T8DuERMR1gVrYtVhWKppWXVDm6Kka1q8uGJRGvW4LCgnXesw1Q/
kNsSoqVbOV6dr9lDdOsdYW2K5xuZ9OcYUipFM3uEw+0GT+pncq+Dk5VA1su6
VFeSk7Cp7WIf7ZS1eQo0FWPqZ2vhKKljr+eN4N1W+WhwGr81VH1LwscXDkKX
8DzR89GS4tO4VlaqZ4wWgefMl8nUirrO7oyNAOklxaGxC2gyPAblabrH0OhB
nUOt97KiLtIwCHmYoulHjcpiofxadKuvk6owW+eg6GiSIy0KuP/5P56BZkYU
aUmFZkoJgQLcbOuC3v0nTLUBOQdGCe6OiDYS1ytp+3BnEE3o3qTH90+wpbOj
/xXMIBHNTpTWmAKQalEfMIwMZY42zFVKYswdO/vCGTeLdY51uBByzGKOYJtW
73Os2UXxUy25WS7gievspkHpSt0tDRdODiU1hkrnaqFGgi58xh2IxP/i7uZ/
SVLV4ZMVH3ROoqD4fIjbJGMUaHBsWq32xtFtNTb6ijjR9wLfGzqXY9TLb369
PjpwYr9GH1VXv2lnQJX9gnIec32z25VS9EP5LEQo0K0fdIGC8Gxr/w1LglLc
zQh3e79FhlbR2W0vDZpaLopGzrSJqe7q6NKEuFGAIiGOaONajyEBFnxPknKv
Du6mZMM0BkAZjodm9lJcb4V2jMUwUha3NeNfInTEHtTn6bL0TA1/k1+HbkGN
/xzS3a7GfyGk+yK6/G8vudtXNPq3PCoa2yC3VdEQD+pVtdys7OtavqerUGwn
5Jy22dUwyC8LF2LKalwei7xTjrfqHoma4bLUq6T+ArWwbov2CAZ2rAARo8LI
XbAbjIQhkbUvDO3BJi5AciRpSHa6XT5nRxrXJsSYX4mYsJH2tppcZC4SY7LE
/ZtuJhH26dk10ufb9PCTRjIhfVU84xppxLXR0Ue2rshng7fARhBgGH2jDfyw
DCwNTZSFF1tptjcsBH2jTuaIbileY04uBstlveWyIzKhF6s1W3oF2QbiLeIh
B6V3sNStLZJIe1xvQK6f9TZo9gVHsQLJhhKLG640T/EdZbNZhaK3sFLHIaAM
FO1/Th9p0cTMblRBtM7ayxGdfdgmX7XBXWJGsVboSXX8YfWvgaUrVQ0IhhVp
6EGuBJOXV0Vdlaz+Bws7Bc85bMQIJAZmO3lz9RAd9uSuli433x18++mTBK6K
wyQPAWABoo4IeXhXe3cSnGlUnUKfmGJ55pGTNjDaHj5Tu2rRaS+/HaxEVbMZ
Ns/BVhSx04PCeDAoiFomRJgMxPYm8xl0Tc+0kGbWMT3QsLgmqnj2YlPxKMyD
GiCQ2ADikQMStGkxsP5Em+Mka2X0u9uk7o6zPt73Oqs0dwpBzWIVupVz4Lch
4isPgTZiToi7n/ikWQWgzFY+jqDY3181UkU7sqPMSUEobC0AWkyerShKgCt2
taQBBXYOArrIARTITXEywSXekCV8u3gIV0XeI9EHe47kWLokprIl7U9QICca
7jD/xsYjXOXBKoJ4I4HhsOG6IoaYwUWnFjPA39bcdknsbWF7IeSHzJGAEFxP
Rj2LqdMYJ/wrqHxcqWhI1IBT/l6oqUp2Es2eeCn+E80dWxHjF5k7ys/aO7bN
8/dp70D1mnMIxycBducxJRVv3TGuCzgDSerGosjrHTqm9MyD37UnfldcXYt0
1d6ViYWVUNKSm05TxjprbFnktCcW7mhivkVJzJf27RhymnGmGZZR6G+po6qj
ttNPaw6ioBbXj/50aafTWbcYlbBwcWBLFEaCYZnGGb8BiWGGlSgxlEg6fAVk
8NqF75YdDRxSZ0fswBhO10602YEczBh02HVeOKxejqUbPiV16b7P0a9SbWpO
CNW6SZkgmf9wj9b7ybm3GrYVnujspN/sq5+m59JAncFNIlEOY8dmuZgoO9QS
yPV8ccFaqDVDUe7jDtV8ynikHazQ/g7WeyFWf0xD4axKIm3Ss4FlbxulgYVF
4TFbklGt4hjKuzIc1xYjJSyjsgfXJRWoZPY0rdgHweusJYvTDd9bP82avOPD
wViJvLWEYxHGw6cIwi7cAGSkXLxECyQMAZsgwPyaG2mt13xXQM12phSkuW5a
xEj2HA5nGME7ERZuoELkYF8TSs8dnP9OFPW1pORzmkzKGYdCVIS0C3F1HHJL
iWRSyDQE4aKaYfO26WbC2XJmyjQHQksFXUtsRLa0kB4Mn9F0AlMdlq6fVL+c
pKk270Jx9T4ilMbcTDHHgcYoLuEVR04Z3iLhSlGValzGTu5bnRdbCkJiR9lO
1nooYoEsKHLVQUc7VWY4j2hFJePmeX1RcSho6jwithZbogDDneXzTeh+rjXr
TfTWNDd2OVIzk+kkpZeLGGsrPZjFlNKQk0Rb003T5itMLsNqEW2wrzPxbPGa
lRd3miEABXer7jAQQXZhrsts3Wg9icxPN9KHi5EAHRN11lzuhWkER5BisTE9
z0nzgMMFZfoiVJ+6pagz2TW6BbbtDSlsObJYhtMlyd3bSoaqWbabv/Sptwfk
iA0V+QLxnGrswrDFnE99KXUrkkx2UOk03/xKEt6x1yxL07HBvLqAkgaRui7m
i2Y1aYGPGDeJNyR038WiU1xHgFQoGUuql+zFurumukd6TYdJkAvtXDFGchvt
8ZpRzs7XQIWotN5e3+A5ip6tdcVFC0eqKGwt1uBoT0TY9jyXOw7xQ0nF407Z
FbM3xzZa2rVG+weJVBGXkU1k9ko1AnRF31p2LbXP9iObtP7atlIUH+7xYZFr
q87VHlNndZ5kEWcdfJCCL7iXGCJD2IDfpP11yPVz7Une0jDUguMlG5FjDHXU
+j4dxcP9Qs0jVBth+zwJwVOWDkONvNQGpWup6H8YiioeBKw0oPZIJDCbmlNW
ZYm2O93Ir4UkkiVMQ9U6KTwEaj7UGNjGGcbGGwarqaQ+UEf61ng2ds5SkDKB
XvZDV/HuorUqsFz9AqtVad2fETf22FLiW9Eg1msBUTfV4WRit2Xm7Yp7eRNU
ndgnW1zlSdnFrtqIQw7ttq/ChCvotlzBofhQvr1p7iLH5bYsy847L6j/KRlb
hcL/oDBDo9usW2YHQyDpKTgdq4AjUR4byZjqweJeJ90r9gHsRXJbg8IQHGNW
BmcjClONoZ2wYZAGO5GcviptZXKyJt+C2kk30U4Lq+jU80N9wG4btWtRCTLj
Z7t73W5RcXc7XPSevTaZZzFZ3GnqEhvn4sY0iCNt03PLHl1rmYFN8/Omo+xi
iYW+GY9iyIfMWYkRMq10xiVvSFHMaiwT4FMVkm8Lim23nYALVcK4leB5B/hN
seQCWcVFyUWtZ5jeMatWpuGtlLLtdRlwSHy69ZKCp3Jl6gbftkS9XFoljHfb
pPH/yZUjoASPnqj24u3VJWMIjinpzl7foVLi9LYkYrT+Jg8mxnkSvVsCBeT+
WaLoSV2JaZ6YRiI8Jv4MYRmwIYbJxVwzp9YFMqNfxvJobU2VEzkSs5UIVVIg
07APW72JpQ+UMDk0T/p1jZQkUbpZ2lG2H83sCBJcwzqI00HJiM1F71yFTkNs
tR0HC96hppb6MKkm22BPD1Msl7qP2bhEdAdkTRO8Vlo0b/fRHvNoKdJ1fPT6
1avjo3MpkSnVFTAuvFN+KsG5UFLCkuhQbapKIgsTu8NJ6kTECDCzVxmhCY5F
Y1ckPKhW4nSEExw842wbfDhs15eb1TSvtWR6zBPDGzBDu/7kYhJq6LOO6iVw
jFXS2Ffe2G4wVI6jzCrmEpgy1mopesxgXVacoQfi4WYJRDfnDtGIzA051ASe
JLhE13c8HuaV2vJDY6mUAZ1Tpbxsjs0/2V0WymQsOTy0hmVXK5Itm3wzr+Lv
1AKGYYW3gIyQARDljJvYJyXI2IYxvSHzI1aTuVR1kWpAUB0hXJ2cHmq3Sqpu
sLYWHwhoT+1YAJsKraRaI0qE+g/WpaXsS4y1p+ZNleN61iGRqhJdeqjpChVM
NZU9yVWWpJlVNVv2mKc2m6Kl0mH6NWBOLDuO4EEWfwWkDJ8iQSHuVOuuSlzG
FgEqltS5tNXxCB9Uq5N7IyOGGTSmyhgtuwZHwlobaxmls132uJLa6eYYY7cS
114+30txthXBDsHHiCob0wIfEqTEjLtoHJHq99SNCOjAw++e+Hl2A4JJxy5K
V12LykmxF23OyzHXxoLlOCxxZELgOZeWJycUqHVhIWzamsCuAbzAy9CXyYUY
OeuCbEccF080hHco/toYxoJyDjEWSwZVu1ORhDy62ANBtkH1jI4i6p9dcqzp
h3sN//SJqoJZdp2UoaLUfU18ksJTTx4/xiZQaL8CMe0iVHQtmncIwE1pSkAF
QUvUsBGNKFtyMa5wlrGeSUFKxV+lmH4gpuhFlYxCXEi8kQ3I//NcjOGEvldU
ESR4xqVmb8+vzymHN1RmvnRpKXWykmmkI5H9WOAI88KTC2iow4KMixd0EaSm
wYiewS/+SsQMHdhAe0Ws0++QmoXoM7WWSdDcRp0M1VpUjk7pV2YmWOagWhJS
Z1rA6fzFmbUxFFoCVGOu1W7OgTo33zD9Q3d5YsnluD6uGjXdNDe0FcBHkqs1
zQKvQgoYWKkzRLcPA9YdlHlTIBsapxqX7g+lda5ob9EgjoJufGw9Bg/zyvY4
gIfdn8a6raOEp+WONN1qIW+lR48LXc8Q4Ycr7HaqipVNMx+v4SG8IXTETMfD
TN1yuTgorXrS6UBFlnCOWVPZqEXyoKyCBTk8WaxeGji6aTkrXgvuVs2vXgJP
LKlNEywNgTHEpJiqMfwckom08hdfneVSDZpG+jrsjIQaC3mFA8jNzU2Yk1lf
WJv72dYsCLKq3AueV5wmdW5BUIMojXVQyfSIKxW7eHxEIG7Uewmi3JSx56FB
XputFeOzAM/C5VLSoWZrrWTDy6xqq4Vk7FdIU5edEORA57GamhiAKUAH9R+0
dU4icodwWOJYoghfVtwoI8DcFJ0K1ntxbjg00rGZmpYzr1DUnFUU9xVi0mxZ
ozPuW4GC3W0T8JLwrADw83jOJgCMVTryaJrCLHBuWeCiJrgQXevh+KRwN3e5
qMrYfUxmP3mjIXGTNCAHpVjUAbH9F8Ue2nC7XullH0ovu0EEJvV566r8batC
tnxy+OoQeTNppGockZpyr9+QnfM0vyhwsSx80guM63VIygIlrLgogxiy27LP
hPLKHu+5IiItj9nooDeJF4C/jEXtTr/E/AcHyQKSMZPpgVCcvHwTAkTmprre
OZZ4PKqw0q2+uWUlUpgBhzx4RD0P0vedvi/WZLYyhVjfpJnFR37vo3+FB/iR
KtmARvUR1kCnDef80X0cj5/CX/wj/5gf8GcYBqui7u/TizAzm2FoOGS0c/z8
+dH4/PtnPjx8AB/Gxiy3P3sfPhwo0Xn7Sw/8mH548By+fVvyAaIpBLMr6iuV
/JLuVJgkROY6KqT5Ef+T4R7u03BPnjxPhzMPPfl2Xx76nh46tfMsK7j5/huS
mEEOQexZEgsy7x/p+8/770tUCLwOAgEult9zFnVJfZyHelMdtBJPdCMhzRLg
sqDQWxNSfnJ8/tzvKGAbf0hUYAc5+c7J8dkP/hAfBmTaifVNWYB4dP/+Yykt
epaDAIMOyu69P5F4wVWOqS5FsxK+pNWuCWOjNP7iLBbGMAZAqjhv6uJGEhSJ
HrfTuBHJxA5phrE2R62GGXrkIoU2/j580za0si2ByOpJJVm56rUYYnb6SLtD
nr5Q3DeW+CYpqKVeomW+JCh2ytE3OE1WvkOAufNi5Y8uq+ty5E6z5RqABlS6
GbnfY9RihRpmVo/cy6z8eYPaUPkONnOaVSytncOkL/KVyPKw0qL2l/lyjQYi
DIepi+nGCC+mlC2sC1MYp9nsnfu/kPlwVTr4AAA=

-->

</rfc>

