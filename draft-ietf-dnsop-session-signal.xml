<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>Two timers are defined in this document: an inactive timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactive timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>There are discussions about using DNS over the QUIC transport protocol <xref target="I-D.ietf-quic-transport"/>.
Specifications for DNS over QUIC are still preliminary and it is not
yet known whether QUIC will provide a suitable transport for Session
Signaling.</t>

<t>Session Signaling messages relate only to the specific “session” in which
they are being carried. A “session” is established over a connection when
either side of the connection sends the first session signaling operation
TLV and it is acknowledged by the other side. While this specification defines
and initial set of two operations, additional operations may be defined in
additional specifications.</t>

<t>Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to inactive timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both inactive timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  INACTIVE TIMEOUT (32 bits)                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVE TIMEOUT:'>
  the inactive timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactive session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the inactive timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactive timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the inactive timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactive timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactive timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactive timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactive timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactive timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the inactive timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactive timeout timer remains fixed at zero, and an inactive timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactive timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactive timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
inactive timeout, and this is not an error. This is why there are two separate 
timers: the inactive timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-inactive-timeout" title="The Inactive Timeout">

<t>The purpose of the inactive timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactive timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactive timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactive timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactive timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactive timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactive-timeout" title="Values for the Inactive Timeout">

<t>For the inactive timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactive timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer inactive timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactive timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactive timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactive timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC0768;
&I-D.ietf-quic-transport;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
xAAA

-->

</rfc>

