<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-12" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes packets in a particular TCP connection
to be sent to an anycast server instance that does not know about the
connection, the normal keepalive and TCP connection timeout process will allow
for recovery. If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAMabYFsAA+29+3IbR5Y3+H8+RS31h0kNAJOSLNvqmNimJMrmtG5NUnb3
fDE7UQAKRFlAFaaqIAotK2JfYd/ge5bvUfZJ9lwzT9YFouRub+/Eqkdjiihk
5eXkuZ/fGY/HrsmbVfYoefryMrls0iZbbFfJq01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjU/uuTl8/VFy7/jku/G343sPXb6pHiVN
ta2be8fH3x/fc2mVpY+S86LJqiJr3M01vffV6+TnsnqbF9fJD1W53bi3N+Gh
8VN8r5ulzaOkbuZuu8G31I+Sk+P734ySb799+NC5WTmHbz9KtjC579wmf+SS
ZJw05Yz+W+/WVbao+eeyaugfLt02y7KiJ+FvkuQFDHoxSR5nq1Ve06944Rfp
zv6yrK7D7JLLXd1k6zp5AnsFQ+fb9Qg+nE3o0XQ6rbJ38PTlE/p3Da/OYB3f
f3OcPFmmFYwBe46/o49nebOD12Xzm7KcJ0/gX/zrcg6zeHKafP/g+OF9+dW2
aCp4+M3lKf1isywLeOhfTpLDh98cHyUP7t2HAzk+pg+zdZqvHiVVuvtjXs8m
sIB40ZcTmE1WL/MqM8u+bLYww/gTWvvpZrPKwiJ1Ua+KTD56nVZvk5/TnVnU
ky1QVJMXZWtF3xyfPPjkih4cf3eUfP/9w/HJ8Um0opnM7Y8pvncyK9fxwv5t
kjzNZ0BYdVmYlf1buSxaH9DCLmF+820RDvcqmy2LclVe51kdHag8addPP4+T
F+l1Ok9XWZE8yWBBmfz61ftFWc2Ty1meFTPeIbM7/KnZmld/eZA8+OG0tTNF
3mTz5E9A6XNaqd+HX9L5H2ueUncTLvs34TKt0v9Wm1DDgoZ34WqSPM/W0Q5c
wTjhd7T4x8CgFmXZ0HXeroBgryMafwxcEbjltKwsIf90lRx/c//4pJ+QZXpr
4CBl8cfF9nrbQ6kwvdfbGhhbldsZluv41zTJN0W6WOSrHH49j2Z3cGDZCOx/
fr0003z5JLn37cPj7z55374/+f4o+e7ht+OT+/ej+7aRufxxmhbXv9AqXF7A
sa1BWLzL8Phfpter7OkpU0KTVtc4sWXTbB59/fXNzc2kJq6iFxd50debFHhD
/XWB35xnq3SXzdPZ2695BBZOV09eJ6+zit6EpLOpyukK2e4s3dZwjNMdbCPM
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
T89Oz5/jj5Lck8IGzaU0lnD/dNsF7TnVGJ1Bk+Gv4qD3cZp/efrqxen5S/wR
cw/O6JWwDvrnnEEkdyEaQT2zCElp7JM4jmi0B7Toq/MXr3HP4Lbi4xJyh4Hw
kW/gk4uzZ28uz55G+zLPQHfU7rqbcpWHdkf0ve956NM3Vz/iTzDuqTjAiOH0
Tkdy8U9OeDZSAvGrVZy+qjmbEwv/8lbtC83YvQkwQ1x9TdRWx9jB00yrEYWj
oQ84FHNEQSxzvZHAJaalFbxzDmm1inEl2sMO2hAFU49a3B0ydOH1iar4vVq/
6M/7MBw3oZzr/h52tveIHW4ScpKXESdlFhCrqc636EkNF6ujixqj5GrPl5Bg
KwBOwVRUY/fDnXldIkLBRzfci7HHm0vUj4kuyGsYDWweexhzhUEO1Xr61pFr
Q4uFZoh9tXxgIDSrd/y54FVYr6e697tlA13exSH4IcPXYFx9BoBZS12ylY20
7VfLCN/si0DS/r8AizbxFb0ccg+lvC2YL35X1kFQ+4zGDba06Szglb0OeGUo
twW+zBcs8r2B+1Gloc9537a2YbY4CiCefkyakqKgG7GXhkBtJslLuIDd4br9
WhtfRyeaJ6Eoe+YmALQeB1W73uQVOyfquKHbF0K1BYBVBo8z0G0xlNptcNtc
hNsm3dPl6OuIcmV/u/h3g1hBcE7An1YCYCf7FnfWrKm0Xds44p2QRE72FNmY
Dlm+ZWJ6lvmdcyLzg4mcMQS+zzaJvQnKd803guBS7p43ps827MwlYZXBox8/
0uxony3cQnKrA+0FvHOmOFKyIXsA73xq0Sch70gjlXApV8whoTLe3OfB4fUv
SNQGyQ7myru0qna9GHfSQHjIDO2RW6gkRyBTOSo4cChamtt1X5ayXEEvbs2X
oRbr2125/SdkE2z9gfzep9QFGHT/r6ALCiwFdofMN6kvqCAjitBabJ9w4ASW
dTkpk2gnHypKpseK7e8OWQdBRkNKK1dMOxgrno0HpYOdHhJzet0HEAEm7s0A
VICAZ3E7YU+skmMm2Sm4jz5Dfyd54wEEV7oZcgZUvEhMTjJzIP1rCLSAXI6Y
IC69PHc2cd3I+hGqeBUYeJQLS6Uqi3ajH5N54RQtBdve5A1lzkpqMjlsaJY5
qxDIPSknnlqkI6b7xNTDdly5MZo8qpUB+IR6OxbsSyfvo71c0oKQiPdIAH3g
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
aN9UOai2alJFsSk1bUCPIxeE+38A3MG6YNZ7AQA=

-->

</rfc>

