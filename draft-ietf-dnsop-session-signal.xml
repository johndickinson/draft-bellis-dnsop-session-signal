<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but a DSONOTIMP response could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
that the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request,
unless specified otherwise by the relevant specification
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused whilst that operation remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving a long-lived operation uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as
a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=1) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=2) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active,
it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST forcibly abort the connection immediately.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=2) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
D1Rf65fkEDpicWhMtxap033drSk+1mBpAWqXlzeSG9JTS0F2LjTm5iwYnZuF
7XhstX9LiyBkEjv3C8WdpDAwQsh1BxBjm6EK8NbBzY1quUdRDr8CpypO0Kgw
TUyiI9gCiGahYH/+VY7awI738qFKhYJoCvE4WwYYxzsuKVvmV1xYnhrosJcQ
QwiVbwHbXHs4GzmkyZU4VExOarkDRWVLC0Br5SJqhGuYICfWxDKgHjafBgtZ
amVJ/p2WXe9qHIp68+I6KB0TDJwL34m27pu6y364JpJxvqL4DAqS5qwPpFsG
P6bAT3JtEga0cot9jPNOzd9BATS8J7LU1jqdoLL+HsLoDd2BdqDXttUQZPA8
IzC4pHq2yIRcmhIsbyG81LBv0YgN034RjfTrpf3N/4wy+sW0silygtKQj7Yn
Kblc0D7sTtHd1HcQTGyvYfJy0uPFo+fChDD7apmGMpC+uBLHKMA4md8jq3yA
9rrX7D7kZ7W7LyG/rh4hzNKr+0VLzR/6EYmjHiNB/KQd2JkD04ndK6RyDu+L
B5UqTOS49XILb0znc54BJgKSwAi95gYtl4lrh+kVjC3ltvUggVb7ac3xu4jr
28V+2dJCtWli+3ClLTS5c/UGx3XlQvOmWu4gwvd7wJMt2xPcJ/Hmqi8dk8wI
MxBdl79cYyaN72fY02TGKWhKRwFS/EUUZluOV4qeabIJlUfhDkyEIhvoYCOz
3zEC+Xsk3Ty0YVMoxNF3Y4H7tHt4dQUt5nbjaD1lFyQMhpoL3DKOKQXUn/dW
FL4ygq1AxXqPhvCCAk9qNndRxiWwMeTdMRxX93rgrWCnrW/TAGJjMPd94g2d
+/1/ebTh7PXx88uzP59d/jW5PHt1+ubd5a6Aw28YbRic0R9PT98evzz7M4iI
15en538+fvkPmpHr7gWGQS57r0yo1SkYishX/fcPlph4+3XorYemW2/wJHau
D/QbmLiBtYo9FIo8l1aufFMzXJ3CnHGfA6/mhySGnkw8kzYrVmhc5JYUR61p
ds80uzY67a5Mgy7V6dn38MV/qrP3s/KHn0ZHvyMv0hbustXtG+LvA4u3aslw
5aFeItCZMOZQULgdQ1LUhUEa+NKzvcgLSeQkQNxmpcrsUPnfsBTuM6w/I9PO
7HLvHEJ6bzgH+NKFAqb33Qeayy38fmsClGcB1WRKRfUWiGWnc9vLpq5Jc0Lf
+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
U7XWUI0eMSgI5FRx/wsgjioj7VABAA==

-->

</rfc>

