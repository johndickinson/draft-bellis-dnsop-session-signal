<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-07" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="19"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model” popularized in the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHnI7FoAA+2963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefLiMrls0iZbbFfJy01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY+/cXP4+qPk3vHJw/H98cm3Lt9Uj5Km
2tbNvePjb4/vubTK0kfJedFkVZE17uaa3vvyVfJTWb3Ji+vk+6rcbtybm/DQ
+Am+183S5lFSN3O33eBb6kfJxdPHycnx/a9H9NM33zx44NysnMMoj5ItTPKh
2+SPXJKMk6ac0X/r3brKFjX/XFYN/cOl22ZZVvQk/E2SvMDBJ8l32WqV1/Qr
3oCLdGd/WVbXYZbJ5a5usnWdPIY9g6Hz7XoEH84m9Gg6nVbZW3j68jH9u4ZX
Z7Ceb78+Th4v0wrGgL3H39HHs7zZweuy+U1ZzpPH8C/+dTmHWTw+Tb796vjB
ffnVtmgqePj15Sn9YrMsC3joX06SwwdfHx8lX92Dg4DNpw+zdZqvHiVVuvtz
Xs8msIB40ZcTmE1WL/MqM8u+bLYww/gTWvvpZrPKwiJ1US+LTD56lVZvkp/S
nVnU4y1QVpMXZWtFXx+ffPXRFX11/PAo+fbbB+OT45NoRTOZ259TfO9kVq7j
hf3bJHmSz4DA6rIwK/u3clm0PqCFXcL85tsiHO5VNlsW5aq8zrM6OlB50q6f
fh4nz9PrdJ6usiJ5nMGCMvn1y3eLsponl7M8K2a8Q2Z3+FOzNS//9lXy1fen
rZ0p8iabJ38BSp/TSv0+/JzO/1zzlLqbcNm/CZdplf6X2oQaFjS8C1eT5Fm2
jnbgCsYJv6PFfweMalGWDV3n7QoI9jqi8e+AOwLXnJaVJeQfr5Ljr+8fn/QT
skxvDRykLP682F5veygVpvdqWwODq3I7w3Id/5om+bpIF4t8lcOv59HsDg4s
G4H9z6+XZpovHif3vnlw/PCj9+3bk2+PkocPvhmf3L8f3beNzOXP07S4/plW
4fICjm0NQuNthsf/Ir1eZU9OmRKatLrGiS2bZvPoyy9vbm4mNXEVvbjIi77c
pMAb6i8L/OY8W6W7bJ7O3nzJI7CQunr8KnmVVfQmJJ1NVU5XyHZn6baGY5zu
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
RX0xMGYv3OnvI6Y2R+gV8G3Pg4M2XfCXsnGX3Ma42+dIbTn1ugKSFT7nFT51
DMy3Xqdhv95WnJ39a3NSc4jGiuqQkY+2L+HdeNFFmvzI3gTVabqakvMtZIeu
Rcsx4T0RjoJwi0oykKNqCTBh5pRVQobNOIoZTdwP7KdoDyjvUY2TKhzoN/0O
Dc7LEJ+H6ATTbTXPisi3xA0acAP6zo3bncilRKfjPJ81CqsvXKGR6pCwjd2t
codiAvTgpkn5Ykik8AXbpWYlcTVieEIDUabBkezWlgGBCuVNNAi1JdDq9l7/
gDRPjVKTYperG3Rm+61siXuyzkHN5yQsBAAvkbF0PCDqHJq3bLYyqmHQIK7T
JH5rWMtoMkVb6NTWZuiLwUNtixWYcXq1RYZUXYPCxF5I9EUg5DZ0hAvFmDLJ
16A8QWQjnbIn2f+hYVsFjS43Og2WZnCuLGtJ/Uto5YQ4ruroig36brxuu6B9
NHT87qn8gfMSFKka7TlqZ7c7IEoYpjG6YXuVR2Pg+yjxhOFo2Gqn6YKKUTQe
sm2Vgy1DLLCrbopMvEl3Iyd6CAfijSzmXJ+3uappPeN0MkW6sogZBzeNuWmH
afX2RsEOCb9RBjNw+bt3aRMzhMbp8pfQOlFBEwzQbhxOzWvnz+ksObz3f9y/
N74XudVGHFt+l6/5En317eSbZJ7u6qOWZR0GPlc5+v6OlzJ7TOueKAJnvazT
IpXmwdanvHAG79N7WLp8HEOF+RwoZ1q+y7wrq6EIwjU8AAdds/rHkYT6SFsy
W3KMYRPYlSEeC/gdF75LaMHdLrSQtHJi13xbM9KXJJxBtl40BiqcpSJ34IAq
J8Ve1EuKvKCVDHCn72zO3m3yavf5tkXPqX2ObaFZHwatijLJvfElyTVtNbRr
YDRUhTjTlOLhUPbIRQWC/epiJ8/g8/VKVSeHggVVq/gZrVU++TqkB2kMJ51W
W/RDjPwOEuWI8ah9PaKNAppdwqZTCajGKnvSzbaF94BG5gf6mAsJMiHdshAA
KcNZVC60BDGYqt3gsKwkbTxH+2323sfor9/e+53p7x9nofUo5N1LHBTyod0Y
UsjF6YeflCss2YxC105j10msfg8zbDjz7SyL9HHVxIHwSflGrrgGqbXGanmu
eS61iZJRyDUrV1U69TirL24oCce7YjGBaJUV183Se5wPuyBTXbF5JNgrZNZr
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
eiQ5Pdz/AyZYTN6+cQEA

-->

</rfc>

