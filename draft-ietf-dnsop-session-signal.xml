<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="05"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
so all implementations of DSO are required to implement the Keepalive TLV.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) signifies that the DSO-TYPE
of the primary TLV in the DSO request message is not implemented by the receiver.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAClbnVoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtWmiERk
XHbs+/72eDx2Td6sskfJkxeXyWWTNtliu0pebrIqbfKyqN28nBXpGh6YV+mi
GedZsxjPi7rcjOusruGRcZ1fF+lqfPzAzeHrj5J7xycPx/fHX7t8Uz1Kmmpb
N/eOj789vufSKksfJedFk1VF1riba3rty1fJT2X1Ji+uk++rcrtxb27CQ+Mn
+Fo3S5tHSd3M3XaDL6kfJRdPHycnx/e/HtFP33zz4IFzs3IOozxKtjDHh26T
P3JJMk6ackb/rXfrKlvU/HNZNfQPl26bZVnRk/A3SfICB58k32WrVV7Tr3j9
F+nO/rKsrsMsk8td3WTrOnkMWwZD59v1CD6cTejRdDqtsrfw9OVj+ncNr85g
Pd9+fZw8XqYVjAFbj7+jj2d5s4PXZfObspwnj+Ff/OtyDrN4fJp8+9Xxg/vy
q23RVPDw68tT+sVmWRbw0L+cJA9g7K/u3U9OYOvpo2yd5qtHSZXu/pzXswlM
P17y5QTmktXLvMrMoi+bLcwv/oRWfrrZrLKwRF3SCfxqkRd5kyXPynJj1vN4
CzTV5EXZWszXxydffWwxXx0/TL795qvk/r3jb+xiZjKtP6c4m8msXMdr+rdJ
8iSfAWXVZWEW9W/lsmh9QGu6hNnNt0U41atstizKVXmdZ3V0kvKkXTr9PE6e
p9fpPF1lRfI4g+Vk8uuX7xZlNU8uZ3lWzLLkVVq9MXvDn5qNefm3r5Kvvj9t
7Qtu6zz5C5D4nFbq9+HndP7nmqfU3YTL/k24TKv0v9Qm1LCg4V24miTPsnW0
A1cwTvgdLf474FCLsmzoHm9XQK7XEXl/B1wRuOW0rCwZ/3iVHH99//ikn4xl
emtgHWXx58X2ettDqTC9V9saOFuV2xmW6/jXNMnXRbpY5Kscfj2PZndwYPkH
7H9+vTTTfPE4uffNg+OHH7tt3558mzx88E1ycv9+xDo2MpM/T9Pi+mdag8sL
OLQ1iIq3GR7+i/R6lT05ZTpo0uoap7Vsms2jL7+8ubmZ1MRO9NoiE/pykwJf
qL8s8JvzbJXusnk6e/Mlj8Ci6erxq+RVVtGbkHA2VTldIbedpdsaDnG6g02E
maUzFFnJNGtuMqA9mswXdXK6ui6rvFmuk7SYJ0/4Hcnp478wNXv+v5/rDbBJ
FXnHX4/h/+4dOzcej+GKwJnAdJy7WuZ1AjJ0u4abkMwzYI5ZnaRJkd2QyH35
6vHLJ2cJrG1IAieHTy5fHk0c/H8gorpOr2EA2Pz1tshBLGZJGR69gWXmRYI7
moNAKhpX64AiretRsq1R1Da7TTaGK3rdLMdv09U2Sw6vnv14BFKyaNJ3E5g4
EFUCv4LZVpnMfJ40y7RJ4BhgFjokHNM6K7dNPXJwCOu8oMmMaLfhole7DR3L
Jp2jdObfuzRZVLDXNyD4E9whGR73IXsHM6e5guiGEVI4bNovv5aw4gnv9zqf
z1eZc3eQbVXAAYgScPczWC5s0QL0kLSoNyCba7/ZZbMEyQsrKpLXT17hNKYZ
bk0Ok85S3KXVLqk32Sxf5Nl85Hhy6RpkzYgHeAvfR+p8//5/Ay0E1ZEPH+Qf
qJHAP4jk/KPPLuHT/4afPvz64YcPE3e5nS3t1GYwl3KxgGfDGY4SYBzX4xXc
sbk/RhoY5w/8Co7nZpkVTg52ma1piX5Y/C3OwVNP3uBiYVOmWQEb3+A+L9O3
GdDlGrh9WuT12tFJ43wy2PcpqD1LOEI8MzhkeH1dlzNiQUR08NayzgyR1biw
tPa0MXHnBf+yzuF2MbnyPNJVXSbp/G0KhHcND9Ox19sNTh1GrGDnxqhS8Nt0
ERM+3ewdbBIu8AxWeHh8lJwp9STPdSn+wPlkHjz89gROBt6cvduscmCXq53z
9F0mZQHHTttxAIcwlhcewFSA7pt8Vk+Sn5Y50KS+cpki5QDHIW7UlI414gT2
bwV01MCIfmvGFfAfXIffy+QQTsyPhdT0lyzbpHjcQOhEx0oz94BmjvCAkypD
8YRrWMG4TMP48BpeO4e7DMuQx5oqn7Emn683pbBL+0a/LCWpZAUMGKmjs/e8
rhVs9yRxT+1tSOVhJJgC5GdaTXOgvyqHrQQhAbOAKwlPzVY58kGY3myFBAO/
KYsiU8ZNDJ3mEIbj86gzmJxOmbelxpFxiRv4OSOq+c8tyKesZi4FIzcpHWrr
e5PbsmW45cB0D/ESkoiDeTw4Gu1j1i02jZxTiOI3sWwgVFgnDnRb5t27vCLh
s8ShG2KKnsmPnM5ziLknt2DucinDsJ6xI6ei7QD6wVeA3CyrHW0l/iZHMlrz
PuOuwNxgIyfu6bYiJk1jrcECmwZRBLuGb8Uv4IqYT8/ScMRZwsoJH5g5F3f4
/j1/hPdpniPDrcEmBHmEhLOoQO9CIgQK9uMbBupkWNoxHBtODBYEqq3SH+6O
J8wJTcU/A8rJ6m02nu6ADpZZOofVwWHhWKNkum3oxYtyW7GKloDoWc1hxn99
8vjl6xdXo+T0hfzw4lJ/c0E/HNH+4snCKf6SVSVNI53NQK1mWQZD5xVYyRXP
DX8LzzN7oC/j1UVKg4PgWYMOs0WWkjYpkijeJ6K/ctBfcBhoFQ4Izk2I8ohY
/WYD95jpDNeJl5rIMLP7K9sycT+BVIPjqTessjHtb4A7wRqBSle7X1B+l+VK
bjwxbVwDcmNxFdC7qmxWXhf5L8xbkBT4CIGo4aa4mxxIUFlq4Z+hVbNK4Cfh
gNdvizdFeRNRHz2aLhrSJ4bWBTKQWXb+JqPTQFrbNltkEuzWkH1BHkiroonB
a2ikdApKf7Nzdj0juA2o3fOFlFlGC1Bmh5xN6Bbl1ZzEJvJkFbw16yjAJC4u
xtNUaBufV76cNw4GWqO+oZKTXku/AfYGJ9NMkrMUhDyeO91T2iBctN5PnH7e
EMEDd69l5ikyXzkB4dswZVwoWHNzmCCYPjS/VZki/fCtgA1do5YAn692I1Qn
cBYrkKqwvenbMp+jplwsQOKqDtSnYCMjKXbJDeycI2WmwHXzlTecGmZAn7ZV
Dt2sbTFjaoBDmrjT5LqEMYgKmPKrEncmp0OmydE5+RfAw3ldbzNDy26aLYA7
wiWQV41QbQBZvV2lFSyRdAm5j6wCT8t3cFzw3Rw4CBz9Tzhh/+U1mrTot1EB
KhyVrhTeV5xZQopvBiLwKtnU2XZeji8uRs7rm7gCOJlrUB0rWOsvpJNZTctK
+SmS7Yr1ETCAHeipxM+9voC0CDszY46Bh4yf3+Q18R689MCokox2DhjW23wO
/Mjx/FV24jbCwU9JKkTTFtYbiQa2MeIBZUPgkjC/YBGTLMsbetKxiMA1yYN8
iri6GfICMF2vkX/nCxgC15JWQAKo8iIxV6gDwuP+HIiM8IKaDXVIuhkpV3Ch
QNug2eLX8HTs0Rm6NefllHnS8hawXPSyII2kNekQeovhvS5dAbHXMlZWC2e1
ytgYTGZYL26HmhF4Tk05K1cTR3ccF+Bng4swGg4xf7zmyCfrDJXdJnOGF468
ttkdn7S+Jn2DDKIi4w23AH0xdfYWia5lzURke/5KJQQcBt26TYXa6yRWWFHP
xtfEm1uvURnZMzp+rc6u1yIgka+h6uKpC5WZ8oZpbAbKfwUkHuyGsG9VBqoC
UIUemtm6Ovl5KzYDzHwNlBR22V/D5ILcBp74rURXxcMPjnTOI8PDDowwpFC8
a4s0X215h4nn+PcA7d69exft6StS+tD9t0ve32nCvz6whvUmA8YJCkadHDx/
fXl1MOL/Ji9e0s8XZ399fX5x9gR/vvzh9Nkz/wM/4eAfL18/k8/xp/DNxy+f
Pz978YS/DL9NWr96fvr3AyIjdwCX/vzli9NnB7wjVvlFCuKrSj4i0E2QOlEC
ZvWsyqdEqu7gL34deHQk7QqMLNA9P5cNTC7g2PKKFNXkGdDiqoYZoO3NB0OW
Cv0Td3pH6k5akXxZIVVv8gaM3RG+vV7izcDr79gqvXdy8q13Hjw8+eYrdA+4
AyCWA9UPic1nQLT9gkyVbzij5CDc5AP6DsrXaT6HyYuQSkgBPYTFCpkckR8x
XY+QSVesKeEztX2oPhJvEJqnIJxRBOXA4Xd0nXNkG6C5jZya/3D9gMOy0UlM
xt3Sb6Iumn63CTt2iv8E1k2+GVm02CwH4V7Akb9rvBD2RME7QpraOxRd13gH
XHTvWRmy5iltyyPnxskVjx3sVnY4itjDnRDpBu8Mhp1YBSsxJV1i/TqH+SSb
gITOiy1uOSx/CRIcaAXO1nupQFeHO14fTWAOZzn93miaZkYo19VsD0sSpZsk
LEuneFcaTz1hI4XyYJtWcH5kAtu749IpbBQz85w0KVANUJFSN4e8E7T12bIq
C9ScZq2XkEot9gLNb1qXqMPhE2+zYox6NxAgaLmrA+ZT9TLdZMwHYSb5deFk
C5ChoQ5wee6FSa3bc/Ltw2O0C08TvFTJpVmi93AhocphNjfoe5xvSmAbopIZ
We/MsSLZkM2evM3TNlFFdicTVXxWIkZyo5KT/ZniuGP8wpiFDpvjbcaFgwFP
Q32vjhWd4OaMbxtfsP6NUBMfvXpoezV0zeBGr3YoWQyFobhHD858Inex7yEU
sMB4+UE63huijhpu0U/CZPL2tGv4HLg7+4euq3SGXA7U+wP2SPLVRXcQqyzI
HOjZ/wDDL1/s4CYt6JdMjkBYR7ATKJWZC6W0FU/PX4xcKcYa8PS3GK0S1zC7
hT39TIanWrE4qGM+wdJGFm0W4NgjFyQIWkJ6SWlt+rA4x5B7rOA3KFiYaojB
jNCEog+YR2+B5aLXGBf2RZ1cnT8/G/90en4lRBl9N2Inwc82+fh5wM7McmL0
U9DVBk8D9vbi8qpnb/u39pxn8d3lk+SyRK2tTk5fnfM00GqaLfPsLR9cnTWN
+Lfd5cv/eHb+4vuzC9XH1eMxZXc47p88m9Q0biQcedEHRgzU5aK5QclGqnkK
JjrebfKP0NeBw92kOcUD4YqW6xahizpXxyKYdrz/Lcuc7A8+/Jh+nLBMnuQX
dWcu5iWgdckgJSwHmfCBKIK4vKAWkk6IwxMD5xe44AvEx1lsbac1LgUJBewY
lPFIWGmvzop6UmHtH6/buyq7Tqs5uabh67zam5Q3we8LTVePQnj/tt6Keg+z
qrPWqfGyULhhwB8X4jIWg961CRuRHBLvCkT5SZM/cmTC+m0cGC1WsUEiu2f5
mwzt1pGRo7qJA5PuvIWf/+xZdzehO2B34nAHveUV+2HFPkWKFXMf5w88HIyx
OR1tVlVlVTMvCNRd5RQjInccWdNwpnixWFYs8qomP5iJBLF8rdDsl/DFAsx/
GFoJIyve5qA/rIn/+eBShu4ftJDgvtN89Bq9RR+MhGlQNtV5hX6IEXvXnHnz
vCSPodpIsE+LVXqjr9U1eXN1h7vh2jP3Swe1fruam90yDhB02uGFQvEujgnS
5/q2QsYpMvaRoNuUJXIwFJEXCbeiiz5rVruxPz+MMGXI2M8XPO15KeOIbWIW
DHeQ1Ae78AGKGLlptsM5k6Oc43fsYdBVZu+Q0YQd6Vl4HJtgZaZmng9KI/pQ
0fHoyQsPlR2t5CZ0B4sUzCj+jLmIxmiVjoo2HWcFOdNhnbBpcMJhADM4G66x
nGsr1vl6nc2RZ692BxP3Pdztgt/JXtvegWuKm6FqMs8WzIQDXZHdeB3G6T5i
Pca4l+sUjig8BvN1GLmgQA3QepOv5FwW+Tv0SbFXOl5W29sD01AFQazwKltU
+CLWRbdNiUkeMyJpPE7+Insecd6uTtc+aIfxPkrUIG+gDYIu2SsZk8C2Zs+E
svmekQ7w5FmLQ93xboKetRS/x7ZqagwuH7BP+BAW+fW20ugBbDd6iNL5HGMU
RDyospD7qdiup2i7IoMLDj8dIQ1REtgbOGK/epht3+JzvnhO3Nnhwf3vn/y2
5cEW1w1msfSvTTmnNZCLRmQ8ehUufqTzreZicd/75uG9Dx8+simHGhD13xY/
ATxXg/kP83OsFf/GrfOLOwRN5WfkMzIM6w24ZzgKJgDg5SCLnp4H6gVVEp1j
W9BKgt/hK+93YCfEUf+RsJoqEQvQhlvrJzYcdkdnWd9iD8K3WpuAUV/kCrQX
aA30jO9EMogrepXz7EovMohhgDX9Nov2O1DgYYbehPNW9FVDgczLNYTG45jF
sUQs0BYmhu03GcgpfgXSG3mGSEJgxBoljwQDHJvaDRxZVqvkozgvm6P8/ilb
O/3sIdITjVclOMsPeNvJCRJ+6+/Dq229TF6gAenNHlCFQTJJoAQuw/n4yUSz
n+v5eAPfwIvxJK9Juu2SC8wsYy/jAo2z3hFqENMywhr+Q+kgOxyH/IekFkpI
0CyjFYji7IZlWVKcEPknZR2wfp1XyTStc4zX42MheYetQfqlOC8wawWFORmm
q3yRkQghXmAj39Mqzxaqin7pNUjy26fWh6EcnTVgjIoNeCR6gnAjF5IwQmYY
Bdc5EwjpqvdkQSXZgtwss5oVuabOVguN4GBcr/dbE/cCBBLME42UEYXkNhvg
XWKMq2Mp0dhchmE10Jnc0PxF6MKAG/wEzwUVewr70wajzoyb2zsdPhceAilI
g+SyeKDvoeClSE9MuPBauSj3j8h93DYi0GV90GcL1OpNxw/7zYz6AAObfZZJ
RuHgesDM4LSYgTE5S6aInNPhMwxrs4rOSnXDh6pvgJ35rmx6gyr85Y+9mGPc
EhOATXadUSg/SzI1/nqRTPmUTJ7FqO2VS0x6ycS9LALznpE6x4dd9E8a3/b8
7PLy9Puz5PwJR7o5RFjgy/7k5ItDi+Lp4aPCFY2Qj5yRnAD3SXlFKAgHLdPh
SRH9s9mHiQFkM6AMZBpXv8AriXbBIwfEDr0A4AeKtPHBKhMHlQwNEUKYp5kX
s9WWrHUNN0uiYRGFa3usaT/onxwSWRlyj/I9C+9ftFEV/ToPTkPKCA7L6yRp
ZrNJ4KjHGvvbbCtM26tH4kaRkH3wr4sLOHqadAC4MyOr66W137xu5hZOh3zC
fdeXXqrKWFFywhi+Im+ij4Cjoh+C8kE4c7i2IVjVQXzSuD88Gzn2TkETvell
VyOHJkX0PklFFTUHvjW++vurM6UwQ2CyKa1cqL7z7TvFC52KGZFYY0wzLbVQ
p1PvH7NNIuwq6HvlYX1EKQeSsTVKyIAtZ7NtpU6WQtNAo61DK578pEjkQy9G
7gGKGeoEoDYdAr1tKAaJOgIwixl+m1TU5ijKEG9HYB8laNGQbyoVzwwPCko8
CK337+X3pH1UkjL9/v0bTYIFHorfT/wv4m/7X+/5OiuHksjYk7pMCVe8TtLY
MeeGhXZrzvB9Tl8nge4nRDof8MtR5GedJEYplShLciWziIK6RAt8O9Dnn+bk
ddUXEiPG44CTEh94KnvAruUqM75x+YS5t00EBE2kaj2UXsOtnbjHmKjwOcOi
4oWB+eGhNY0AteQt7QAdhjgVNZ1Dc8HqrobYUXuBkBwZBypucTTYavcUKR7T
wLzKy+mNvO8mdV11fklv9pnfSh+cGu+uq4xzPPUWOfHqSYbsWmSqiQQGh0o9
SaJ0ExavyF98Ar/jzNHtdNyUYAbApcX4qon6taLeiebeLVbZuxy9bTjAtBSO
50z0OYQPONCD+s164zPFogRfTf6hpJMm5IW7vkz0xGaiiw+TXG2aUBzl/HZy
MXI0uCQ1ibQn2uPVDuTRkgz/KITtN5mKGZZ5yBkEurok1ykeN27Y5ROZ2YNv
HtyHrcKssuwt2qs+q420B/JfaSY+p+2F3DXytbSqPGzlRWTOrTLe53WN2bxk
Vn6BJuEXYUASf67ccNY9xuxKyZ1/ZkZVQje0YzIITPK9C2rrCi0T4V1mWwat
VBLsSr3+aVVE8b6BMYfnwrQPtIxRxRqYHt5wvUL+XtGhOAnuoo+gQMqdJKjo
wtoxYfFaImlm/+wCOX0OPZmkN0RUITOxn784vaI9AaGW3WAqDe0a0B+mPTb5
NdtsFDKst1mb6KQiCDfOYRYsTGSWbZSs6MaJsQxfwyt6EMheZnMgFq5ObpZW
lOddcB40Z/8WoqY3xuWTfKHy4wunetgKBBCM4YNcI9nlSujIL5stdvjB53ai
0kMXHHWGeltlPTkn6o4GQm8wfZiiMDYuQj4YTETTRBDh0a/U5f8kg9ev6uT9
nTn/9AE+vpOYZIHkLKKF93ci2oDHI0OD1JJpJrtGfIEypUKKBicPORPksa5P
fqUovjZXw+e2q2YZUo4d+9QpPUUZuM1lk7T35PD9e5vUhvZaSFHarPAYsDaM
ucvxNw+EEVONi9FsWSECdXhBO1eq3hWC/ein1/wor1xKHtWODO9RiL2gPjcj
bR1JH+mb8jXtHag5+FMv0U+JUwyFGn4ayHM4AStJrZya5mNjbDsTU8KkDeBe
RQZ8olixixrTWfAM0EZZU00CzOtN+4qoPoO8pvGKAAnILZzXTOpGkDBiLzZQ
ghtIVelJDGMXRfz8s+iLNk8MFXKp/6NsVXyKgiWspdukDa1y3lESsKT3ujBP
ShKPzlz8dMpokHDEYLWmZyrRnTh3RvQBs+SRpLy5zppGxJXhZPEcSbTPQCvy
SW2Ri423Z42yPPag8gt57dtmXC5A/BXz2JFtDbOJqGmc7E1UVLdSrkmbifx7
aIxuq4JnX1A292KRzLeV6oaxk9EmQaG2hAwsx6yW3caHPlSVwd+H+AAlS5Hb
FfR0TV7eH79o54EL+0+b6LU0AEUMRJ+4jxTIBSLMjvVcW4FBcsMxv9DDtGfY
yj4emk3mDv4DBPf//X/+Xyi44T/Nqp78RzPbHPhZDnuiaX7Bk0gzgjlo1UlK
VnZJlIhWG8f308aw4UDtaJRsC3+/HKUAEB2fn744jbeMowGSHwHrP+B5H7C7
iEguYuziNAD65DIaquN6Swc73VH1b8UuQDBCOLOAlNyupNMaUSBEyUCMwjQJ
p1moYiwEhtzXZkfG9XoNmcRIojD7H8obNFA8X4bVYgiUtScfkyPaQHmAq7GL
8RxAZyDzrXnCNWZ/qVY2UnbLnqq+jWGWZXbFh2zJ9x1vhk5Oc7Hj9bZ9jm6v
9652HFVOIw3AF72ut1gihkp8kMwOE+2i6ldOOkdF10wgBBM0Y9IFfVfKVCXn
LXaxTrNVeTNxl/k6p0qYT9s+yRKQPXJ92yc729m+vX5s2SaKt3/CZnm3mz7d
ykjtZiJHW+P2JjqFSmz+OKi2bUfXYew0YUXT5g/pYUn9io/2BWc130IqTXDi
H3/x8uzi4uVFQnUvknPC0oC11GjOmCIWKAX5B7sro2IHTzPBCQ9joGPtxbk7
PPBOvxdwJc9DOswBFrCGOl4e8uTkyLHhYEokZGJyg7rUEYeb9A1OFsMvFz/r
pu1xFAujtfcYVNGQpo6n/gJPglVGsjWslWut9h5qqPrB2YTHxAsf6nAxFVXf
DJKk3FOUK95L0mzn0Re7L5m477beC8n6Enks/QUTzwQjPfhQZXR5vHzXgx/z
y4cctkbTAWtvtfMOHn84rSN2/jBDxE4MwhuKRYfK0DRsv4lACZXKCfI51eZJ
DJK3GAKbEM4YiubGhzpg2SUuIwBTt9FScqSPbeavfly5ULSUExsRYTYYCT2f
TSe30Z8gVoJoyMHugWHmer09b3A7jFepvhe7DHwmqexC54L7C41CmF2NBqPD
sBIJN+mltxcbrvSId9xsIF0itJjXWe8Fd9FVZipv8A5MEq2SIKH/284ktR7C
ziGH8ifHboyF1L7HFQSdgTh3u4hJkNJO636R4KS+wEvWQor81hzA3XO8Pt1L
hhzZtyoxB0pSao+F3U+tw/GzDWN9Ufe+GubnemWcGe22s3hJEYx+KW3voibr
or8PLwIYyhh5U1ci1i4bm3BImzT1sxR4kUF7VVPJdAmpvHRvvKi4/cx5dOtO
NOk1jPfSilv3pP+jrJd8bi5YaAdEdHyBi7AgEeQlqX19Chj66Nqwr4OdAP0t
R2X+k2pXQLjLTeZKS14omz7+GpOTyYrlrmu6m6QyaulTHaFJwWd0WvQJH/K7
8da+TYFQJCnWa98t/neGFlVnBXMrU6OcIL8QBiHh2tMZgQLgi5+f/j3JVpIW
JzW+TKIB+SNaUzvZIeQQYQ0X0J1MPGxHYN137txBmDTVSS+XHEN6f6fmnz6A
WmvP3liXe0/3kRO8rSR274LSkdeESwNXkDIaOFYpN0fBASggoCPothL/DxXF
VC5fgPEggBCc5if547NtheFaPwksFDau63U6z1REmQJyqaNJEja2TamqDuSp
Fb8pPiGa3pc+my1gmBGnUJEwVQQydMVQCIjxforIA4FDwz1FaADFIRnRM/jB
Lxia14kgr8dcOGb9+gi5hH3at/rDOT5PgUpy8Gx0FK43Sg6jcAknbmquYEUK
PetjV88ujyaJWtQ6CJtrwCYUWWzGGCOqOH/JGfKoQscplzqAWCIFRirqHS0T
jii/Xja+lh+133jTYN6eQOL9w++H/eGSJYPPILX0tGgdIfh0AmhVoCIzGOZl
aZ05zfOIDD8pLDf8X0cJVensbUHPrtfj8Pq8FtAQX0F8nxyk+FEnn3FfCmNI
PQxvoqWb9AoclGYtqCzB+SCOOGM5MfCfLokYlQR6LY6Cz8EUnkopG/LVKIkZ
NyMS8XIttuyFYfQDZDqs43uhqNhCnD5rU/9OuzoXfl6ELbc33mbOmvn5ubmf
2d0aDC32iPHVEYwFuj6UJhG2oDL5u4jzoc7V8IjsOMWebDCB42cIjjLD1DmP
OWHpGZmh2gIca5JKP+/WapuclP9QaBZUabUFLH+rsrbq6YTVE9ky7g7sCOw+
ij1f9U4QSJ7QaevmGbkPRdtZUvlCGXYf+GpGQEGoz4nvTKohnM+PVllZfIFT
ojgQ+WcJosWEt4yTaN8LeEq1pHmGEzcBGHYDE1yduAJXvsZfiCRsNOlWIbm7
3FaIXEnuv5LLdml4eXtIlwaTWSiJfQg1Z5A3WI2BwZ3UvkMjayBlN6kmE80w
uul6SZk0/8FZJftmRfL+3zHr46IEO3l8VeWbkIfqQrhA0BMxPIcHVhA+XTln
fYKcIgbKUwAIayzgzlY5q46Ypo/vAOaZbyh/rTcEDffCQNNSjQzX9qLT8SXe
KwkGfXVy/8MH4nLokj+Z3I94YbOq8S89o9EyE8MP9wwFnUwRFKdbTdASH4VL
1ANM6TM0xhjHiJA3fkjfsiddPaHt6mL1XI70sim2QnvUeDdgA74EntN5iPfE
ej1BjSS1UWnI3c71ElilKjRqSyKF4MXEdKYlL6/BSvBcNKKWganJom3Dlc1s
+GxtjdQBJ0PtNVXP8Lp+XVpmQbCM+1bofgcfryGFrnue5tG7pVrR5XB8MZXn
t/eGsa0fJQeJqc+Utc/Y9xEyGRQW8TjdcnaORBhRpy4YppXSETihJPIuUcCZ
rV5/ss7QHwMHEWrXnCQkXMD1pmTkUySOKjOgUDmGqr0CrkjAAlaqwkqcVR7H
D67sHLa7YW+DQKRJMhmnS5LU2Hcpkfs99xBbj8XJIBqMFM9zfFhj3Ypb4b90
mE2uJ8rAYebvdqRmAZNEyBRUB3yqg9y7d1l1JDgGxDjTZsmKUBjUUxAQGuZD
ORmxlepdqMfBx/1Z+WfDiDLdeKOmuHzWCLcN/SPOTKo9mpNPIAOjR8o/xI2K
dRSgpnLatwm/2+m08xyoLq+9ZRy8cBS8QDksxEj1xXV4nhlbAJKSX3PKfo1+
NhcIiF5aqbspW2AdJTMNr4nzIXggkBBpiXPrMEEWLPXVaovSWWxUwUNRLxRB
ijZUy6L5LH51Hi2Z3Homk7llcRIZW19OIA9GdAqop/CGvNCAkYGsasmPItlu
GOzHL+Vq2XZekdtgZ7NlOQBOiZviMQkZ3R6arTV7IA4Kbo1ZgTSEC0Iml/Dw
LK9m27XqdWDuhpJpsga7c0DVO+V4X/ecKAdCOCyWJpKuiSZKeiROV6DWG2UW
S7AWVxSiGeuyYNJP4TpG4fowc9FadY4+XYtRIwLggRyZI3cQuQ0+t8qMkzrQ
feEh1cz3DusjUd6w9itbpqvFiOoDCI4FzzDAOrgisgnl+GTbDoMj6igJgJry
rqmi+aSNCyiEiR3Q55IBrxT585QhJN/fkYIYjXWqfJpm17lUULJS3AeT2sUG
jRKEnE/7VzR1qpmRWIK6geWzFprvJGgH24JUSD8D68BnGiApSMcWeGh9Q3az
llETmjx6R6UO1iea0X0KGfatjwfgV+PyBAsIm9wKEFbsA2dBYZFUWAUwQZg0
OpTcaBrCtgqvvkezQIsMZ81lUBLoevry4jmoEt464YgYeqQ1p0z9mednV08x
15s3PJTxe3Y98c7A2/856fsbhjmWX92Dv/fh71fw92v4+wD+fgN/H8Lfb4ee
02H+ZTwe/6a/OtCvw+swRWDDf379/Wf01wuelVyYziz/vTUD+v8X4dk/aI+E
/pNDJTOkwaM/aI96ZyQX8Z9oRsIR/olmJKzpn2hGt//jZ/TlnoeQjz7BfPA9
f768zUC3+fPl77dHKrnvkNz7gaXsU+byUnH6XHXD93dYCn/ggtBiqAKy6Stl
1YM3Mmkiw0SD9ITW+gdzYbAUY0PwNS2W5SSCUXBNh6CqZmCwn15dKD5Aw/5w
LkwztaalZgO0UlfJnJFKTapIQjvPzNaD0UVpQD4bhCSrC5NbekhESbnQzcDp
CXgYVyFTir9ik9kkLczpk3CMqHd2UAxWwJZtN6i19hSkq/rHBt0uY0h1NJhn
GRbHTdrtH3oHUYPcpR9RfYc1X1DD0+R2GAsfgVjgzAPJyTaazkdKgvPamTRq
CilL+l1vAq+tz8T8czM8uaekP8bUp2pl0r9IAzupp12d4/kTRzRgL4JNLPMG
R97K4J1mrcWMQFfjnhppZ2LsRX7L0FHTnQE8C/PAV+HU4vkICJWdkkYP29Ox
k8GYQMA/E9NeMkHEWUGZSWuwZ6iw27/QOC3yhr0DFniJqiRui+KkNe16wYbL
udW9/0OEBGDFGOjkF/96fOQTwgJYgKrIbEkG2qMEiY+/O0yyVZe9f07oVMAp
nRyBQds/KYp39s+pjeAwMAV+wR5Wr8Xh6MXeeCtCsrsWrveLPtUzFgEcUVOi
QaKafO6syGWWqfRZ7Bmjawy1RhW0BedBKzvUyGuZ5ZvgfP4UAr2KTzkycpcl
CuiWjSvQDW1Llwb6dzx+qXMOsq9QAF7rA+LIMPxy2kLYCMgapvsOCDAZu0fC
c9JebHkGByQ+m694Kvk18Khs7koGL9ywnf05hiMpNAxYAZvXSXemu9rNPtxT
U6a0693hkQwkEr/IGmCB1GPOJlZX+Gvt3aTZzAaUXTILWIiEDKpJVIKwxsip
AFBhSdamEXokoPkowcZvw4hZ9adswICfgImhfUyJPSahsAtDg/m+2ymONPJ9
Cn4zQbzh5nPR+yPnfk0el/MMdPfnBfZqzGfw45MsCP1f3a9j/POI/0N/zI/4
LxjjGL6l8Y1fQ9jStJ4IgRBYHX7lBB5UT8av6sfiO40f34NfXp5d/Pj09PwZ
/ijJDgxAzYV3BLOv2y6wlqnGLAxWBX8VB72P0/zbk5fPT89f4I8Yiz2jV8I6
6J9zRsraBW87tSMhnJaxD2of0Whf0aKvzp+/wj2D24qPSwgSBsJHvoZPLs6e
vr48exLtyzwDpVEb8m3KVR46SdD3vuWhT19f/YA/wbin4vkihtM7nZMTnoZk
Rf9qVaUvas5tw3qivJVZT1N1rwN6CRd1EpnVMTriNNMiJ2Fl6O51ncBE+14j
ZUucQgsD5xymaNX4SdIB+2JDZEN9aHHHLdHmsKOYZp7j92r9oj/ow3DOhOOq
G3vY2dcjzWymzAd5GbFQvvuxYup8x4PUsK86uqExFKBi5aeNzltwYYJxqObt
+zvzusTCZ2kEcVvHLZE9RvyRyTDI0Dz2KeYK9RiKgPStI9dGLAoNpvpKhMAk
aFZv+XMpg7d+TvXkdxOKu0yLY5FDpq6BzvkEXKSWgmQLpmjbr5YRbNJnYS/9
fwFtaeILBblwL1QIttCD+F1ZB5jpE6CpbbXDWYBBehVgkFBgCyqSr4PiewP3
o0pDT9S+be2i93wKppILmErTLLaeDMZShHnkPgNg6TZT6sVWcqaGRlKFerCV
fNz9o+hKpJ5ItIzrKzBVj6GNPg15qX9BIkpstRKCEOx64ZSkUd+QMdLDy1Bj
ivBMcpR2wIa1GKzrxCpluQ2n9LXmy6he9e9xQjb7zB/IH31KPbfh/xUgK6mA
xi5M+Sb12cakUT+xbayk5Z69fE5yiNuZOQrI5mEJ+7sw1YG50ZDSMg2jzmOF
TvD4R7DTQ6xPBfxA8enEvR6oShWcFm7b54lVsv0kOQH30aev7iSpMuAtSmcg
TpCPF4mI9mYOJJOH6mPJ8YTZk9Iza2ezOg3/H6HYr0Dbp0QxyuNetOHtTeDd
aWE+gr3nDaWVSd4eme00y5zFCqqClDBKrUin5baZmOqpjkMvNf32WNUINfbU
J0l6/pIPyl4uaedDxHsk2BHwsutSc7c71hh/gWyykfbW8Eys35l3W/d6ohCk
vqeDd4H0Ymr6fLv4sBWfbFADulqaXjTUOMd43ve827bwdQPEM+LUKvQNEipy
jGnIbQh8avr+WLaHzBJXmHpo2ltJoAc+sH3bzWt7BRaqwLLclIlHUIS4pb6j
J59rXGrKVqf1W2lI/U8EigHSKJqi+2QX0xDzsO8kSj/AS7LVHlYHeHEtUjnb
s+TR1avGsAiLeA81EdZ1NqOw/sioftmjkWBtUrjeLiJdUhKls8FQp7sOL3eH
fd5GbzYGD6ZElwylkMwVkV6GRCVrQKjF0+Gd9LqjYc5NmY8F55h7UaAb7job
nq6ASc93tOF1z8XTPWeN9gbzUi2blN4Yhpu3YjyS82qiSSYzCLllt+jEDRad
8MRDuxmKPCRxdhIKhkaar1Ah4TBvoCss7tewWVaq+bpdn1Zt/d4i4EDuvM2r
hjzTZKTuD1uNmCynvpsG5W03AS+gXHRHkOniY9SXJLOiilWraBtaqcN8CkWy
RinC4bD+EzGjalrn2kK9cWawHahzKEHsKwt13FuzlkJIOZrtPrEfTsfFp5N8
4um49unYPVjlxZuPno2LzyZa+vCZyO7R0379pYdaM7nmH49Aqh/lDjG7S3JM
YF9N76QAzX+1EoBdtadVxVCbHQG8g45LzTJbSvUBWZJ9evjBKNEtJ/MNO6Nw
H3CFeL4a0ISM+hMwkNLGOrd2XkxgS81PmG0yNFtjlw3NiTXKaGIt1czKmFgx
C26V26lkLcWiL6h57gX+/id7QKBcvJSc+2jXjJhRII2aXqbkCJm3DSPeKitQ
8VTKylZoiTjrfhkx+DcS9qV+lxLEbbSh71DUO23ETfjJCSz/VXL1knANhv/8
gRlN5DA9vTpNnp29+P7qh3+CGd3yz8dyrHCLx0/OXmFp9YsrXmPvn3/KHCsl
kkfuUXKanDwYo/2xLbDTBCPVZtcS7NOqgcNpfk3YamlxxC17pcPuNcMyRcaF
ZuhK7bG479FZS78n6Db6JYZZKKx2kV3nIF3RBGiRzO87xRpL7TGSTA2FZZ49
Z4nyp/tbnAvOeYxxmVB8wE7OCbXjJVsMUVWR72LbyALThShJhGPTfYSTkpe6
3KSo1B9MV+X0INEytRgz2UdSQEdAh05PXIWwxaT7zcDqOj6F4E/Na8uK82m+
wiCfDBWaqUUAF3UsgCP14kKEGbmIPyGQMBxE6I8axGFskz9GYsqHCYbahgy/
sR0aaUdHRt1sK3cebFoTSm49N/rUxTssVelzunac/eoSFF+dM/n+Bn+cW0CH
BINWmdmd4Mjkw3tihXL0hbCUlpvYztjHFlTdlsxBJKNdq/QyDf6bbkiM3STO
Zr7wfD7mDY9MbviOllFM3MtOCwlftlSZTRjtb+zgehwIXYS1FeFKSjpMt3FF
7ErXSLAjLFKO/WEQZSqZGVEoetTqc+E0F9DGYSSo6qFlWyGZfg2X6tiVjYcA
nbsRlauOwdjibAs6T90H6e8SVLXzRZt4rKdM/K3hPhtvQ6Sy+hbIxt8g43Gk
peNCLSuhx5AZJdM3EQVTCePRvKLsKjeUXSUHExokdi8H5gx/inMscNXXxk8n
t/N80ctN7GYKlXE1VuTri/iSdvPU/E9z0Q7byIlpdGzap+1IfIddd6WiAPGu
xa6pPiBH54EcjRuyjbPGVNsa0nsM+/P+hlY/8Tu5L4z9eRv60d0syo9s560S
+z7d63r+ya2VB7IRW+5k60w2e2W5XLRpLTk26pyUaz0xmLY3MtuC8Zk5wyoZ
Z46TDmekP6F9Ds8v4f+t2FbPe8gEGQgYxFm7Qs76xfIOO/sI4dheRdv2te7u
QP+y3a2XnXSX7T532T4ZR1p1cM/Ky/PvcUcKaQuvhTZxVEjalVn3hOve2MKP
LG0/RKgO1y+S32OxLQRSHnVXwdKgHB61SEqPZBa/gFyD7HkTdDCbhhoRrslL
qp1iPE1D+yEf4ufwpgLjRNDmXTBunY6mgbzUigLCJXt4//jDB3YnMZoRrIeW
KBUfTvIMAiBk3gpDEaZq7jvz+a5be5YdWPlAmkqr45xPWfGHLXD8EfCE9Uv1
sGqkIjlbVNnNPxNh5YodLm3abSHFfB78bauU8Dvkm24/9fD10aYaKfVL5vQj
RIbYEnoS+1szRBCcZbQH+mrpbzdJmPhxhdyQg5B56uTuXXKa373bomHXmUWu
iK/iKWt72cy80hVHwYCcKLVecvr8E9L9KyqpBwW8RGAoS5U0rlNo3NSSd6Qt
GvLWdqsklvTOKSbikhOGOUItMXEc7+5dnQbsgxShyPKcv4uVPfBayeXuXXFv
wzfRDvTQR9q+yqmmd7MsGa4sZyM/hkBdmIwUalUZ4ZldvnThwgdEMktj3BeA
irT/ukXzfrCNL6kvDI+WxOBozKdLE+eitAReQZuf6k5gPs4K3QLXy/C1yH6g
ubZ4WssqGLkedE1QNQjAkbuhLHPKnw/gT/5o4mZMLe6EzZgwEAuEXuzgkGLs
lbKNPXwYG4LltC4ZfGXKeUvDbFwd27YtlBgIXPWCoVgftOl9uexYbYVM3+Ju
XU3R0fd/q5rvoQt+QPGMUSNSc0PqiSjUPJrWsdiEApMwJqaxqYKwdo8WP/kR
uTKP6nZOCB7QZrT6Xjbv30v55YfQY8Ckl0R1WRi9cN2kDdzKuMrNNgvpK3Dz
Rm3kSpHCM1gwYpObFFLbJqOTWJGLOdwzZU6+4gKESk0hnw83oBQT9NItszqi
xq3Ol6CgGOQetsa2gveeUdlhn44u9RPDRpustZsJa0YzKDz+7f15ZFI0oZjc
9BWC5/Beka5jpidl0fZ+78lGgBX/CNdwAIuKsZxs84GPLr+zpyHvUEHMUBW+
5Ut9y43PfilPW8KchNO4SWcsncTXHUZj74rFCkQcJXTJeBQlwWbkthLMT+/e
Bdl6926wtn2bvp5eXSVb5h2YMYUoJ8zJnNNsA6jhyLtzOkdPnvkgZ/1EFUVS
Uu9U/uQtbYTbU+lVD2iwHHT0/QCmq4zayngQHVCvs5RxHylyTh4dSydh0Yzi
NoTXmDDUNJn2q1U58942VIw66Te1b26DkVPUacJq/uB5XLWFQYecxH+Yhbaj
jj2kwdEfhMxhGxr8KPavUlYq0O80v94yvHLkbQ2Ou8jfesVI9gVjjKM+w9hX
KGZPvqH5eoWeh2NobrgiQnOu+3mdHL87hj8nY/jvU/hjEK2xt6XQet/llnZV
vUOeyJAnfkhpiQhDyub0DcknQaGCMWrjROvw7MmDUPhYN1S7ZpQv5omuIyzK
TjQ/mPqYPWxf4aSuVkG5A9Pxt7DlFLiFhB/Faa+mGwjB39oZa+MnzQNbph50
QN2524bKdAzDd4dSWtlTPKhct8pW2Vvcw/6Kd5vbqKQGyot0gSP5SccxYosl
asFjpq9Lc5TeqPWokfvY7GPrEzQfVMVkoye+Tgj4JRgJXcDJ1HWiHsZdbqao
bnyj0P6j9o9VE57rAEBDrNvIYP4BF6eL0n7qzqQGf1k8VrVgXahXstOZwPSU
aKkke6uiuU14bdqpSwthLmGTDEtyQbdHKBcKO0WoZ4Z2Q7r+6B9XdU0ONhpM
43G1swnGww7abWFQNYlxYWo7l0+OXKz6m3fypOrWrCbRS3vCDJ/yNu1N43UT
Cqj7qiG5LVzrT9OQ/Oo0UAEOII73eAilGdTuo9tVxFPsKzCxyh3FLpclmOiO
cEXnngPLlSOSCk9xrwMs9ms9xxrAmuxzUOAkMVvmXLAXSBgRZ9kyFiQ7eigG
2StFo8kygLiT3kzdAEsMsIdUCaxQlHY7VUIfX5B7lJu+WLjyPRNHaRbKX6ks
FUG3TT1LtPci5jzR+Z5MnSUln7AkdFS6noOKYUR6SuNHnQYkvlQec9I3Ulwu
Dcg6M+laEj29dNJtU6Lfl11Ws1VZd3Z/kpyGsUNsHs1wI2ICZ+04NTwfU+0z
R5WC4ut8SngkrWNVYeLsQNw5BHVZLiQnUufGEew2bxcq4WOcAKPN4BixfaDX
EX0nApKcA4NkMAYshvFmO9neaCf3neso4dbZihiuLXvU/Pe6snUC0P46T7/o
xWRHUOPb3ne3mtbPRgbtCtaA7AT815lEZXNbkrgbVyiT76VP3+zFkvRtUBwi
XFghN20BpV0n2roCc+feWfsGyz7343suLkF6cz9RmBaL1dBV1mrLNvKRA4/O
QS825VshwRMnjWOwgzzILyokP9SvzH1qNj3nka19HA0uNoxyFMa7ASsZOPCW
Xa49A+FDS7rt1PFYK/BofOEo4aprvpNxlkWhPTv+rvXdLgKzz54Cms9WiyOq
66HWBGqPSYt44frnrxLO8p64x/SE0AedaJVl2GJHOpn2f49ao19Tv+TEmiBw
cBUo+NKV3OfPaVHebCesvnuWczZu9x5pTBbaWHS184U4zFxAo5L6GTx814l/
qwsOiKpZwg7B2rhXqRbWLaotmExA0dK3mYIqw5sOL+qdNuOa09HiPcMo9OO/
kK+Daj6zWtD7T07u3fvwITkMYYd7x8fJGmaZc3OY+ojhqqXZk3DjvGHPiu4O
Ds5lL4ZQqTQTxvhZPN5smL9I4TSBnZ2urhF4Ybn23hiqsxGVE894njGUuH70
RR0D3IjqWmTvwM5ClHlEFxljLuScvd51RuBbI2OzSDFPbLBQ4YI3UvYN1Zdp
Li7Dm5KpgFqOfHT7J667DwQ1UnM1Ol0d06NmDWfjDB0kgtJNdwQjt+NQfLrC
Lip21qjHA51sET8ivUaxQM1AmwyVlhAO8VdmurMkJ/DvLCeC9aVA91H9Ks2z
9eqp9qjUNn/dlR9iTwvp9CfXuOf+HtHN1z5OICXnQJNEU/BChDgxW73IKE7o
Dkmw3W54uBI0tSenFvRY0O4xvqagz2QChLjjDoH+YOj2zQF+80rbtUinLVIt
+FqjTBasGokUPnLuLoLxEfT1R67JhEHhJTJ+jesbJYlNQuR5k4+CLOhAH90T
n9g3221sFbn9A976mtoMyW9wc09fnTNXXmVNHb2dw78rFWjYZ6rFlbtVeXFb
B8Q195BE3qLqRX/0faenmXJYxfsO+r2tCyE36YprA3tFBuq83K0o7Ar7xth9
jWWHf3LcZ+xjmoZlvKOY67LTLxLoJChMX4qmvBYoEZMRahmm9458mpzcpxxQ
gsjQ3jh1rol+fQ1yH1104k/+mKBxxswf+RRz65Hq5cRYGopyeFuwgyDg9nGH
61Sw7ClCwIRxyLVCRxpAvsmBKezGoRthTMi1AYFTcBXhg5uUk9BZN71QH8L4
3JfoBbiox4wLyv94f2dm/knwQNQdguGKmDK6fRd9U8BLLDdCvv/SeHlCv2XS
4SQdgoi9zzumTF2QmMhrtcAEbOKorIZTFSBuw8AAChTzm0D7b4dcWn+8cPB7
r87BrqVvSCsb8AxSplmri7r37dDNoXS54BYYtXyARjkwgAuhWUXkZ7T9dZg+
fQcw8fH2TlKKBd9i3M9p3zgk45zbgPsV+D651GABO68m3Cqe0Chs4wjHfYoD
nKjpPUnvifw59JtOjbOdrLpAozmL2coOL4wfuraNjWw2wkIDcjOLME9GLQ0x
UMwLmzPuqXIcrnnHeWH4tj0yP4YTYa8dfVVQNBQaAFmBGubamBlOuPK9Tgzq
CGWjEaNQrmQwWkvb94IvORjQK068gF0WHTxut5eEThKcAGU2/yoaXxKbauZA
fuDEshPjU3KcLdUF6vKaUSecY/I/W+EeEfzDWMi+iNNfhDnCBvAZLdO5pbbI
MSzBakUfpKTqo1BOcWHAPL320V1VYoqpDFik3RqMJkmNfufbNAmNl/MrvVVP
SfauFRXwn4blBn+bP7IvBOcDZ/42z276klvwtGrfudQrpXEVjH33567Deida
PO9TFue/Nrw4D4MdxoSH4+AHol4s0FvAWso2QJLeiXxCz/JFNtvNVtzU5grF
PgKsr/TXH7xrSL8hApg8Q6exP4ubqXSdqlGLNJInwWWobI1yCtOau6lSd95w
hdOaNU6CjPC5Bw4IFX2qYrtEHtUgvEMX22STbzKGlZTaahxE+y+Kl4JSevs6
wwnSk3XYoWGtpCHVCLaxGtpgyLaV5CTxhXMcGgQ6aumdxKZ9sztxTUa5gmEt
nN62JergEanm3CT8TTond6Uds9/fEc6rPbRRS7optaW2QjOSoyr0PhJOYkZ8
5Jhi2z25Q5D6jc+rI9UDBp4k7jtU5807bCmSz3XFvBJfZxdn/QlInh/7wwdF
F+Yiw2gZo2RojlJUuE7f5evtmsW/N3FcaukzQp2hRbVc8BRA0ZbiVL8ReLeK
N5JB4kgPdoOk4CgbCr29iJrQTu5bT3dfO+vx2eBOH/G9qgJJRgj9AZOFVth2
V9P7ZGZNP7WYZCUOC3T3XSU9AmxWI9+JlFztiErG2lMxuErJg40AiTmq1H2V
KaYR6Qn2U9XsfwW3RZbnegaVayAaUff7YoXXLo5UtSw4wsLtoapCX5lFSQU+
QMf5DCXCXYoZJ6FWUvGIBwjOmDpcXaqFaCS29XS79DuyCGWmtMHrO0AC19cI
f4rDrUDnXiH3CTug0C62K5kQtfZ6OtV9G95Y3fruzjrZ2aR/Z4cuathS1xvz
5LOkaYii3J5/7/fDWYY9orGa3l3R7CerdPcQKDmFGEQ4xMG3NfZ4J99gSHbo
p/dhAneGU3DmNarLN1E37SWlYnkaY1V0hHdVwQJHJhDpTY+eS8ClBuR93TC2
T9ykM7XJZEBT3MY+XRMSLyqiQkswzxBtsQeDDRnJCwOGxA06VQknhHUkQsKi
OoluyqPMeSe9S+iSaLoDb2YZ9W92LwtTF+FDkMA5QafUFK6WgFJ1MXsntiLu
K/cqdbAbM2Hi82yRouuUU1J8nqYKZVz7yddJcJY+bT8xYi6qHFj0d6UGcczC
XglfVZeu7C3tlXz0+NXrqGO3F0OgQpwbhqQbUDtMsKLJ8KOMyS/t+3h51z6E
mJScwLPRyCzqeNp11Zk04XaLeRWTI6+HwY/s0+Kq6LhuA0vUmjrsUVUHGzU6
PW+iMZC9J+Z04CBlYA3y2NuNrxlRE7qBSymuNGoFIMU/HDMFmiDGIyVL9goW
/flGeJag3xEPHvXpXpV3pRAov1YGBhZoJyZlOIRzKtRF3EMM0JYOTnUvQDm+
iErbfhJ6uRyJi4q2md1RI1JW7HTu3rgnnUu1EnUz44DOeHJDr3PUafJyzilB
C7iSy20xx7FtVCERZFWfAsgb26sHkrtEtgoW0e4QQe9xdl6t7RVXVUTb9Mre
HHo/I00YudWM4ovjEyeHZ9Newr4J0akbr0PkATWnfyjuyH+KVkpHt6Uz13PN
oq8xYxv5LtcJR1a1ydRVJ2E0qiXClCAMSQo/aXfrqqUCvCiDwr0QUJDejsiU
gJVWqiJ5Ed6j2saYg9QzR3KIZNYYwF0Ss6okvnFTht7JzBw/y3xz/8a9tzmi
1e1BDqv1EH+c9gtWckb9csLtxRcFp3qcI0X5QZ3clQPVwQ5GLl+w00tKW1o9
0tRd5ruSEbZjbSqs0DA5D6sWsxisYn0HbY80FpAi25Ai36d1KT8LdRXTdIV0
RAF45Jo4wAIjgaZbcIkGIAaFs4Ymut209Yzan4R/WBUgpiJZvVVM60lyGleq
TIFLpkXTIt5NOsNVUBNyrNeAs0RloJceHNd9YjRbO0EHO8Lo3P1JhZGCjQYv
6lxOV0UAuuogippWRIlLYjgHX4FkoTXiqpaOy+3F17O0mqEgX5cV4bSW22om
VZe6bEze7Fk1VWgQlZs1A2tZbxqfyhedFerSUv2aibkPt8FIchflz+nMTSES
++jZo9WzDxx/IJUd7TMqr8Y84ccwF9y5AU1NEnhDUu8X9QAdV6j5Cvql6CPS
4vAagV/lNXQP5iubJsyGk7cjYChM/b44++vr84uzJ5jI522x+ItMJTbis2de
WBOu08IEXDqCmAUhly52QmupVQAwQxCkT5V5wAA/3aj3hLrUiZUZ5AC2n4FM
d84iuQtdBpjwKKTZPQ+DkRJni15XIAa5/4+miaZNnIl9vhjZBSbzbaXngQ5b
Wy5i39a3qdKji/2gwcpA57WYJUcJSNsNQf2Kp4GFCXd0oNR4z3OVCRf97zek
ZFJgDRGEtX/uKm/y2aBZHK31/nHfWgmwdIFrkA8ZOvvjo2L/H9RoSVhHAzjZ
vuQ3b1+cGa2qjiUhTGssKKuTowTyaE+9gfWSi3+B1SfsvjOKQZdkqn5y8U2T
eD2qhP9J5fD9FS40piRmDjzhWE+QF/XFwJi9cGvAj5jaHKFXwLc9Dw7adMFf
ysZdchvjbp8jteXU6wpIVvicV/jUMTDfep2G/XpbcXb2r81JzSEaK6pDRj7a
voR340UXafIjexNUp+lqSs73nB26Fi3HhPdEOArCLSrJQI6qJcCEmVNWCRk2
4yhmNHE/sJ+iPaC8RzVOqnCg3/Q7NDgvQ3weohNMt9U8KyLfEnd0wA3oOzfu
jyKXEp2O83zWKA6/cIVGqkPCNna3yh2KCdCDmybliyGRwhdsl5qVxNWI4QkN
RJmOSLJbWwYEKpQ30SDUx0Cr23v9A9JtNUpNil2ubtCZ7beyJe7JOgc1n5Ow
EDG8RMbS8YCoc2jestnKqIZBg7hOk/itYS2jyRRtoVNbm6EvBg+1LVZgxunV
FhlSdQ0KE3sh0ReBkNvQES4UY8okX4PyBJGNdMqeZP+Hhm0VNLrc6DRYmsG5
sqwl9S+hlRPiuKqjKzbou/G67YL20dDxu6fyB85LUKRqtOeo/93ugChhmMbo
hu1VHo2B76PEE4ajYaudpgsqRtF4yLZVDrYMscCuuiky8SbdjZzoIRyIN7KY
c33e5qqm9YzTyRTpyiJmHNxl5qYdptXbGwU7JPxGGczA5e/epU3MEBqny19C
r0UFTTDIvHE4Na+dP6ez5PDe/3H/3vhe5FYbcWz5Xb7mS/TVt5Nvknm6q49a
lnUY+Fzl6Ps7XsrsMa17ogic9bJOi1S6DVuf8sIZvE/vYenycQwV5nOgnGn5
LvOurIYiCNfwABx0zeofRxLqI+3hbMkxhk1gV4Z4LOB3XPguoQV3u9BC0sqJ
XfNtzUhfknAG2XrRGKhwlorcgQOqnBR7US8p8oJWMsCdvrM5e7fJq93n2xY9
p/Y5toVmfRi0Ksok98aXJNe01dCugdFQFeJMU4qHQ9kjFxUI9quLnTyDz9cr
VZ0cChZUreJntFb55OuQHqQxnHRabdEPMfI7SJQjxqM2Aok2Cmh2CZtOJaAa
q+xJN9sW3gMamR/oYy4kyIR0y0IApAxnUbnQQ8RgqnaDw7KStPEc7bfZex+j
v35773emv3+chdajkHcvcVDIh3ZjSCEXpx9+Uq6wZDMKXTuNXSex+j3MsOHM
t7Ms0sdVEwfCJ+UbueIapNYaq+W55rnUrktGIdesXFXp1OOsvrihJBzvisUE
olVWXDdL73E+7IJMdcXmkWCvkFmveZnDyQ4KQTznPn893fMCHEltpIik/mCS
qQWmC3sfHyDabS0c7rhFqg/uamKZaLOzEoQsOf2RvG0UnBs1CRw3/J6HXu38
ZOU9NBGM+Dlt16d5kHLuGTmjrThNrDgdkbM1X2/YWyf05vqSe/SQvYXY3e9W
T01a42YLEnDWWaBZ14ZQw7AumnINMP+YkhQKrFP2xwMkyvkVvCla2U6/0sLE
1C5Ut2iTNssRnb1fJt+33lXamsTYIO7JGkGDBKau7NIT2DzdkGGKJVtwVlnx
Nq/KgozlxHtJGTMHYdXzt/i281dvv8IoNAVhBbHw25OHHz5IUZ2m4flcP7+j
rAn776JTO5+L8kuj6iv0iemqnL0ZOYEp1NKOVN1geatv9vC2ErtMZzOCSrqm
E5R4rOxxbwrXd57Xy2FenD1++fw5dkN4YsWPx1yRBvNyN8lawIT8Hh4HF+4B
FrIV2yZTXKuexwS5sJYMXHUeE5vBslhgRYL7sQjJhirWI+E/JOGZPYoYom4I
bQj8ribsbyWxokgF5kL/0mNZnJ9docmGZMHxu+9w1x+LDfEKawxZCPOhugOv
ijLUscc1AVY6FuZ6wKidwHyNSo6QO76/wr0E1gon8JXusNDp1/cf3iMXVTDs
iDOz/2ev6MNPfWph5t1CUt0Wjn2StKoxlrsNquoUmRxWNBC77fgYjFeuAGXZ
6hSvFkvysWo21ID6pTY2FXNDuersntGStwCfRsGoPVmZyal8j3QzbBSdYXet
sBQpYuMKcbQgiAAQOSTKFnib+XAdXj7sjE4tiJuqJMGeAsOiqjSQ0xuuaRT/
gV+eT8dxNExWUL6mj6XFYVJ84S9ZupLChR5YHLzLIhVU9UR+AhIphm1RuCGG
mu9xjqq37ZNcbfv8bMIjB+kixAUaKnMQT4lV8Q2qUdeikDYerKoPvcX1viXZ
D0tkQ3ufgkl0uvcS/FZHj9Y2qmgsyj552PbrcE6oh8vqev72jvd53p7uMKKO
rAUs8o90/PTlyf7hjp9LviWhONOvKUCyRClwoYRrxZkMc1DCKQe0tx4ysXVe
YJNHJZ4fjlzIc6F69nI2S31MvsoCgBT1oZPUZl99EwG8x6VpcF8RnCf6XTRI
VJHVyqcnVFvFBdYW00Ro8LJ5xgD7Hcs+SPtgx3v3tM81wDkw6uS+iciqFfkb
uS1KP7TsMY4QPSSNGzg9WYrBVyAu+K5KNa5PCdfiOMLtEYQHc1xmViafSjBA
hbegirOtMUbyFlRzhr9DLYkg2M1WRysLVVDrDB0ueb1mDWteMvIAaQjVWhIG
29KhL2VA+LjeMx8AYFsopZhb/A1eGCtFvuhDsvTQrLBloagqc9HRNANlhZz8
BU3Qhjf1sFshVssnv6hVcOVaGX0VaA2zpmoJHnZhkAoTCIjqCjySEuZpId/x
3yIFRGGaCAo+bP1gNFwiYfMYMBebAJRrb6nararzZiskkxdSQx5d1nBJe6PP
BAlxFYjYIoD42npqZzIH0t+ZbFrqOVo32dpR1vyWU7AoAskgX01K9dmT27zB
VCdvC83oX+3cofrc5lvRNqZbEVR8YBgorNJ6edR+TS5hOwaoTs3V9IEwUu6z
AqnMEWrDXLDUEHRCXoj7fZPawzCQA3WAh8BMYd9LyaQ7YUmut0TwCkcaMjE0
M15ixouriBESFDMF4kUsEHUGM6Bwr7cb6cOAbtRg3jC4l4u/iBoohrfW5Vw0
JNFbWoM7n1P1JmdBw9FlPdy+fVG8moBgpG9LWW8mFF7m1Saw6Q+wHX9bZ9Sw
GG8SGEfXHuvC6yXWYeo6qgVjsNkwnoaklUfKXUONS3svk7Mr+Ei5sl0Vtv5L
2g1Sur4gZV8KQbuY8MNRezO4CDeFQcqawIILqYhHKl5xjz5v13Mos060TdLb
gAEpBc5BqqqkjdAyeu4SGTY+5xGJwHe3IHOVKBlFo7hcO/qMxWRThP73dxiS
LcKr7ALqtlQQEp11rICkNoGT6nPY8JqXiH0lvfKmu5a72NC9N5YCGAIlyc5z
yRJmb/obDn8v07d56VsEqQTJEY6ZugutBeYO/w+PnSGnqDZIKV872vN9khkk
Ec7IRngqqVWSZdEuL7nCvcHCWvKKpW9Lna8fk62QDcpH7jgY+9oVZMCDcTp2
P/CayNT/OAwkawBR9SxXdztJ5yCjpYXTJ7unZXUts9w2TwnaS4t/wiu5iNzb
UJdnFz8+PT1/ltjGlh2Ah6DHOeHzmtgKYy9BY/HghbSTQZSddl4IStHp66sf
9rzPFrjH2iEIEAMNIbgMWsptdWrZKu3sYVFfOMziG3W6UuyxuK7cwyeF91H6
t8BR7Hx/HsbUTyLU8e6iL86evr48e2IWnYLRB2J9l/ggnsKvx+kh3bGevrx4
fnZx0beB3siXWl8QLq4pSwHmCowvZI979VKxHFnH495Ruo2WhKXjWoshzxW3
hYEM9lO/DWC1vChgCysgbOij0wWhjsBSNwzp3gti2UZM7cRuKfe/QAvf3y5l
LQx256HBdAQv4G2Cz8dzTG+xMfYOCLPxOL+KGmDlZRDS8YtZq4ktQ84ubhw9
P2/PtJtfw0vsTGi/84YcNn0Ls9DcEVRPMILOI9Bl76Tq36YeV5M3FSxhfV7T
y5emEi7AOjitpUIBkBJsqsLaSOIdtU3mxfXPXJwGYmLackOPYY8O8xXJRSJd
dViVwUTk5cfiW/AOKX+sqshKjjgqny9qhH376SJklC6sRKvnIevZYA4RVqap
mIx6y6iySUDobVgTH1peT5KflND23V+nC6HV1XGefZR9R5vgo67it5NQu04V
8REMeo02bmqLAbZstKyiSXaZ95/Oo3xjhD7hRLYZoyXBoAJUZ+Gcwz5Mkkvc
Q3/6oaw7lJU5RUSmcIF/ABVABN1npCkqz5DSg7qVfmNz+1gjRJ3TJDZjUqS3
kPO6iZHmu/nXrgfTKPEGp8rMWwpyFKxuEOSpNtY7CdgjTqSNtRIL8oQF2Qxo
HiOzYKASblxdZzb5BkmPvzIsoTB+9+LF2eOr5MnZs9O/UwGI7yjZ7qgaKNBj
phj24qS5OitOIdM4RkQ+j2PAaKaabZAhah8XNjDnRCLk6xOMxJH7SPC+Zd33
kks6tNWCZ1ps19OMlPq4gAwv0wzDH5Prycj7/Mj1EauHR0mLaSsWxE3qgV1B
JynmJC40/LFYlVzTB2bDdgWsOGNPHt6LmkwZOQBSKUKmQzhPluwueL0pR04l
0RUhH6fzn0GrZdhjOXn2QaLdCNMu12Rx1Nl2XoZ/k5uV9wovFGXr+Y0oZuyv
V7WejGRW66Y7Ul+xreNSbU9CYvFNseW0sVpAud4OMbT4QDbYmkU2NrZkyOAn
QLTCE2iI/B1Fgu8xs9AL8/0ATdVyE7IvMjLofcArvmh7YcbJLTxoZxonGkUN
McZgJPiRVefk0BvthCSPjVwMdCPie5apmyMtGKm+3ubU56n7HLYxLRlGgjun
o+6h+JKkuYQdD13uKR2oM1Zb/0SJoE0YVKGfM4FS2al/z0jxoIQPyJv8m0NJ
SOudzBPItQw0LCnSlKUykz45XIRvvXuSbTpyIUjGtbdMrcAA8qZZZaZuuBEx
ItAidiwGBqXGVSZ7X3MlyEfJ+B/EVPhuhix2pVlQmiiNMeKkqqqrfkOh8HVW
6/o0v9FA7bd3x9cE37BOFzSuMHxGxK2Crm+Pc03fm2djTF/g6DZ11Lb8SKFw
kUgFS5uJRSGUOMJq4pocHzu5dXzs3COmBlTKkuZZbWfx+mDqO6xZ3pmKIKZx
P6CkStLu+l8KQBaCNVTS5aGFMRNaD0ticsdUZQUex2Etor2fRJeudWy5XKDA
yJAx9xEExTxAocaghbTKDhGyKpuWZcM9IQN4NtlRlLSCIoSyiG4yVBD66E2u
ot8STe5UmA1n6/9vt1PeAEeB5HTDuvvV3qlu+DlC3vsOxTm18t4DN9sOk4lt
zy/kFgDT24zzyPlQ78gye9Zhu12dGe0lDg+bzH1J2m/BsGn3KGzEFAA0b8rg
7HnEZWl63Vrp0LYNVcip7eS2C23aNNg2qt0k4QnibMZPzl5hqtcL0BZPr04D
3khnAezX5KwnmKpL9vw56fnfvZ7/3U/u+3GO6Zn7yVfJ18mD5JvkYfLtp/xO
x/mX8W/8nw70a2dV5y9OH1+d/3h+9ffk6vz52cvXV8nh/XvUre6ouwe//gEz
+svZ2avTZ+c/nsHcrs4ufjx99gfNyHX34pF7NARk5wtETHKFt1VDPzYCTQGp
ge35tgWmq3DLj+ya3PShEcfhNMd0KTBSiiNQwhqBiqRntkUu8A8Rfv6VYUU6
LWxFQA6ItnITl70NFKVO3MBqpW1jqHEsrX7zRc1+F2IjcTGsF+mdAvcBsDuR
KnF1HcWDNIH2lpEqw6CH6toib1mX7vT0e9Ke/slO38/LH38aHb6PNoYy5z64
PmOqkPRlcuhZvvUhDie69ZKBjXuuUzEnu3FPt58KPvV0L3OVz1R8sF2zNzd6
dVR3FpbCQLH6Ne6H27STFeI5hKC5qcgsKxfqZW67DzSXG/j+zhRb4qHEiZst
gLXeGqXaSU2M9/sFNMGOVKSADcGpwi+OHAvw4aKm4Zqmq2UEGR20J4RIlzK6
nrlyp1TZNz7scpU5UzOIc+jmzIi+w0kvbRQhKi3mC+tkywp0vxVjayKFFVBf
l7TCZPDav68zqgCjXoqR3XOE3DVATAGDVRXyvuWVf3ICQmWfGZ5bXpvQGWaY
iSGJoMCs4EbD5xlfy8EZ3mSVhhOz/vP08CW+441Hq6G0J7QOcGTM/hfy6rzN
3RjYTKxCoi4JeSPVAD2VPeFQhVyREJ2fWU9MKvSGbpGrLFgO07XjtvxULU4K
jX51vy/ikF30T8u2S0ZS38wpCtIYFjQzgBYMUVXoTHHoK2yWPlROnBTdXYMg
ogLuBceRrYJzx5ep8aXoZkB7Fjx8vNruU7uep5FTPwzZbgQqKEH8PQXmMij0
Pqd6sHf6YMwpvNS0QdZx2g3YkTg/0pP1MyNSV3vXL0WfERF8UXfYJNeytJur
m8Ibn/Xr65isTflFrWCENsM2yhomW9ts495M98H1sMu9gxsu/Qs6eh+curfO
qnLNB8BZ1LDDN9hWK+9i2wyoqeKDC6S+LucZgt2LKoCj/PD4le8Ob9lCJ+Ku
ISCHFRdcT0pbziDyNE7JQvPrEyk0uXdy/x42vu4JcIAWgA3H1sTvfO4BZZ+C
vkeX8GYp5R3mZQw0uKVcMiosolzYnyLkXTL4+R5zwi/5mymSEDo2xlfBYIib
GH7k1OzpDKknLS3dFnA5YG/l9Mi3jXOOGzYtVtk7SToded6YL2w7WMmbaNXu
0vLRge5agbzQhISKytINTyjCvp9mDcfBWyhelFpDwLyzTlZoHcGMHnZaDxy5
vkoLiSi0YuGapNRiiHabe4ZiS8sZRtjfqbm/Twjx5VJwWa5aN8MGcjtlLJ06
lV4V8BblJ23WNsixb8Ns7fQ/m9kOtLpuZZP8Nh4M/JfCt3RJe4pUQm8U1894
teuqzKqfAcYRbSxm0fGjfmQ+tUJgbcLkkNGs0gBg6gvtcc/Znpn0+elE9aTi
O6bK07lH8oUHOOLYTQzoNQ22nDOOJ8lJIfKtV1RkS0lJIxBUGwkVlXvJy59i
yL+PX2gtzXQ+5wVg6RhpZoFjmIm01xaHYgI6l8CSpYG39J+t43eRYtZuL377
pYnqrPD8wEdtZmKHT3T1N21Ff1O0snApz9SHrG15dAgGxZs6zfgUEYeWwj0R
Wf5E7UB9J5YeQGCnYW8dpdPGNEKX0Mw29ug7yXcYRBuW2e8ZgbIWpKLGt4Dw
UayTr8ciQNvQ6r2+LRqtxwsgmUFoYQGTWu3ijA6faVv4ijRb6c8yUvOSg+Ws
DvNaesMFzuBb1Ll9RCWmOYP3S7TIxpFMzlMXSeKxpp8Vc3JDlIuQQjNA+i09
xYgMew2QLjvqZa8EGrkyUu9vJ7cirWaZSkKc+8jkh+pRyKfX08LEiYKbRfpq
fHPaUgeJhNSmqRYZC9YGuSl9fxMNP4l2i6MNyZGwUJMVhS2+FjxgW4i0YcN6
/TP4S3vsPBfZPQ9l6WowNDHfTaQW7xQ1MlJKUfVO6THuadbaMEcSg30LIp77
YkAGQr71ecfdahVJnh1WUPa58EyQE74WdfmRApydBAp9LF9yD3RpaqjXxl2k
IDDd7LS8A1Mj8FWM0u7b51AosOfI+nCX952a86fmEwDWnA84bVaZb5TDZ5UW
ZoTwJhd6RUgHxtr4rsfjMdXldoLGPkLuCBRaI9vkGBWnqlYxgnyglCjjqkm7
8YbPpzAkMPVrOEtp/e4Nvvk4UT76ORbGi194hTX5PN+Wa6mVj04amc9uA9bi
sZ8GPa+8TCTVYSTZIY4jH3jqi9w5osJEAaBWyy768rawiOF+Q/7EqA9aICoq
btxDyh6vh0saPk93N1HPv4RGOi0OeqBzG+7nNnQLugUWXJNNN8vj/hSY2OIz
WAdey1jSYa29yN8t04Vm0AXBju5/r0b2CXsBct73bv7YVrQIUjM7nQ+nLbjM
hLWWuAGCjVcwpjurU4XAfth1fwQ187PPXfOrJVQXkG8/ed1Oh6LM1mj97TYK
snBes6lm/SMXHBy8ATb0o2QfXERRkUNwLgdwMewJ2uVW9mvw6LUmIk2zYJSb
4vFIWTr6zfskijIn/mjmuOLcMGBY3XdhDRinu6EWUktsUoahs/xt5O9jod5f
fmHCzk7kfOwzKCuuxuvmPOaNdVU5xWlvvTwNoAZwf+ltptMFJijCxcaeXM70
V+0771uCxPoMUWqhotWkZ2BLHR4fUQ/wID5ecm+joZh+JHj2JPYgf6nzdb5K
K4IlY0sDv7TvteJP/ebhvYdUiyQb9qXewzSXXEWBq2Cy8ea+ZK+79itO6RXi
tUV5hLpVEYoUUpMh69ocMjEYRZM+D2Lfg6TbcTKtFv6UVU+kwuAHhoK0KCok
iP4N61pFZ22pWZvA+w661uTFWsa5d6zPrr/pFJu9v8PFZUxT7U8D1dw70hCZ
+Jywc1DwDyWHsbfjKLGg1k051qJUYzSme3w8SU9Dncnt8sF6yun+f54Rhn8u
zq4u/i6lFnuSr37n/CvzVky9OTVJ+X9MUg3DqXooCpZK2oPesyZOGabraTA8
yELED9rZ575cceIuFE5NPF1KiHa7Jau7oqbb3Fb2/XuuNFeI/jbNer+uvWM2
lEteiwC7ZYK6rof+dTicmb20xGkH3PGa7Kz4bnqZ3VDCcxDWUfwdXQGhzsCU
UYqS2sr9DfD6mq0fgR3YHhcplxATgEcItEYvxx28WZZcm93VeroWgBs2AaJj
I7uTK4dzBTtlQbEEvRCBIlmtConGraSZUEWeY99l0D21o7stYq5AqmOdHeKZ
IJTJJIEHP61COfnkCuW7n1y1nnxa1frdnoLtW1WpE8l46JW4wptr3j5evK5a
2y2K1/ucBXRQn1Vi70Jl3j9+lr+pxN4dLmLcRFSEetoESsQ31E6axRq0mLq1
6hnltUlH0M6wzhMvTqIHdSBshLQYxMvJVYyKSKWedy9iAnx3ndmCf36J5Zjy
dsz+YuRQDej0PORrEQnMsNAZ1pnP3fAxBe12FiFJEZYqZ1sZ3CTOfmDPpZ2q
IzQ0g2gBJ9Y3KYro+xIOZnPoed5gS0nk3nwA/QsS5IydfbPoXRYnwfuu+plf
GzDADUR889qg8lBTZPovh4/wwDDF0lZxSLYgrpH7VyY3Vd74qOSqvGYMotBg
zi23a7ToQK/c1cSHAhBEu2ozJHmStvm9n5ru5rwkgcUoRfiVvAroK52S0GgL
r1pKQWvjQEtfxU1Tyhv28vgaMYfdlnrK1BiT0Cj+sY7ia1mkOWgUz5qXFsfu
MxZGrrWd1sYQuAyIezzqIr5nNm5CH/yryrvDtpA7GgQ66NV6SMEf0mL+RK4/
k+OgF8IkZuhZwDQYnUsdsn0qg4EkNV1XT4eesaswOT7BrKSWx0MZESYRZDCd
zlTehyYHnBb814t/BfsxZFNFql/dZyyN/jG5dh/RcQdswE5UxTfLZeIFXWxb
Ebqg5rK0CVOOCFkS1bJtNt1TwamI6hgamEX15x28Lc6J6rEo1KWEBOAr2yKr
Ikmv01wt2QEdd88LEvMCUkWdar8s33gdDG1gTRlRs4f1Y+Mh6BaSiaNgw/8S
V8HAY8FjcJ89Bloa690GUaoKSd+hLI/Q1V5A+lBfurHBgytftgxHCadM2I6Z
n5lTKXH17PKW3gO7Fjo4mZEob6lDbEuaiPQiWGCZuI1pYfZ5MG1FEwDTl171
7OzF91c/oHZ3nMAhZIRbDwuMwMW/ItOWbFnZ8+SQhIUWOqzLbdEgm9znyxhw
cPT8DcMcy6/uwd/78Pcr+Ps1/H0Af7+Bvw/h77dDzwW/wXj8m/7qQF9+8vLi
P1/uG+jH04vz0++enSUvXj//7uwiefk0+e7vV2eXnzzQZ83ot++RO7WhXSVh
dRoqGbc8t/ePP3wgxvjq9MmT8xffC6EJVwli8fjd8fEkSV42pkmIJFXiPR65
yEBAG5pydryoqSSOLcjewUDaUMaXC6FgLRzYTn+mQn1qW4DQh4IUtmAMX73R
ExfPHKWCr2BT2c4Kbkc7rb3aOsFj2MfFJFNIQEnnxhuZWjE+Mig1kpI0+fxz
ya2Ey8NsPZxd/2RNA1qfwUM7QXDCsoThrysQte+soixHarMKZoCCuRNW1s5y
YjRwUhw0bwwG00jaFNe0kRYDYmZ4cAYWTM1uw/CDPBXkkXNQQfQQN7gdOuk6
bkuPvSqysUx8zH4B8q1Jmfbldk2KD3a9Ifindk12TQ/kv1Aa35ohy25ArCx3
lAPE3xFsZAU3RjoFo69ofFcZpAzNYufi679eoKOVoZu8Dkp6DT57IWf93GZn
yldgcsde7TL6K5nShfR59OPosfcPdHLbgV7HaugnzkvGQmpiqA8CSE7y1WqL
aUgNMQhUaWDnpuL5YhfVCowyFrFLDlpzxxtSiODc4Sr3+O2RDQ78GfzoXzqj
sLfcLIQUSf+R+UCVzMhD/rEX3mYu8B7U1OmH/hOQabbohb/8j5jLCf1wLhhU
4+QpmQJnZAr4ucQ093vOJbQfBFb8mkyxLlWp820UQHzkGjKkAnGJVkqm8ymZ
KKoaaSDCxMZrRUavQ2WFgTeSjsparMmVlBTe1U9oFO9IIYzqPqOu7oeeM+kL
ZSVmC+O/aT60NX6nMHKwgMl9/Hj8Ck7KpmxrNV7Ea3z+5cAspBNUpzagi8iV
+1Y7rYrkdtb5hGb3et/sXg+UVOyb5KfPMKq36J/lKcwytkNG3gZAO4Ty1U3V
jbHj91U1tJdAL7vAA+tNto8Uj04VQS1DMRF4/4Q77KSyy2sPgDYO/JRve8Im
IdgUJhy54E9QUy8AmcrzrEI1Pi2r/WArBsWqi/hdcWNO7ca0j+O/wN74wk3a
pE/eIoGQZASzDgti790MTUSQntSTQh1cm01Z500WQuqP3K0ZVjfYeCuGJdus
DMsDRXdto2FZseeTnnF+JVZIHIcuNF00Iqpfk0v85BI/ucRPLvGTS/zEdafw
G+bzq0lsQXH5t3iGf/Mzjf9t1vB7z4c8Xuzw6s8PwEn8gfNRAyRp5Sv8zf60
55PfbT6m/5CFg5xh98yi9lYOqx54vUL4Cd17UtvGH3snTpqg72+lzSIl+EM3
nyvjSfOlHLXVSsDb2ODzvdnYPW+ehomFcepg1zlJ5JI5qCVjsOSZNQTWhOEC
cW+R0hPspPPTF6fJY8lDVPAq0MNQRL98Rc7Vi+w6J23e56HRl4KoVfmI/f3o
ddK9FS1J6SZ/lDywMFH/63/y2E4zpl9c6q/+1/+U9+0mNAkCDt4LkjXxE774
Hed7cqITxgQB5NMvzsU1PivnIdcbZ37Rmji9tPdbhwee6wMVJueh2cbBEfXB
4tCld57o0xoc3nRlRF+MQUrIbC8PyQjVlLOwaVdohD/Gyen892yaxC5xpJMH
lLzTP4QobOzFXiWHy+xdigXW63R1pN6llGB6bwpW70Gj/ZUH+jV5gVGjX+ms
wepGVkYq+Qx+6X7laxz/x/yAP8NIx/CHvkniZ86jFXMs44TfPn08vvruSSIP
nkTce9+T99p8dfjR+/Cr4H5R5rfvG1+N4VtP4fegGtecEUXeJl7AggwxvhLs
KhtzU3XyxBCD+BX/R2N9dTx++s3TeCz/8dOHx/Dxd/TxhR0ewSaBvvAWrL5c
ldgxEcPc/nuP8XtPu98TJgVfTwvy4fE3XEwaHHerw4p8ckRjOCz5n+YyMFai
zBRO115r6eByE1MfskhydR5E0+vfsgMEnYWr4jfeW2MHexen3/O7od2DpYWt
776UFtx+Uw+8Tk4FDVDdZ+wKfHhy7wF5ri4CGADGrGGx6HwMqnB3vco+D8Ip
h2UJDThOCNJsjUpAZul2c57tGR47Jge8zeEN8aQEoV1BAFpLjGsemRtl1M0P
2QWP65Ttw/RXmvwwb7GNStgG0sP/+O9378KtuHv3f/zvkxYNebX2oEuq/lyU
up14dDXoeGa+kryuyYB7JR1vX/sEjmj9RBJ2mEWVZSuFi0CEnA0dpM9RwBzX
hYem1F/7FGdt4YkaOVWOa8QQITLSOWcGVTAwps0iTMVGHhbNmnsB+7i6z/0O
PotDrqpFRyWcEmgHRxjl59qlSjOmqLMbTpOIgKiNjl5CZ3iABNPsDrmyih4z
yDMqN9cMN22/gcQWEMJMbgfV71bYy4VcfBSo1B5orAoZb7YAVXh8OtqBdfoG
OSh3EXW9FGDwp4t6W4mSV5TUegoIF22eGfAaPRAOtArDqWcwKXwlw31iAyF4
FKfRVo/OhfJ9+zqpElQqIdFHIKVoPl09uwyFIKYwn/bKBEH8sWJVCNZwUrPx
moIdTE8w5BiHHMOQZhjbJCAAMokpnKVVYmom8JuaAYgFSzaVnqQ++d85wCm7
f9ANIhyQ/uEjOSGsP8PpNZSfV2QrRUiZE0/QVpl0o0FcMb/YlA1HRPlSBe+/
kyh9ND5sy4yogPt/wzwrg+TfpG+ogIpTG8ORtRH/qUcRnhNOrtWJnCbsTxEr
LHDLsFZAdG7ai/K6SjfLfEa+f98jBLMt8xlGChzOrsH0yx2+z4MG/8xocv65
KC2h3xHM62n0aLhJ7yjqLIuZMKY7NcM+m8yjEbVA5GamsG+w2eNyMVagMeBB
aKlTlkJtc0rpEpyGKfENBypJizeEWHPZZBv4R5Z8V1bNL+tsh466q3ydPEa1
buQu0tUGLgJwLuCMr1LgAj+UiwWI4JH7N5j0X0osTEzhO2dzwtd4lt3k8OQp
5nJjwQO8J8dhtnmC3y5H7kkK1lZyOYPLm/6Sjxw88vM2ucQZwdFcpCX7VL/L
qiLPkh/L1S8qfvIqWWarDbIitI+qfLr1JlkkxtQ0Aj2SXBju/wEZeKRH4nAB
AA==

-->

</rfc>

