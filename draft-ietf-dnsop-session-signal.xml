<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but a DSONOTIMP response could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
that the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request,
unless specified otherwise by the relevant specification
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused whilst that operation remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving a long-lived operation uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as
a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=1) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=2) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active,
it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST forcibly abort the connection immediately.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=2) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAD5PaloAA+V9+3obR5bf//UUHfoPk1oAJiVZtjVfvgwtUTZ3dBuSmtnZ
bJKvATTItoBubHeDFEbSu+RZ8mQ516pTfQFJ2TM72XijjAQ0quty6lx/55zx
eOyavFlmT5Pnr8+T8yZtssVmmbxZZ1Xa5GVRu3k5K9IVPDCv0kUzzrNmMZ4X
dbke11ldwyPjOr8s0uX48Fs3h58/TR4eHn03PjoaPzp0+bp6mjTVpm4eHh7+
cPjQpVWWPk1OiyariqxxN5f04jdvkz+X1fu8uEx+qsrN2r2/CQ+Nn+OL3Sxt
niZ1M3ebNb6mfpqcvXiWfPfdkycj+tvR4aNvnZuVcxjlabKBWX7v1vlTlyTj
pCln9L/1dlVli5r/XlYN/cOlm+aqrOhJ+JMkeYGDT5Ifs+Uyr+kj3oGzdGs/
LKvLMMvkfFs32apOnsGmwdD5ZjWCL2cTejSdTqvsGp4+f0b/ruHVGaznh28P
k2dXaQVjwObjZ/T1LG+28LpsflOW8+QZ/Is/Lucwi2fHyQ+PD588ko82RVPB
w+/Oj+mD9VVZwEP/dJQ8gbEfP3yUHMHW01fZKs2XT5Mq3f4+r2cTmH685PMJ
zCWrr/IqM4s+bzYwv/gbWvnxer3MwhJ1SUfw0SIv8iZLXpbl2qzn2QaoqsmL
srWYbw+PHt+2mMeH3yc/fPc4efTw8Du7mJlM6/cpzmYyK1fxmv55kjzPZ0BZ
dVmYRf1zeVW0vqA1ncPs5psinOpFNrsqymV5mWd1dJLypF06/X2cvEov03m6
zIrkWQbLyeTjNx8WZTVPzmd5Vsyy5G1avTd7w9+ajXnzL4+Txz8dt/YFt3We
/AFIfE4r9fvwSzr/fc1T6m7Cef8mnKdV+p9qE2pY0PAuHE9gVgUs1mzBMV7m
srBf8BbA1GuYzCyz46f89GRFT//+Ej/tvudikrzd1MCiqty86aJcxR/Te94V
6WKRL3P4eB7dor09ywhgNvnlldmY18+Sh989Ofz+tmvzw9EPyfdPvkuOHj2K
eMBaZvL7aVpc/kJrcHkBC14B17/O8BRfp5fL7PkxH2iTVpc4raumWT/95pub
m5tJTXxB7x9yk2/WKVzw+psCfznPluk2m6ez99/wCCxlLp69Td5mFb0JKWBd
ldMlss1ZuqnhVKdb2ESYWTpD6ZNMs+YmAyKiyXxdw3ldllXeXK2StJgnz/kd
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
pyO1rJqIak/fqoCAI6FLt65QiZ3Eeiuq2/ieeIvrFSokO0bHn9XZ5UrkI7I1
VF88jaFCU94wpc3ABqiAwoP9wLuHx19loCoAbejRmb2rk182YjrAzFdAT2Gb
/S1Mzsh74GnfCnRVPPzgSO08MjzswBhDOsWrtkjz5aYShS1twnuAgh88eIBm
9QXpfujO27Ja9T4DRgkKRZ3svXp3frE34v9NXr+hv5+d/PHd6dnJc/z7+c/H
L1/6v/ATDv7x5t1L+R7/Fn757M2rVyevn/OP4dOk9dGr47/sEeG4Pbjkp29e
H7/c4y2wSi/SDN9Q8g2BLoL0iBIvq2dVPiXidHt/8OvAsyLpVmBogK73qexY
cgbnlFeknSYvMzAE6j2xJh8eHf2Alrzbg/PcUw2OGHEGdNUvakQ1RYU62QtX
bo9+gxJwms/hdSJGwGBrMnLypSs8I+D2OTLTEZg/cEtRcVQyDYY3EDxwNrb2
6HK7uzks1DXS769gh0rx78AxySciSxBbYS8QImz5h8YLPX8ovD7SjD6gqLhE
onPRRWPlw5qFN8gjnzo3Ti547GAvsqNPxAzeCfUX1MagEjV8KSacS6xDZT+f
ZBOQiHmxwZsBy78CiQkbCSflvUOgG8Olqg8mMIeTnD43mp2ZEcpRNZfDkkTJ
JYmGFlKCtJKc+02rg48FD0xW1dyg82u+LoF+RRcwssaZ9eH+kdGYXOdpe3cj
q4d3N560MLDc6IJk+aQ47hh/MGZ2x/Zg+wbhYHC5UNGoY0Eb/Gwx1TGl9W+E
2pjoV0KlvyF6AxJfbpGnma1GSYMuhPlEiLLvIWTtwAH4QaJO2FSUfKgSkegl
+oynXcP3wGbYQXFZpTO8vKBX7rFPjGkY/REsMvGW0LP/CyyOfIEGLTJ/vnop
rfvF6euRK8UkAE5yjUEOcUSyE1KFXj0ZnlfFTKiObwfzOFmhma1j/0/gW6hv
K2nSQvRhccXgnVnCJ0DXcovpWo1QUacv6MPpBhgOOilxYV/XycXpq5Pxn49P
L4QCo99Glyh4de6w+RhGyaeovU9BJxjcetjbs/OLnr3t39pTnsWP58+T8xKV
gzo5fnvK00DdfHaVZ9d8cGA+N+JOdedv/tfL09c/nZyp8qd29ZS9r7h/8mxS
07gRg+dF7xnmV5eL5gYFFOmBKRiCeJHJCqefg3S7SXN8P7B40AlaVC1aQx2L
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
X9qJ3KtRAQA=

-->

</rfc>

