<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determinated to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server implementing DSO MUST NOT return DSONOTIMP
for a DSO Keepalive request message because the Keepalive TLV is mandatory to implement,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client MUST assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay request message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message at the same time using the same MESSAGE ID.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table is provided as a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
6/OT9+10KUo3jPbf7hkvG+c9m2rFP3LDwbsbGiXeSvbBPxQlqQfPcujihFMQ
u9zKfg0evcyl9oIny7NFboqDI3Xp4DfjSbRkav3m85S1oQh3Zqr7LqzpNOhu
aGjOFY5lwriZNvRSxZfEen/avIk5O5H0scOgrLjKqpt9ljfWT+W0M3Xr5Wko
Wof7S28zbf0xeQwuNk4hcmaiZN9537EtJqnyZ9nSFwqegA21f8iD54PkeMMz
XIZi+ZHM2ZHQg6ylzlf5Mq2o9RObGfilXa8VP+rXTx48obISwdWXegXTXHoh
yeRfphhv5ks2sWu/4pheId5aFEWoWBVbrymkJl3RtZljSCVCB0mP57DvQVLs
OLNRazXKqidCYXq0hdqiKBok7csb1rOKzt5SszfpZTroUvPzymWu9K61PqdE
olMy9OEelwgxObU/DQTz4ECjYuJmwuEowSWU7McOjoOoeW9TjrXE0BiL6Q63
TtIzM2RytxSwnqKo/58ngeGfs5OLs79LtvuOfKvfOeXKvBWzbY5NXvQfk0fD
3Sp9gwGWRTpr23MlTnylm2k6M5BliB+084F9kdnEnWm3KnFuKSFadDNDxowH
FDAFF+Zx3fBHz/RjmvWuXHvHbPSWvBWhq5GJ47oe+tflEDJ7aYnJDnjgJ+Jw
1PZZepkd+aLqptrM4gTkIKKjkDu6AEKetyl6E9W0lbwc2ohr/nRUwm57+adc
CEptGUJsNXo5YvDmquQK266u09X73bDiHx0bWZtc/5lrL0mWEVegDWIfPlam
ZBfC202eTKgFznG+LGicOrnalqJWINCx5Am7VGCDikkCD35anWnyyXWm9z+5
9jj5tNrj+z1lt3eqNSaS8Q014jrdPJrfPlyCrLraHUqQ+1wEdFCfVSjtQpHU
Px7K31Qo7fYXcVs61IF6JqFJkDeUsZnNmh4gdWvXM0plk6GHnWWdJ14Eoqd2
PCBCpqjh5eSCMu0zpB53L2JCd+Q6s2Xb/JKeAhZM+OLGjBrD6XnIl4NRr7hC
Iawzn67hwwg61SnqD0StKjnBynTD4YQH9lhaUB31uDJ9CeDE+oCiIL4GKoTN
ocd5jVPzkHvzAfRvSPofbO2bO1XCUQisLYRI3xoSKn8i/4uJMit8JjSuDBVY
H7fAUa9YHwc3DfjMnL/joWfsLkyWRVDwacjmUEzahOIHE5pMTWpo6c2JmX89
+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
R3xQNVhQXcjedP8vAyaQu6pmAQA=

-->

</rfc>

