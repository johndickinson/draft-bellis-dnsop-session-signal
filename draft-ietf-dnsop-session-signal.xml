<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways.</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client.
This is to place the burden of TCP’s TIME-WAIT state on the client
rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that has not yet been deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and terminate the connection.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>
and Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and its MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual operations selectively (see <xref target="cancellation"/>)
there are also occasions where a server may need to terminate
one or more entire sessions wholesale.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<section anchor="error" title="Server-Initiated Session Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-session-termination-on-overload" title="Server-Initiated Session Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifiying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request Message">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection
by forcibly aborting it.
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as an Response Additional TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="retry-delay-tlv-used-as-an-response-additional-tlv" title="Retry Delay TLV used as an Response Additional TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="retry-delay-tlv-is-used-by-server-only" title="Retry Delay TLV is used by server only">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST forcibly abort the connection immediately.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>The Keepalive TLV is only used as a Response TLV in response messages
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are the reverse: requests from server to client,
and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIALOKZVoAA+V9+3obR5bf//UUHeoPk1oAJiVbtjVfvgwtUjZ3dBuSmtnZ
bJKvATTItoBubHeDFEbSu+RZ8mQ516pTfQEp2TM72XijjAQ0quty6lx/55zx
eOyavFlmT5OTVxfJRZM22WKzTF6vsypt8rKo3bycFekKHphX6aIZ51mzGM+L
ulyP66yu4ZFxnV8V6XJ8+K2bw8+fJo8Oj74bHx2NHx+6fF09TZpqUzePDg9/
OHzk0ipLnyZnRZNVRda42yt68es3yZ/L6l1eXCU/VeVm7d7dhofGJ/hiN0ub
p0ndzN1mja+pnybnz58l33335MmI/nZ0+Phb52blHEZ5mmxglt+7df7UJck4
acoZ/W+9XVXZoua/l1VD/3DpprkuK3oS/iRJXuDgk+THbLnMa/qId+A83doP
y+oqzDK52NZNtqqTZ7BpMHS+WY3gy9mEHk2n0yq7gacvntG/a3h1Buv54dvD
5Nl1WsEYsPn4GX09y5stvC6b35blPHkG/+KPyznM4tlx8sM3h08ey0eboqng
4bcXx/TB+ros4KF/OkqewNjfPHqcHMHW01fZKs2XT5Mq3f4+r2cTmH685IsJ
zCWrr/MqM4u+aDYwv/gbWvnxer3MwhJ1SUfw0SIv8iZLXpTl2qzn2QaoqsmL
srWYbw+PvrlrMd8cfp/88N03yeNHh9/ZxcxkWr9PcTaTWbmK1/TPk+QknwFl
1WVhFvXP5XXR+oLWdAGzm2+KcKqX2ey6KJflVZ7V0UnKk3bp9Pdx8jK9Sufp
MiuSZxksJ5OPX79flNU8uZjlWTHLkjdp9c7sDX9rNub1v3yTfPPTcWtfcFvn
yR+AxOe0Ur8Pv6Tz39c8pe4mXPRvwkVapf+pNqGGBQ3vwvEEZlXAYs0WHONl
Lgv7BW8BTL2GycwyO37KT09W9PTvr/DT7nsuJ8mbTQ0sqsrNmy7LVfwxvedt
kS4W+TKHj+fRLdrbs4wAZpNfXZuNefUsefTdk8Pv77o2Pxz9kHz/5Lvk6PHj
iAesZSa/n6bF1S+0BpcXsOAVcP2bDE/xVXq1zE6O+UCbtLrCaV03zfrp11/f
3t5OauILev+Qm3y9TuGC118X+Mt5tky32TydvfuaR2Apc/nsTfImq+hNSAHr
qpwukW3O0k0NpzrdwibCzNIZSp9kmjW3GRARTearGs7rqqzy5nqVpMU8OeF3
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
0TRLQYIDA2wIwM2dy/mc0sIMMdC6fFMwT+J+RphzQT0B4k2MmsALTJZ1HdGT
QrlyE5ZJu6bDlxOUjQk4S1j9oQG+6DhFPmnMPVclb4n1Tjc1WhsuDiO1UCy0
PVxpjTmJL54vqWcdblXzMpEyh3v4DTEYD1uQs1anFi1bHHKRLVfX5YxZp/dB
V5vCNkz1G/I7jjJp+T+V9YMHe4/zdA81zUetnE7jZM9e2MLLODdUOvu6/l0y
bSrtWXCNS18gj9hCgeWcfNLuwNuxCEg2D0vu7X/aUl9oBl282TDcTN2Ln7El
mm4t2+J8w+M7tqVFo9doQ8pQhPryRnOr+Z8VXdzh1hSUsou/o/PPF9OAzjKE
CUM/mjtJIWiAdnomRBn6GLj9votsfwaPXjGpU6DTW2amamakNhz86n0STyh1
PPE4ey2pzekQdR8RmxZEDsuF0oZwoXZtaaFuz5xzEe6oDfG5FWHyqLalQoba
L09DQVcQwPQ20+4aAW3/vkmxF5ozdkbfed+z+5AggJa+qNPpyasLBEZhxlZg
qq/XnE464LSK2PEOzAtqnTUnYzhOt1NjYtdrNYPv+0ffU8mSJM57W6e5FEmU
VCmmGG89SRqOa7/imF4hdqjgodHtpkI0NamzzjAJZg6mEvqkLwLb9yApOAyI
0nogZZX0oJtClxJOY2yzcE3C4QqKadFZW2rWJi2j+mpGyzu1PM/OYb4cJNVN
0hC01Jr/JVipgccCAT3i5AxNf5VAoYvDi4QdHQrRNT7KKFXwkHXdWiF5iQl6
lG+3TLewMdSZNfMzc1ru6vLFxT2jIHYtBAmUGQmMOHVYqJcmIq1MFpgTblU4
hC4FT6c4jZJjftWL01c/Xf6M3OAQSA3V7JwcE1Fvgm+SEhQv9m7Kpif7kZdu
VW6KBiG7u8Iyvf8d9f0JwxzKR4/gz2P48w38+Rb+PIE/38Gf7+HPD0PPhYDD
ePyr/uhAX3/28uL/vt410J+Oz8+Of3xxmrx6+/LH0/Pk9fPk9bPL08uLzx3o
i2b06/cIU6rjPGrLmZWOWzz58eGnT6T1vTk+OTl79ZNSWsg9FgTH4fvDw0mS
vG5MlyGBm+BNHrk4PbiICp412lEk1TYBiQ82rylg74Lto7C4zfQXqhNAfU/W
lVYfZLEd7vTEtaaO7iMfflFUNGOzg1fDF71RI2OCB7GLkUmEVwp/cjhcexcY
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
9IhB7JOrxP1fSICFXNRIAQA=

-->

</rfc>

