<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more Response TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t><vspace blankLines='999' /></t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more Response TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>It is anticipated that most DSO request messages will be acknowledged
request messages, specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero,
or any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.<vspace />
This is not great, because it results<vspace />
in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there may be NAT gateways or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive TLV dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour upon Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="retry" title="Retry Delay Request">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and reconnect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three Base TLVs for DNS Stateful Operations,
Retry Delay, Keepalive, and Encryption Padding.</t>

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a
Primary TLV (unacknowledged) in a server-to-client message,
or as a response TLV in a server-to-client response to a client-to-server request message.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary" title="Summary">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of eight different contexts.</t>

<t>The first four contexts are requests from client to server,
and the corresponding response from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>C-R - Response TLV, included in response message sent to back the client
in response to a client “C-P” request
(a request with nonzero MESSAGE ID indicating that a response is required).</t>
</list></t>

<t>The second four contexts are the reverse: requests from server to client,
and the corresponding response from client back to server.</t>

<figure><artwork><![CDATA[
              ++-----+-----+-----+-----++-----+-----+-----+-----++
              || C-P | C-U | C-A | C-R || S-P | S-U | S-A | S-R ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | RetryDelay ||     |     |     |  X  ||     |  X  |     |     ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | KeepAlive  ||  X  |     |     |  X  ||     |  X  |     |     ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
 | Padding    ||     |     |  X  |  X  ||     |     |  X  |  X  ||
 +------------++-----+-----+-----+-----++-----+-----+-----+-----++
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is directed to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is directed to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is directed to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

<t>Registration of new DSO Type Codes in
the “Reserved for future expansion” range FC00-FFFF
and “Unassigned, reserved for DSO session-management TLVs” range 0003-003F
requires publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consulation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
NKecH17efvZaQZOTGK+FuixagiA9ckKnWkCm7zIGt+E6lcoq6Qz9+66XgcmI
HpxVsmtWejX/kErPW3/b+nJY1nHC3ZqEGTVmw8eby+vfa5yRMy6BUQDy8GXU
7ck26fjlEfHz/gsOR3M2Uvvb/RNpVIvtbhClLF3b2E9tuzrubwpbaP0gSoxs
ynFceZMLJUStMHxP5s5vejF18LV3pLUa5dJK+jpM+8JxPStl3zvXUqmfOLer
RfpRz/897Pm/R8kjP84hPfMo+Tr5JnmcfJt8l3z/KZ+Fpuy/8P92N64/P708
/5uY+PuPHmLPq/qg98kPv96MnHkrdkBPjfU4MhpsigU6Hj383D7t+Ahos1Kx
yyICndwobHa07SquzkQWH57bGFjCX7QtNe+jFma0+qqvZXPkk3TEUH2DNzWe
iah/OekR5Hsb6lg+YtEVkK/W3+c6RxpOcl6HUxy1qhX9elOr51rA7eTLBTm7
mcVWYC8Wios6BhiAiWeQEsWoIGNBhrRstVqjwPjEVHdJuWY9QQMCFDF6Oa6J
mv2F6nh2O7tlFGKncTeMLiFmxkhx2CrXhJyoURpbQLqKvjitAaUQfOPlq9Pz
81fnSeg5DxIR7Ff0ySJSAkESkwQe1BhZYrvTp21PnwmWCgxCg6CggF/Dxclh
MxhP3XzDw93llVSnJCo0UoqOIndWHRZ3nbb9Ax08FFZnvU9+pUiw2LPcMo3S
fp1d4f0CKJ9m8YzJHa9GWDx1UgbUTKBxXTSwdzy31XwN6frFIBpLWIb9sNqT
cV7ONhQeUTEWsiJ9Mx1mqZuQxNbj6gdVTXIYNPTY81BtdX6a7yJ6Eb/C2JBa
vy9COlBGCle76+CT2P6xE+ZWQiabKy96p0aNc9QD0lbNnFfN+pclMeOtffNg
PI6DZbE60haZvycls90ujfygja83lWuH8VAzte9uaPUcbwvzc6PguG5uu9dx
DMaGcbf4Y+1daNYdJV+i95aMozauRCV9o42ltEBV5KvvIJA4C7V9DzpjAHqn
VXQXcqeaifbT7BXjQ6Nb85JErVPpzieFV8BhHnv7yjUyLP/NTsBdxm5gU3ix
vYFt8pG2qTWVbHWQ3iu4jL6M43mDgV/b7Ng2gm/P5a4+bXfGgn/VJm1xyoCp
ayBGRPx9MCGODlTc11Tl1l8LT+SmYv+wSQmUHkxdkFMiBdxD8AgfMCIU/9nu
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
GRV3CLnN0iS9FqZe5BUW6MOS6voNjRPyn/qKrhm3R1nJAeeKZ7a2ulg303T2
NqQmUu7b0/HrZGyzD0dO0xwtQ/mwx8AkpNVSh/m7RalyH35tSbFuvgbO7k08
u06G8y+Y7qfPNZKY/fM9hvnGsMCRNyXQnEEVyAblouJx7YnykOcwpLWPRpFq
0p4G41fRGUSbHWLD9lkT2U72gAX2fH7VfhDP993TWFwr8FFltS8z1eZrvpEw
my570mLyThLtvZhc1qNM7nN/u6Lld78zwiL6/4e/6Bnmwwc6Ph+ITT/Q5n+g
/YIvLuiLC/rigr64oC9cV6R9/mw+cIoSZyh9+GBEqf///5qYL/7a+vrXnk1w
6NBL26/7B89GFd0k6dDmr93ZdL749WYj/gxMiF2tsKaH6DmSNUPBdLgfJA+U
7hmvujvx1MldpXqrqfrMJypAQdAXKT4MuoKMV+csOA0lXMtntPs5aaXSlX07
CAbTFFAcg62w/wfbY1/amKIWl5Ek0c/ugjT6DVpkt7eaQxpcLzHjVAnjeH3w
gMuwP3jQ9SezPOYIFiImspSz0rcmMJ0WtmkP9+KT+rWTVgJjaBB6ed3btZlM
y51MONLajeooM53bRoeHhxHZk/1Q9eHgP2QH79fIyh2b/fDh2v1QWKuzMQcW
n/DHGJ8QTOKz45fHWMCOwk1aDgd2BDWoV68pyfkcOJ6sKh9woB+hzU8t61SJ
wX6H9DKpGYg+AznSB8ljmzT6v/4nD+00ZPzyQj/6X/9TXred+Hmc/3rTODqy
8wAd7uzFa9/FaZ5FEzrvzEdlJzmd0U3xFH6jE9sOT0rSKnHko8fEuf0jCOcy
cmiZ7F9n71IE1a3S5YG631JKIbst2FQBvf0DDwT2JoJyPlAOx6YmfYCMCzDB
P7gPfGnF/2P+gn+HkQ7xeMSaBI6HRevm+Pmzp+PLH04SefQouuZ3PfkQPgpu
J72Md/3i0Rj+PIPP3xRpzaecnGwoo9mbBv8hFUX4jrkdO3mg6Nb8gP9HY319
OH727bN4LP/1s+8O4esf6OtzOzyWmQRbA5ln+dWynMF+YNzK/+4p/u5Z93dy
c8PP04J8l/wLF+14rd6sve5r9rDiK5xtPzMnXiFNNjo1P6Fcenjra+lliv8U
RmGX4jcPHz7++JFktB1mAVbsktNZ5tgpuFwT5STruSZImwkLycc+KOer/+WI
sn5Z+iIEiFSVgpEI9aICU74cYN4o/JK7vDaKJPPRymAQ73NSEV7lcHhBCB9g
/g3DUCrxBXFxRJwmHTo6/Tc5qDwS8MGtppq66oqix0wiqoqKFdcGtr9AqyQA
vtFcY2ANpy9VWK+OgFl0r2njozOfMBS3RPI5CkSBVfpWCk9iMl8vB5hiwUW9
0WJ2RYlwvsUyx+br5Wy2qXRDOMLesD5Zz2BSVCmUal9YuYmfok7YYUbai72d
jOz5UjmfmGpv8HzuOJw6lD/n2pK6lsbIfrKgOZydXj7zgqJOjqVIm7qbLZvT
agMstqKVo68+GOHd1avMNysJ8xPZ4aR8qpSyqeaMpCB+4qg0NWaWoL2Cllwl
cv3LOjnJyAmLFwKd33jinE+cMtphonX8FT3boknkbmd1tTO601sO1rvU6jHz
1rWj00Om/bf/+uABiN8HD/7tvxl/OWjliO7uKAhnMotVhopIXq8EGKjihSgQ
ats+vwiIF1NUn6hqIj5eHpgSgpxduRVBBEOOccgxDGmGsXX8NWvX4/yx3qEB
h+Av6wCfiVADdIFTsIHjuXJs97oRkz0yq3zYKtTuopqiDeGhi4wCAcCx3kfF
sgVekxZvkWAOTKzkKV7nI3eeLtdANBCPIH7/BVvElghdS6uRe5EWP2+wtnDx
FhZznpasdF/CS59nK6mMCzPNq+Q6W65RTKExWOXTjSkFarhGtxiuffKRuP8N
JG71iXc2AQA=

-->

</rfc>

