<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-05" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="November" day="30"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding,
and defines a framework for new stateful operations
not supported by the existing EDNS(0) mechanism.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>It should be noted that the format for DSO messages
(see <xref target="format"/>) differs from the traditional DNS message
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to the use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in anyway 
with normal DNS operations or with existing EDNS(0) based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middle-box behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each Stateful operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that
acknowledge persistent DNS state via the exchange of DSO messages
over the connection. This is distinct from, for example a DNS-over-TCP session
as described in RC7766.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve as modifiers affecting the primary operation.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages the qualifiers
“Primary” and “Additional” do not apply.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="keepalive"/> and <xref target="inactivetimer"/>)</t>
  <t>a keepalive timer (see <xref target="keepalive"/> and <xref target="keepalivetimer"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called the inactivity timeout and 
the keepalive interval respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Reseting a timer means resetting the timer value to zero and starting the timer 
again. Clearing a timer means resetting the timer value to zero but NOT starting 
the time again.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub to recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option
<xref target="RFC7828"/>. The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middle boxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Many, but not all, DSO request messages sent by an initiator
elicit a response from the responder.
Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (see <xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (see <xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but this could happen in the future, if a client attempts to
establish a DSO Session using a future response-requiring DSO TLV
which the server does not understand.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a sucessful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and connection close, not as prescribed in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<section anchor="middle-box-considerations" title="Middle-box Considerations">

<t>Where an application-layer middle box (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path the middle box MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middle box such
as a NAT that rewrites IP-layer and/or transport-layer headers, but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middle box
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.  The
DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middle box MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middle box may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future document specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup state that it has not yet deleted.
For example, state could be a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>
or a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>In a response message the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (see <xref target="delay"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document describing a DSO makes use of either NXDOMAIN (Name Error)
or NOTAUTH then that document MUST explain the meaning.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-octet DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may contain one or more TLVs.
In the context of DSO response messages,
the qualifiers “Primary” and “Additional” do not apply.
A DSO response message is specified to carry TLVs
appropriate to the information being communicated.
A DSO response message may contain the same TLV type as the Primary TLV from
the corresponding DSO request message, but it is not required to do so.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>Most DSO request messages are acknowledged request messages,
specified to generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to use unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for the software to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSNOTIMP error MUST NOT be returned; instead the receiver
MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases where
the sender already knows that the receiver supports and wishes to
receive these messages.
For example, after a client has subscribed for Push Notifications,
the subsequent event notifications are then sent as unacknowledged
request messages, and this is appropriate because the client initiated
the message stream by virtue of its Push Notification subscription,
thereby indicating its support of Push Notifications, and its
desire to receive event notifications <xref target="I-D.ietf-dnssd-push"/>.
After an mDNS Relay client has subscribed to receive inbound mDNS
traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged request messages, and
this is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, or in responses,
use the same encoding syntax.</t>

<t>The specification for a TLV determines whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the type of the current DSO TLV per the IANA DSO Type Codes Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer in network (big endian) byte order
giving the size in octets of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY be compressed 
using standard DNS name compression. However, the compression MUST NOT point
outside of the TYPE-DEPENDENT DATA section and offsets MUST be from the start
of the TYPE-DEPENDENT DATA.</t>

</section>
<section anchor="primary-tlv" title="Primary TLV">

<t>The Primary (first) TLV in a DSO request message indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

</section>
<section anchor="additional-tlvs" title="Additional TLVs">

<t>An “Additional TLV” specifies additional parameters
relating to the operation. Immediately following the Primary TLV
a DSO request message MAY contain one or more Additional TLVs.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request
using that TLV as the Primary TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
the receiver MUST silently ignore the message. A response MUST NOT be sent.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since DSO data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a DSO Session (because it duplicates
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the DSO in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular DSO Session while the initiator is waiting for a response to a 
previous request using that MESSAGE ID on that DSO Session,
unless specified otherwise by the relevant 
specification for the DSO in question.
(For a long-lived state the MESSAGE ID for the operation
MUST NOT be reused whilst that state remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet gives a
potentially significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ack and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged.
Nagle’s Algorithm exists to combine multiple small
application writes into more efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disabling Nagle’s Algorithm at the sender.
This is not great, because it results in less efficient use of the network.</t>
  <t>Disabling Delayed ACK at the receiver.
This is not great, because it results in less efficient use of the network.</t>
  <t>Using a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ack, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ack and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A DSO Session begin as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session: the inactivity timeout, and 
the keepalive interval.</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower, the 
same, or higher than the keepalive interval, though in most cases the inactivity 
timeout is expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic state does the 
keepalive interval come into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.
For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactivetimer" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer, not the inactivity 
timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity 
timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations, an operation is considered in progress
for as long as the state is active, until it is cancelled.
This means that a DSO Session can exist, with a state 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active state that is awaiting events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>A client is NOT required to wait until the inactivity timeout expires
before closing a DSO Session.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive DSO Session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST gracefully close the connection with a
TLS close_notify followed by a TCP FIN (or equivalent for other protocols).</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the DSO Session.
For DSO Sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state,
instead of closing the connection gracefully the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or active state,
but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the DSO Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in larger memory burden to maintain state for
inactive DSO Sessions, but lower traffic and CPU load on the server.</t>

<t>A server may dictate (in a server-initiated Keepalive message,
or in a response to a client-initiated Keepalive request message)
any value it chooses for the inactivity timeout.
When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED
to keep an idle connection open until the inactivity timeout is
reached — a client SHOULD begin closing the connection sooner
if it has no reason to expect future operations with that server
before the inactivity timeout is reached.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.
An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (see <xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
leaving long-lived state uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY end the DSO Session,
or may allow the DSO Session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the DSO Session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then end the DSO Session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (see <xref target="delay"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>A server MUST NOT close a DSO Session with a client,
except in certain exceptional circumstances, as outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some exceptional situations where a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server is undergoing reconfiguration or maintenance procedures
that require clients to be disconnected.</t>
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The client fails to meets its obligation to generate keepalive
traffic or close an inactive session by the prescribed times
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that is
indicative of a seriously defective client implementation (see <xref target="error"/>).</t>
  <t>The server is over capacity and needs to shed some load (see <xref target="retry"/>).</t>
</list></t>

<t>When a server has to close a DSO Session with a client
(because of exceptional circumstances such as those outlined above)
the server SHOULD, whenever possible, send a Retry Delay request message
(see below) informing the client of the reason for the DSO Session
being closed, and allow the client five seconds to receive it
before the server resorts to forcibly aborting the connection.</t>

</section>
<section anchor="retry" title="Retry Delay TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behavior of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
DSO Session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection.
This is to place the burden of TCP’s TIME-WAIT state on the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all DSO Sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=0) can be used as a Primary TLV or as
a response TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds,
within which the client MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-a-primary-tlv" title="Use as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this DSO Session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>An reply is not desired for a Retry Delay operation and the
MESSAGE ID MUST be set to zero in the request.</t>

</section>
<section anchor="use-as-a-response-tlv" title="Use as a Response TLV">

<t>In the case of a client request that returns a nonzero RCODE value,
the server MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the client
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
<section anchor="use-by-client" title="Use by Client">

<t>A client MUST NOT send a Retry Delay TLV to a server,
either in a DSO request message, or in a DSO response message.
If a server receives a DSO message containing a Retry Delay TLV,
this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions: to reset the
keepalive timer for the DSO Session and to establish the values for the Session Timeouts.</t>

<t>The Keepalive TLV resets only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive TLVs are sent for the
sole purpose of keeping a DSO Session alive, because that DSO Session has current
or recent non-maintenance activity that warrants keeping the DSO Session alive.
If sending keepalive traffic itself were to reset the inactivity timer, then 
that would create a circular livelock where keepalive traffic would be sent 
indefinitely to keep a DSO Session alive, where the only activity on that DSO 
Session would be the keepalive traffic keeping the DSO Session alive so that further 
keepalive traffic can be sent.</t>

<t>Sending keepalive traffic is considered a maintenance activity
that is performed in service of other client activities.
Sending keepalive traffic itself is not considered a client activity.
For a DSO Session to be considered active, it must be carrying something more than just keepalive traffic.
This is why merely sending a Keepalive TLV does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
It resets a DSO Session’s keepalive timer, and at the same time requests what the
Session Timeout values should be from this point forward in the DSO Session.
If a server receives a Keepalive request message with a zero MESSAGE ID
then this is a fatal error and the server MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Once a DSO Session is in progress (see <xref target="details"/>) the Keepalive TLV also MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST
be sent as an unacknowledged request, with the MESSAGE ID set to zero.
It resets a DSO Session’s keepalive timer, and unilaterally informs the client of
the new Session Timeout values to use from this point forward in this DSO Session.
No client response to this unilateral declaration is required or allowed.
If a client receives a Keepalive request message with a nonzero MESSAGE ID
then this is a fatal error and the client MUST immediately terminate
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in
this document it is the only way for a client to initiate a DSO Session.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly terminate the
connection with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer in network (big endian) byte order in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly terminate
the connection with a TCP RST (or equivalent for other protocols).
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>In a client-initiated DSO Keepalive message,
the Session Timeouts contain the client’s requested values.
In a server response to a client-initiated message, the Session Timeouts contain 
the server’s chosen values, which the client MUST respect.
This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated DSO Keepalive message, the Session Timeouts
unilaterally inform the client of the new values from this point
forward in this DSO Session. The client MUST NOT generate a
response to the server-initiated DSO Keepalive message.</t>

<t>When a client is sending its second and subsequent Keepalive DSO 
requests to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a DSO Session, the server can adapt its responses to better fit 
the client’s needs.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received value 
is a little more subtle, though the meaning of the inactivity 
timeout is unchanged — it still indicates the maximum permissible time allowed 
without activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is not greater than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value exceeds the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to terminating it forcibly, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=2) can only be used as
an Additional or Response TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF OCTETS                   /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING octets SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING octets of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with a Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the DSO OPCODE.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the DSONOTIMP error code.</t>

</section>
<section anchor="dso-type-codes-registry" title="DSO Type Codes Registry">

<t>IANA are directed to create the 16-bit DSO Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional DSO Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC6763;
&I-D.ietf-dnssd-push;
&RFC0768;
&I-D.sctl-dnssd-mdns-relay;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIANINUFoAA+19W3vbRpbge/0KrPIQKUMykm9JPN9+24olJ5q2Lbckd0/P
y3wgCUqISYADgJLZjv/7nmvVKVwoOXH39u6OezSRSKAup06d+2U8Hrsmb5bZ
8+TkzWVy2aRNttgsk/N1VqVNXha1m5ezIl3BA/MqXTTjPGsW43lRl+txndU1
PDKu8+siXY4Pn7o5vP48eXR49N346Gj8+NDl6+p50lSbunl0ePjD4SOXVln6
PDkrmqwqssbdXdPE52+Tv5TV+7y4Tn6qys3avb8LD41PcGI3S5vnSd3M3WaN
09TPk4uXL5Lvvnv2bES/HR0+furcrJzDKM+TDazye7fOn7skGSdNOaP/1ttV
lS1q/r2sGvrDpZvmpqzoSfhJkrzAwSfJj9lymdf0EUPgIt3aD8vqOqwyudzW
TbaqkxcANBg636xG8OVsQo+m02mV3cLTly/o7xqmzmA/Pzw9TF7cpBWMAcDH
z+jrWd5sYbpsfleW8+QF/MUfl3NYxYvj5Icnh88ey0eboqng4XeXx/TB+qYs
4KF/OUqewdhPHj1OjgD09FW2SvPl86RKt3/I69kElh9v+XICa8nqm7zKzKYv
mw2sL/6Gdn68Xi+zsEXd0hF8tMiLvMmSV2W5Nvt5sQGsavKibG3m6eHRk/s2
8+Tw++SH754kjx8dfmc3M5Nl/SHF1Uxm5Sre079NkpN8BphVl4XZ1L+VN0Xr
C9rTJaxuvinCqV5ls5uiXJbXeVZHJylP2q3T7+PkdXqdztNlViQvMthOJh+f
f1iU1Ty5nOVZMcuSt2n13sCGvzWAOf/3J8mTn45bcEGwzpM/AorPaaceDr+k
8z/UvKQuEC77gXCZVun/U0CoYUPDUDiewKoK2KwBwTFe5rKwXzAIYOk1LGaW
2fFTfnqyoqf/cI2fdue5miRvNzWQqCo3M12Vq/hjmuddkS4W+TKHj+fRLdrb
s4QAVpNf3xjAvHmRPPru2eH3912bH45+SL5/9l1y9PhxRAPWspI/TNPi+hfa
g8sL2PAKqP5thqf4Jr1eZifHfKBNWl3jsm6aZv3822/v7u4mNdEFvX9ITb5d
p3DB628LfHOeLdNtNk9n77/lEZjLXL14m7zNKpoJMWBdldMlks1ZuqnhVKdb
ACKsLJ0h90mmWXOXARLRYr6u4byuyypvblZJWsyTE54jOX7xR0ZLT8h3k68B
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
e+40nb13/xsoWbkiBBwBAA==

-->

</rfc>

