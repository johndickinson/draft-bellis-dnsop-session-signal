<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>Two timers are defined in this document: an inactive timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Explicitly discuss how this updates RFC7766.</t>

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactive timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

<t>TODO: Discuss DNS transactions (query/responses) compared to DNS operations 
(e.g. DNS Push subscription) since DNS operations are not described in RFC7766. Perhaps we should add “DNS operations” to the terminology?</t>

<t>TODO: Reference that DNS Push defines additional Operational TLVs. Future 
specifications may define additional Modifier TLVs.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>There are discussions about using DNS over the QUIC transport protocol <xref target="I-D.ietf-quic-transport"/>.
Specifications for DNS over QUIC are still preliminary and it is not
yet known whether QUIC will provide a suitable transport for Session
Signaling.</t>

<t>Session Signaling messages relate only to the specific session in which
they are being carried.  Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to inactive timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both inactive timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  INACTIVE TIMEOUT (32 bits)                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVE TIMEOUT:'>
  the inactive timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactive session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the inactive timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactive timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the inactive timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactive timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactive timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactive timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactive timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactive timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the inactive timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactive timeout timer remains fixed at zero, and an inactive timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactive timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactive timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
inactive timeout, and this is not an error. This is why there are two separate 
timers: the inactive timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-inactive-timeout" title="The Inactive Timeout">

<t>The purpose of the inactive timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactive timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactive timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactive timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactive timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactive timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactive-timeout" title="Values for the Inactive Timeout">

<t>For the inactive timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactive timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer inactive timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactive timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactive timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactive timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactive timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC0768;
&I-D.ietf-quic-transport;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
xQAA

-->

</rfc>

