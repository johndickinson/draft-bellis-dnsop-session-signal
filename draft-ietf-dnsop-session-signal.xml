<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7788 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7788.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-12" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived.</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests in the usual DNS sense.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket in the usual DNS sense.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not induce a DNS response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried only in protocols and
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of DSO keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.   In the first
case, the client SHOULD mark the server as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate.</t>

<t>In the second case, the client SHOULD set a reasonable timeout, after
which time the server will be assumed not to support DSO.   At this
point the client MUST drop the connection to the server, since the
server’s behavior is out of spec, and hence its state is undefined.
The client MAY reconnect, but not use DSO, if appropriate.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because the Keepalive TLV can’t fail (that is, can’t return an RCODE
other than NOERROR), it is an ideal candidate for use in establishing
a DSO session.   Any other option that can only succeed MAY also be
used to establish a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described below in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>When a new TLV is defined, the specification MUST include whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context for both requests and responses.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks query MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a query it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the server does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When an unacknowledged DSO message type is received (MESSAGE ID field is zero), the receiver SHOULD already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver aborting the connection.
When an unacknowledged DSO
message of an unexpected type is received, the receiver should abort the connection.
Other internal errors processing the unacknowledged DSO message are
implementation dependent as to whether the connection should be aborted
according to the severity of the error.</t>

<t>When an acknowledged DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.
This prevents TCP’s delayed acknowledgement algorithm from forcing the
client into a slow lock-step.
The server MUST act on messages in the order they are transmitted, but
when responses to those messages become available out of order, the server
SHOULD NOT delay sending available responses to respond in order.
<xref target="RFC7788"/> section 3.3 specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open with no operations pending
(e.g., an outstanding DNS Push request)
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unacknowledged DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unacknowledged DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns-tcp-keepalive-edns0-option" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unacknowledged message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unacknowledged message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X                 |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an increasing impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&RFC2782;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&RFC7788;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
AkGDUwPdjgEA

-->

</rfc>

