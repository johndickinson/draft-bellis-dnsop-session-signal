<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-04" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="18"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>Two timers are defined in this document: an inactivity timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the inactivity timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>There are discussions about using DNS over the QUIC transport protocol <xref target="I-D.ietf-quic-transport"/>.
Specifications for DNS over QUIC are still preliminary and it is not
yet known whether QUIC will provide a suitable transport for Session
Signaling.</t>

<t>Session Signaling messages relate only to the specific “session” in which
they are being carried. A “session” is established over a connection when
either side of the connection sends the first session signaling operation
TLV and it is acknowledged by the other side. While this specification defines
and initial set of three TLVs, additional TLVs may be defined in
additional specifications. All three of the TLVs defined are mandatory to implement.</t>

<t>Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to inactivity timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  the inactivity timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an inactivity session.
If the client does not gracefully close an inactive session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the inactivity timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the inactivity timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the inactivity timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifetime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (SIGNALING-TYPE=2) can only be used as a Modifier TLV.
It is only applicable when the Session Signaling Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 octets of padding (the minimum amount).
The padding data values could be all zeros or could be random data as is
appropriate for the one or more TLVs preceding it.</t>

<t>If compression is used in the preceding TLVs, then non-zero
values for the padding octets are encouraged to thwart traffic pattern
analysis.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                    VARIABLE LENGTH OCTETS                     /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>The Encryption Padding TLV may be included in either a Session Signaling
request, response, or both. If a request is received with a Encryption
Padding TLV, then the response SHOULD also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs.</t>

</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the inactivity timeout, and the
keepalive interval.</t>

<t>The first timer value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The inactivity timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the inactivity timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-sessions" title="Inactive Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timeout timer remains fixed at zero, and an inactivity timeout cannot
occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timeout timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timeout timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error. This is why there are two separate 
timers: the inactivity timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “inactive”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-inactivity-timeout" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining inactive 
sessions. A server with abundant session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-inactive-sessions" title="Closing Inactive Sessions">

<t>A client is NOT required to wait until the inactivity timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an inactive session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the inactivity timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for inactive 
sessions.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep inactive sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer inactivity timeout with a shorter keepalive interval signals to the client
that it may speculatively keep inactive sessions open for a long time, but it
should be sending a lot of keepalive traffic on those inactive sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an inactivity timeout value less than ten seconds.
If a client receives an Keepalive message specifying an inactivity timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middle-boxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (it is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 497 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002</c>
      <c>Encryption Padding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0003 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC0768;
&I-D.ietf-quic-transport;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
SAIwcODtJJt+MP8XKkZOBy7MAAA=

-->

</rfc>

