<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7788 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7788.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-12" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived.</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests in the usual DNS sense.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket in the usual DNS sense.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not induce a DNS response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried only in protocols and
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of DSO keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.   In the first
case, the client SHOULD mark the server as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate.</t>

<t>In the second case, the client SHOULD set a reasonable timeout, after
which time the server will be assumed not to support DSO.   At this
point the client MUST drop the connection to the server, since the
server’s behavior is out of spec, and hence its state is undefined.
The client MAY reconnect, but not use DSO, if appropriate.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because the Keepalive TLV can’t fail (that is, can’t return an RCODE
other than NOERROR), it is an ideal candidate for use in establishing
a DSO session.   Any other option that can only succeed MAY also be
used to establish a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described below in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined in this document. New “Additional TLVs” may be defined in the future and those definitions will describe when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>When a new TLV is defined, the specification MUST include whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context for both requests and responses.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks query MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a query it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the server does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When an unacknowledged DSO message type is received (MESSAGE ID field is zero), the receiver SHOULD already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver aborting the connection.
If an unacknowledged DSO
message type is not expected, the receiver should abort the connection.
Other internal errors processing the unacknowledged DSO message are
implementation dependent as to whether the connection should be aborted
according to the severity of the error.</t>

<t>When an acknowledged DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response
is sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.
This prevents TCP’s delayed acknowledgement algorithm from forcing the
client into a slow lock-step.
The server MUST act on messages in the order they are transmitted, but
when responses to those messages become available out of order, the server
SHOULD NOT delay sending available responses to respond in order.
<xref target="RFC7788"/> section 3.3 specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open with no operations pending
(e.g., an outstanding DNS Push request)
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unacknowledged DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unacknowledged DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns-tcp-keepalive-edns0-option" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an increasing impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&RFC2782;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&RFC7788;
&RFC5382;
&RFC7857;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
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
qQIKZOySyh2K+t+DnSlV6iHZxONylJq5xUXn4QlhgiPTn1CotWX0t0LlEg1C
nWYUxKTXNyC9x6P0rdjl6gYd2p6UraueLHNQ8TlRDVtMlChYOt4PdQzNW/Za
GdWqaKDbabGGNaplNJmiyRJL2poMvRg81LYohQWnV1lkSNUzKJTuL4i+KISc
hs7FQqGqTHJaKG0SxUinvE3oPzRsq27d5UafwRIcTlpmDal/Ca28GcfVO91r
g96N120XtI+Hjt8/l/9gvwQysEZbjtoP7qihoRvmMTphexVHY9z7SPqEscfY
YqfpgnpRNB6fUxtT9qmapjzXiQ7CyQrmHuZ8qHe5qmg943SyafrvIxYe3Avs
ph3t1RMcBTwkDEfp5CDp790jQmaIhdaVMaFTseLjiDYbR2Xz2vl9OksO7/+f
D+6P70cutREjh73P13yIHn43+SaZp7v6qGVVh4HP9R798IW/ZfaY1T0RBM4M
WqcFldy2/MkLZzCfbd5DS45juDCfA+dMy/eZd2M1FD24hgdgo2tW/TiKUDPc
mgruXnQcdmOItwKLZRe7EFZwdwsrJK284TWf1oz0JQllkJ0XjYHKZqkATTig
3pNiK+ohRVkQ9TnFq71nb87eb/Jq9/l2Rc+ufY5doZkxJkeDUvq94SUJSG01
tGtcNFRtOtO06+Fw9shFhaD9x7OTrvD5eqWqk0OBgqqFcYGWKu98HVKoNH6T
Tqst+iBGnoLEOWI4avuoiFDAs0sgOpX6aqyyJyVvW3jvZ2R6oH+5kAAT8i1f
AnDLcKaZC52nDK52f4BYVpM2XqL9NnvvNh7st/f+zjwY1ynfxUaTR2+10nqU
8u5BDkr5EDWGlHJx+uFvyhWW53bC107j10mshg8Lbtj77SyL9HLVyOEAkBKO
0nENN9ca4Q+4xr3U/nhGMdcMZlXt1Ous/rihnB7vjsVcpFVWXDdL73U+7GIK
dq/OI4HaItNec1j3Jz44g7px3tvrNCBQ1eZGkVQgTMq1iKSB/vFG1sm83Zch
bl7ug7yaIiea7ayEC5ec/8jmNhrOrf6kPQP8nIde7fxk5TsesMJpc1WfPMVz
zMgpba/WxF6tI3K65usNe+2E71xfso9udGQtdmnexTs5BcUCbsRZZ5Fmbdx0
GuvhKe8Ac7YpYaHA+nS/RcCqnGvBhFFEA/qRVoymdrFKpk3aLEe0/36pfPZ6
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
WPxxtqFUbfEub3Gn28B1Kbt/xesbPzu9Og0AGB1isseN026AbC7Z899Jz//d
7/m/B8kDP84xPfMgeZh8nTxKvkm+Tb77lJ/pOP8y/o3/pwP92lnV+avTp1fn
P55f/TW5On959vrtVXL44D51yjzq0uDX32FGfzo7e3P64vzHM5jb1dnFj6cv
fqcZuS4tHrvHQwhrvmpBAveR/Rx6QRKKB9xh2Bp0W2BaBPcbya7JgRyagBxO
c0zRAcOpOALFsMkUJBE7eBa54BFE6PpXRi7qtLBRATlF2tpWXIs1UCk5cQOr
lZaxofCutNHpL2v2BZFIiys0vYbRqbgeQGGTKy4u+aJIhWZx3jGG0hIu+31i
IDK6fKe735Ni80+2+35efvvTaPN9LCwKf7k+HDnbwK4hh8oACaxvczi5qpcV
bGRunYqZ2x+Zc/u54VN3+TJXnYEy4rdr9jTD5weKosJyiKOcvsY9uZt2SD2e
QwjtmnLBsnKhmONTaEHzuYExdqYaEDcnThxsoX/1pjfVTgo2vF8yQN11bkj8
IcOGwg+OHCsWw1U3w0U3V8sI9zmodYhzLnVeA/Plrs1CP970cpU5U9iG8+hm
kIguxikgbZgbqn/lA+yEbAW6CIuxNeHCKqgLTFphdnLtv9cZVRA8L8URMLCV
3AJAjBUDqBSSkeWzf3CClGSfGZ5fXqtSSJikXl9G0F3WwKPh84yP6d5Z3mSV
dHVXlbK9tx5nw/fJ8bAqlLiCJgyOjGnpwmqdr7kbg/GI5TLU9iBvJE29p/wk
bK6wLjKl8zPriZ+FfvUt1pUFy6a6dqSRn6rFoaKRuu77ck1yOOF52XYfScqV
2UmBxMLqW0Z6giGqCh0/Dv2azdIHd0m6Ul/aIbRLQaGC7chWwRHl66n2FN8F
dKjhLdaupLUkUaZRECIett2lVGBt+F1FkjLw8j7HVzydCo4e0MgH42T92Zsy
TmsQ0ixu6Rf9mVG0q1tpINWKEUN8WXfEJxdcNMGPRheNqQ7xWae+4MbawF/W
iqBnszwjy4ucA4aUe7Ov966JwwUd3GxpUNDRD2H3vUVZlWveCM7oBUrfYHOu
vAvKMqDOivMwsP66nGeIZi+qAo7yw9M3WAjSlLNyZcWET/fWGKSGrxxWA3Ah
JJGdUeJpnJIv1K9PpHLn/smD+x8/+p4YNmIAWgKCxK9J/kmEh71M2GyTDuXN
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

-->

</rfc>

