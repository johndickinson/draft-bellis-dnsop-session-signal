<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 7766, RFC 1035">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three of the TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message)
or an initiator (when receiving a DSO response message).</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses “DSO request messages” and “DSO response messages”.
DSO request messages are further subdivided into two variants,
“acknowledged request messages”
(which generate a corresponding response message) and
“unacknowledged request messages”
(which do not generate any corresponding response message).</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t>There are a myriad of other potential use cases for DSO given the versatility 
and extensibility of this specification.</t>

<t><xref target="details"/> of this document describes the protocol details of DNS Stateful Operations
including definitions of three TLVs for session management and encryption padding.
<xref target="lifecycle"/> presents a detailed discussion of the DSO Session lifecycle
including an in-depth discussion of keepalive traffic and session termination.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
until a DSO Session has been mutually established, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate non-response-requiring
DSO request messages until after a DSO Session has been mutually established.</t>

<t>Whether or not a given DSO request message elicits a response is
determined by whether or not the first DSO TLV (<xref target="tlvsyntax"/>)
in the message (the Primary TLV) is one that is specified to generate a response.
Whether a Primary TLV will be specified to elicit a response will depend
on the intended use pattern for that particular TLV.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message of a kind that requires a response,
such as the DSO Keepalive TLV (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE is set to DSONOTIMP (tentatively 11) this indicates
that the server does support DSO, but does not support the particular
operation the client requested.
A server MUST NOT return DSONOTIMP for the DSO Keepalive TLV,
but in the future if a client attempts to establish a DSO Session
using a newly-defined response-requiring DSO TLV that the server
does not understand, that would result in a DSONOTIMP response.
If the server returns DSONOTIMP then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other response-requiring DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSONOTIMP
(tentatively 11), then the client should assume that the server does
not support DSO. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a response-requiring DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the TLVs defined in this base specification,
sending a DSO Keepalive TLV is the only response-requiring
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other DSO TLVs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>,
to mitigate the risk of unintentional server overload, DNS clients
MUST take care to minimize the number of concurrent TCP connections
made to any individual server.  It is RECOMMENDED that for any given
client/server interaction there SHOULD be no more than one connection
for regular queries, one for zone transfers, and one for each
protocol that is being used on top of TCP (for example, if the
resolver was using TLS).
However, it is noted that certain primary/secondary configurations
with many busy zones might need to use more than one TCP
connection for zone transfers for operational reasons
(for example, to support concurrent transfers of multiple zones).</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged request message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to setup a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a programming error and forcibly abort the connection immediately.</t>

<t>In a request message the DNS Header QR bit MUST be zero (QR=0).<vspace />
If the QR bit is not zero the message is not a request message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the acknowledged request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the receiver MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay request message (<xref target="retry"/>),
where the RCODE indicates the reason for termination).</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSONOTIMP</c>
      <c>DSO type code not supported</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO TLV makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be either a request message or a response message,
as indicated by the QR bit in the DNS message header.
DSO request messages are further subdivided into two variants,
acknowledged request messages
(which generate a corresponding response message)
and unacknowledged request messages
(which do not generate any corresponding response message).</t>

<t>A DSO request message MUST contain at least one TLV.
The first TLV in a DSO request message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
to which DSO request message this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that by default most DSO request messages will be specified
to be acknowledged request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged request messages.
Unacknowledged request messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged request messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in a request message,
that request message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged request message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged request messages, applies even in the case of errors.
When a DSO request message is received with the MESSAGE ID field
set to zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSONOTIMP error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged request messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged request messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a request message,
that request message is to be acknowledged.
If the request message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the type of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MAY<vspace />
be compressed using standard DNS name compression <xref target="RFC1035"/>.<vspace />
However, the compression offsets MUST be relative to
the start of the TYPE-DEPENDENT DATA and MUST NOT
extend beyond the end of the TYPE-DEPENDENT DATA.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send a response with matching MESSAGE ID,
and RCODE DSONOTIMP (tentatively 11).
The response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO request is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the receiver
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to
zero (0), and the responder MUST set it to one (1).
Every DSO request message (QR=0) with a nonzero MESSAGE ID field
MUST elicit a corresponding response (QR=1), which MUST have the same
MESSAGE ID in the DNS message header as in the corresponding request.
DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>A DSO request message (QR=0) with a zero MESSAGE ID field MUST NOT elicit a response.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="strong">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a DSO Session.</t>

<t>As described in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that is already in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a request message is unsuccessful for some reason, the responder
returns an error code to the initiator (for acknowledged request messages)
or aborts the connection (for unacknowledged request messages).</t>

<t>In the case of a server returning an error code to a client, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay request message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days)
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive request message dictating new Session Timeout values to the client.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Request Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay request message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay request message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay request message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay request message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay request message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay request message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If a particular server does not want a client to reconnect (the server is being
de-commissioned), it SHOULD set the retry delay to the maximum value (which is
approximately 49.7 days). If the server will only be out of service for a maintenance
period, it should use a value closer to the expected maintenance window and
not default to a very large delay value or clients may not attempt to reconnect
after it resumes service.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive request message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive request message MAY be initiated by a server.
When sent by a server, the Keepalive request message MUST be
sent as an unacknowledged request, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive request message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as a request message Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive request message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the TLVs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value  is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed  without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent in a DSO request message, from server to client, the 
Retry Delay TLV (0) is used as a Primary TLV. It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>A Retry Delay request is an unacknowledged request message;
the MESSAGE ID MUST be set to zero in the request
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay request message to a server.
If a server receives a Retry Delay request message, this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV (0) to the response,
indicating the time interval during which the initator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="message-id" title="MESSAGE ID">

<t>In DSO Request Messages the MESSAGE ID may be either
nonzero (signaling that the responder MUST generate a response)
or zero (signaling that the responder MUST NOT generate a response).</t>

<t>In DSO Response Messages the MESSAGE ID MUST NOT be zero
(since this would be a response to a request that had
indicated that a response is not allowed).</t>

<t>The table below illustrates the legal combinations:</t>

<figure><artwork><![CDATA[
                          +--------------------+-------------------+
                          | Nonzero MESSAGE ID |  Zero MESSAGE ID  |
   +----------------------+--------------------+-------------------+
   | DSO Request Message  |         X          |         X         |
   +----------------------+--------------------+-------------------+
   | DSO Response Message |         X          |                   |
   +----------------------+--------------------+-------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV,
sent in DSO Request message,
from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV (unacknowledged),
sent in DSO Request message,
from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivity-timeout" title="Inactivity Timeout">

<t>The Inactivity Timeout may have any 32-bit unsigned integer value.</t>

<t>The value zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it may keep an idle connection open as long as it wishes.</t>

<t>The Inactivity timer is reset by any message <spanx style="strong">except</spanx> the Keepalive TLV,
and remains cleared any time that an operation is outstanding.</t>

</section>
<section anchor="keepalive-interval" title="Keepalive Interval">

<t>The Keepalive Interval is a 32-bit unsigned integer value,
with a minimum value of 10,000 milliseconds (10 seconds).</t>

<t>The maximum possible value,
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days),
informs the client that it should generate no keepalive traffic.</t>

<t>Any message exchange (including the Keepalive TLV) resets the Keepalive timer.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the DSONOTIMP error code
in the DNS RCODE Registry.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC5226"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after consultation with the
registry’s Designated Expert <xref target="RFC5226"/> at that time.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC5226"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
Manju Shankar Rao,
and Ted Lemon
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC2136;
&RFC7830;
&RFC1034;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAH5qd1oAA+W9+3obR5Iv+H8+RS31h0kNAFMXy7b622+bliib07o1SbW7
Z8/u+QpAgag2UIWpKpBCS3qX8yznyTaumZF1ASnZ7dM7RzOakYFCVmZkZGRc
fhExHo9dkzer7Gny/PVFctGkTbbYrpI3m6xKm7wsajcvZ0W6hgfmVbpoxnnW
LMbzoi434zqra3hkXOdXRboaHz9xc/j50+Th8YPvxg/GD5+4fFM9TZpqWzcP
j4+/P37o0ipLnyZnRZNVRda4myt675u3yc9l9UteXCU/VuV24365CQ+Nn+N7
3SxtniZ1M3fbDb6lfpqcv3iWfPvtkycj+teD40ffODcr5zDK02QLk/zObfKn
LknGSVPO6P/Xu3WVLWr+d1k19B8u3TbLsqIn4W+S5AUOPkl+yFarvKaPmADn
6c5+WFZXYZbJxa5usnWdPAOawdD5dj2CL2cTejSdTqvsGp6+eEb/XcOrM1jP
998cJ8+WaQVjAO3xM/p6ljc7eF02vynLefIM/os/Lucwi2cnyfePj588ko+2
RVPBw+8uTuiDzbIs4KF/e5A8gbEfP3yUPADS01fZOs1XT5Mq3f0xr2cTmH68
5IsJzCWrl3mVmUVfNFuYX/wNrfxks1llYYm6pAfw0SIv8iZLXpblxqzn2RaY
qsmLsrWYb44fPL5tMY+Pv0u+//Zx8ujh8bd2MTOZ1h9TnM1kVq7jNf37JHme
z4Cz6rIwi/r3clm0vqA1XcDs5tsi7OplNlsW5aq8yrM62kl50i6d/j1OXqVX
6TxdZUXyLIPlZPLxm/eLsponF7M8K2ZZ8jatfjG04W8NYd789XHy+MeTFl2Q
rPPkT8Dic1qpp8Pf0/kfa55SlwgX/US4SKv0vxQRaljQMBVOJjCrAhZrSHCC
h7ks7BdMAph6DZOZZXb8lJ+erOnpP17hp933XE6St9saRFSVmzddluv4Y3rP
uyJdLPJVDh/Po1N0cGAFAcwmv1oawrx+ljz89snxd7cdm+8ffJ989+Tb5MGj
R5EM2MhM/jhNi6u/0xpcXsCC1yD0rzPcxdfp1Sp7fsIb2qTVFU5r2TSbp19/
fXNzM6lJLuj5Q2ny9SaFA15/XeAv59kq3WXzdPbL1zwCXzKXz94mb7OK3oQc
sKnK6QrF5izd1rCr0x0QEWaWzvDySaZZc5MBE9Fkvqphv67KKm+W6yQt5slz
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
oFyQO8b9f2WUa/JZVwEA

-->

</rfc>

