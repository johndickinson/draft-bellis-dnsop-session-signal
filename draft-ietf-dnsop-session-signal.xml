<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-08" category="std" updates="7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="May" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model” popularized in the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEMZ+1oAA+2963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02vUbXaFJGI
jMuOfd/fHo/HrsmbVfYoefLiMrls0iZbbFfJy01WpU1eFrWbl7MiXcMD8ypd
NOM8axbjeVGXm3Gd1TU8Mq7z6yJdjY8fujl8/VFy7/jk4fjr8cnXLt9Uj5Km
2tbNvePjb4/vubTK0kfJedFkVZE17uaa3vvyVfJTWb3Ji+vk+6rcbtybm/DQ
+Am+183S5lFSN3O33eBb6kfJyfH9r8O/vvnmwQPnZuUcRnmUbGGSD90mf+SS
ZJw05Yz+W+/WVbao+eeyaugfLt02y7KiJ+FvkuQFDHcxSb7LVqu8pl/xBlyk
O/vLsroOs0wud3WTrevkMewZDJ1v1yP4cDahR9PptMrewtOXj+nfNbw6g/V8
+/Vx8niZVjAG7D3+jj6e5c0OXpfNb8pynjyGf/GvyznM4vFp8u1Xxw/uy6+2
RVPBw68vT+kXm2VZwEP/cpIcPvj6+Cj56t798QlsPn2YrdN89Sip0t2f83o2
gQXEi76cwGyyeplXmVn2ZbOFGcaf0NpPN5tVFhapi3pZZPLRq7R6k/yU7syi
Hm+Bspq8KFsr+vr45KuPruir44dHybffPhifHJ9EK5rJ3P6c4nsns3IdL+zf
JsmTfAYEVpeFWdm/lcui9QEt7BLmN98W4XCvstmyKFfldZ7V0YHKk3b99PM4
eZ5ep/N0lRXJ4wwWlMmvX75blNU8uZzlWTHjHTK7w5+arXn5t6+Sr74/be1M
kTfZPPkLUPqcVur34ed0/ueap9TdhMv+TbhMq/S/1CbUsKDhXbiaJM+ydbQD
VzBO+B0t/jtgVIuybOg6b1dAsNcRjX8H3BG45rSsLCH/eJUcf33/+KSfkGV6
a+AgZfHnxfZ620OpML1X2xpYWpXbGZbr+Nc0yddFuljkqxx+PY9md3Bg2Qjs
f369NNN88Ti5980DYNcfu2/fnnx7lDx88M345P796L5tZC5/nqbF9c+0CpcX
cGxrEBpvMzz+F+n1KntyypTQpNU1TmzZNJtHX355c3MzqYmr6MVFXvTlJgXe
UH9Z4Dfn2SrdZfN09uZLHoGF1NXjV8mrrKI3IelsqnK6QrY7S7c1HON0B9sI
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
UI1PB2w/2AqDsupCs+ONObUb0z6O/wJ742M3tEmfvEWCV8pweR0WxH67GZqI
ID2pDYb6szabss6bLKRyPHK3ZljdePetGJZsszIsj03dtY2GZcWeT3rG+ZVY
IXEcutB00Yiofk0u8ZNL/OQSP7nETy7xE9edwm+Yz68moQrF5d/iGf7NzzT+
t1nD7z0fcnCxf6s/RQUn8QfORw2QpJUy8zf7055Pfrf5mNCGxR6dYcPOovZW
DqseeL1CnBK9eVJTyR97J06aoKtvpf0pJUpIN58RGTgKXEpilLq3bDs4dsyb
p2FiYZw62HVOEghlDmrJGPh6Zg2BNWGgQLxbpPQEO+n89MVp8ljyXxUpDfQw
FNEvX5Ev9SK7zkmb9/mP9KUgalU+YktBep00jEVLUhrYHyUPLCbZ//qfPLbT
TP0Xl/qr//U/5X27CU2CUKr3IrJN/IQvfsf5npzohDFHBfn0i3PxhM/Keagx
wJlftCaursbutw4PPNcHKkzOQ3+Pg6NWwoI4ryUzkeRHqIEb2Aoutfeyxj/P
cUg25GcdwbPpCp6eOEXY5is02x/jcnTFe7ZZwuI46MkDyjjrH0JUPHZzr5LD
ZfYuRSiAdbo6Un9USijSNwUbBKAD/8oD/Zq8wAjTr7QlYKcj8yMlfga/dL/y
xY//Y37An2GkY/hD3ySBNefRijkWHMNvnz4eX333JJEHTyJ+v+/Je21OPPzo
ffhVcNgou9z3ja/G8K2n8HtQpmtO4yP/FC9gQaYbXyJ2ro258ztRELGUX/F/
NNZXx+On3zyNx/IfP314DB9/Rx9f2OERCxWIB+/N6stViW0dMSDtv/cYv/e0
+z1ha/D1tCCvH3/DxaTBgbk6rMijajeGJ5PHai4DY83UTNGeLSOQNjM3MfUh
U6W7cRBNr3/LDhATGRROv/HefjvYuzj9nt8NbXEsfXZ9i6i04B6heuB1cipg
lepwY+fhw5N7D8jXdRFgKzC+DYtFd2VQnrvrVYZ7EE45LEtowHG+miYCVYKB
TLebM8LP8Ngx7+RtDm+IJyUNBBSuorXEuDqXWU1GLQeRXfC4TgUFTH+leTXz
FtuohG0gPfyP/373LtyKu3f/x/8+adGQV4QPuqTqz0Wp24kPWKOSZ+Yryeua
TL5X0pb3tc8NitZPJGGHWVRZtlJgE8Ry2tBB+nwGTMxYeORU/bVPxtc+o6jD
E8aBhhQRzCWdc/pKBQNjgjcCqmzkYdHFuWGxj8H7nI3g5Tjk+m90bcIpgT5x
hBkBXGXHPv1CmuLhNIkIiNro6CXAhgdIKOLukLM86DGDkaSSds1o6PYbSGwB
y06yQFCqUaV5hQ1nyClIkUxt1MbKk/F/C6SKR1KkHVinb5CDcqtT10sBBh69
qLeVqIVFSf2xgHDRSpoBr9ED4UisMJx6BpPCVzIaLXY5gkdxGm2F6lwo3/fY
k3pWpRISfYShi7L+6tllKFkyEBK0VyZs4o8V65ew2pg6otecD0T0BEOOccgx
DGmGsT0sAnSYGM9ZWiWmuge/qQmqWFpniz5I6pPHniOisvsH3bDDASkXPvYT
4v4znF5DiV1FtlIsnznxBO3nSTcaxBXzi03ZcAyVL1WIFzgJ40fjw7bMiAq4
STnMszKNJpr0DZX6ceZtOLJ2QwpqpITnhJNrtUunCftTxFog3DKsahEtnfai
vK7SzRKUL4wW+BY2mAyczzC24HB2DWYH7/B9HtP6Z8Y99M9FeQv9rmNeT6NH
w52ER1H7W0yVMS20GZXcZCmNqE8jd1yFfYPNHpeLsULiAQ9C257SGGqb8kyX
4DRMiW84UElavCFspcsm28A/suS7smp+WWc7dO1d5evkMap1I3eRrjZwEYBz
AWd8lQIX+KFcLEAEj9y/waT/UmIJbQrfOZsTEsyz7CaHJ0+xAAFLc+A9OQ6z
zRP8djlyT1Kwz5LLGVze9Jd85OCRn7fJJc4IjuYiLdkL+11WFXmW/FiuflHx
k1fJMlttkBWhRVXloFqrEReJMTWmQI8kp4f7fwDKUGNpwnIBAA==

-->

</rfc>

