<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-03" category="std" updates="RFC 7766">

  <front>
    <title>DNS Session Signaling</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="A." surname="Mankin" fullname="Allison Mankin">
      <organization>Salesforce</organization>
      <address>
        <email>allison.mankin@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <phone>+1 843 473 7394</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new Session Signaling OPCODE used to communicate 
persistent “per-session” operations, expressed using type-length-value (TLV) 
syntax, and defines an initial set of TLVs used to manage session timeouts and termination. This mechanism is intended to reduce the overhead of existing “per-packet” signaling mechanisms with “per-message” semantics as well as defining new signaling operations not defined in EDNS(0).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. Whilst EDNS(0) has been used to
signal at least one session related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling.</t>

<t>This document defines a new Session Signaling OPCODE used to carry persistent
“per-session” operations, expressed using type-length-value (TLV) syntax, and
defines an initial set of TLVs used to manage session timeouts and termination.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>With Session Signaling, in contrast, there is no compelling motivation
to pack multiple operations into a single message for efficiency reasons.
Each Session Signaling operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
separate DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
The RCODE in each response message indicates the success or failure of the operation in question.</t>

<t>It should be noted that the message format for Session Signaling
operations (see <xref target="format"/>) differs from the traditional DNS packet
format used for standard queries and responses.
The standard twelve-octet header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and the
corresponding sections are not present.
The actual data pertaining to Session Signaling operations is
appended to the end of the DNS message header.
When displayed using today’s packet analyser tools that have not been updated
to recognize the DNS Session Signaling format, this will result
in the Session Signaling data being displayed as unknown additional
data after the end of the DNS message. It is likely that future updates
to these tools will add the ability to recognize, decode, and display the
Session Signaling data.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels” <xref target="RFC2119"/>.</t>

<t>The term “connection” means a bidirectional byte stream of reliable,
in-order messages, such as provided by using
DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a Session Signaling request message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to either an initiator
(when sending a Session Signaling request message)
or a responder (when sending a Session Signaling response message).</t>

<t>Likewise, the term “receiver” may apply to either a responder
(when receiving a Session Signaling request message)
or an initiator (when receiving a Session Signaling response message).</t>

<t>Session Signaling operations are expressed using type-length-value (TLV) syntax.</t>

<t>“SSOP” is used to mean Session Signalling Operation.</t>

<t>A Session Signaling “Session” is established between two endpoints that acknowledge persistent DNS state via the exchange of Session Signalling messages over the connection. This is distinct from, for example a DNS-over-TCP session as described in RC7766.</t>

<t>(QUESTION: RFC7766 includes a definition of ‘idle timeout’ which is updated by 
this document. I think we should include new definition of “Session Signalling idle timeout’?)</t>

<t>Two timers are defined in this document: an idle timeout and a keepalive interval. The term “Session Timers” is used to refer to this pair of values.</t>

</section>
<section anchor="discussion" title="Discussion">

<t>TODO: Explicitly discuss how this updates RFC7766.</t>

<t>TODO: Discuss that this draft introduces 2 session timers and their functions. 
Discuss that this draft introduces “Keepalive traffic” this is special because
it does not reset the idle timeout. Possibly move some of the text from 
“Session Lifestyle and Timers” here.</t>

<t>TODO: Discuss DNS transactions (query/responses) compared to DNS operations 
(e.g. DNS Push subscription) since DNS operations are not described in RFC7766 
and change the meaning of idle time defined there. Perhaps we should add “DNS
operations” to the terminology?</t>

<t>TODO: Reference that DNS Push defines additional Operational TLVs. Future 
specifications may define additional Modifier TLVs.</t>

</section>
<section anchor="details" title="Protocol Details">

<t>Session Signaling messages MUST only be carried in protocols and in
environments where a session may be established according to the definition above.
Standard DNS over TCP <xref target="RFC1035"/><xref target="RFC7766"/>, and DNS over TLS <xref target="RFC7858"/>
are suitable protocols.
DNS over plain UDP is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>(QUESTION: Given there are now two DNS-over-QUIC drafts should we include a
statement here about the applicability to QUIC?)</t>

<t>Session Signaling messages relate only to the specific session in which
they are being carried.  Where an application-layer middle box (e.g., a DNS 
proxy, forwarder, or session multiplexer) is in the path the middle box
MUST NOT blindly forward the message in either direction.  This does
not preclude the use of these messages in the presence of an IP-layer middle box
such as a NAT that rewrites IP-layer and/or transport-layer headers,
but otherwise preserves the effect of a single session.</t>

<t>TODO: State clearly what a proxy should do when in the path.</t>

<t>A client MAY attempt to initiate Session Signaling messages at any time
on a connection; receiving a NOTIMP response in reply indicates that the
server does not implement Session Signaling, and the client SHOULD NOT
issue further Session Signaling messages on that connection.</t>

<t>A server SHOULD NOT initiate Session Signaling messages until a
client-initiated Session Signaling message is received first,
unless in an environment where it is known in advance by other
means that the client supports Session Signaling.
This requirement is to ensure that the clients that do not support
Session Signaling do not receive unsolicited inbound Session Signaling
messages that they would not know how to handle.</t>

<t>On a session between a client and server that support Session Signaling,
once the client has sent at least one Session Signaling message (or it is
known in advance by other means that the client supports Session Signaling)
either end may unilaterally send Session Signaling messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>From this point on it is considered that a “Session Signalling session”” is in 
progress. Clients and servers should behave as described in this specification
with regard to idle timeouts and connection close, not as prescribed in <xref target="RFC7766"/>.</t>

<section anchor="format" title="Message Format">

<t>A Session Signaling message begins with
the standard twelve-octet DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the Session Signaling OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a Session Signaling message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                     Session Signaling Data                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="Header">

<t>In a request the MESSAGE ID field MUST be set to a unique value, that the
initiator is not currently using for any other active operation on this 
connection.
For the purposes here, a MESSAGE ID is in use in this session if the
initiator has used it in a request for which it has not yet received a
response, or if the client has used it for a subscription which it has
not yet cancelled <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>In a response the MESSAGE ID field MUST contain a copy of the value of the
MESSAGE ID field in the request being responded to.</t>

<t>In a request the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request.</t>

<t>In a response the DNS Header QR bit MUST be one (QR=1).
If the QR bit is not one the message is not a response.</t>

<t>The DNS Header OPCODE field holds the Session Signaling OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused, and in both requests and responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future document specifies otherwise.</t>

<t>In a request message (QR=0) the RCODE is generally set to zero on transmission,
and silently ignored on reception, except where specified otherwise
(for example, the Retry Delay operation, where the RCODE indicates the reason 
for termination).</t>

<t>The RCODE value in a response may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>Session Signaling not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>11</c>
      <c>SSOPNOTIMP</c>
      <c>Session Signaling operation type code not supported</c>
</texttable>

</section>
<section anchor="session-signaling-data" title="Session Signaling Data">

<t>The standard twelve-octet DNS message header is followed by the Session 
Signaling Data.</t>

<t>The first TLV in a Session Signaling request message is the Operation 
TLV. Any subsequent TLVs after this initial Operation TLV are Modifier TLVs.</t>

<t>Depending on the operation a Session Signaling response can contain:</t>

<t><list style="symbols">
  <t>No TLVs</t>
  <t>Only an Operation TLV</t>
  <t>An Operation TLV followed by one or more Modifier TLVs</t>
  <t>Only Modifier TLVs</t>
</list></t>

<section anchor="operation-tlvs" title="Operation TLVs">

<t>A “Session Signaling Operation TLV” specifies the operation to be performed.</t>

<t>A Session Signaling message MUST contain at most one Operation TLV.</t>

<t>In all cases a Session Signaling request message MUST contain exactly one 
Operation TLV, indicating the operation to be performed.</t>

<t>Depending on the operation, a Session Signaling response message MAY contain no 
Operation TLV, because it is simply a response to a previous request message,
and the message ID in the header is sufficient to identify the request in 
question. Or it may contain a single corresponding response Operation TLV, with 
the same SIGNALING-TYPE as in the request message. The specification for each Session 
Signaling operation type determines whether a response for that operation type 
is required to carry the Operation TLV.</t>

<t>If a Session Signaling response is received for an operation which requires
that the response carry an Operation TLV, and the required Operation TLV is not
the first Session Signaling TLV in the response message, then this is a fatal 
error and the recipient of the defective response message MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
<section anchor="modifier-tlvs" title="Modifier TLVs">

<t>A “Session Signaling Modifier TLV” specifies additional parameters
relating to the operation. Immediately following the Operation TLV, if present,
a Session Signaling message MAY contain one or more Modifier TLVs.</t>

</section>
<section anchor="unrecognised-tlvs" title="Unrecognised TLVs">

<t>If a Session Signaling request is received containing an unrecognized
Operation TLV, the receiver MUST send a response with matching
MESSAGE ID, and RCODE SSOPNOTIMP (tentatively 11). The response MUST NOT contain 
an Operation TLV.</t>

<t>If a Session Signaling message (request or response) is received
containing one or more unrecognized Modifier TLVs, the unrecognized
Modifier TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a Session Signaling message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options is desired
for Session Signaling messages, a Session Signaling Operation TLV or
Modifier TLV needs to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a Session Signaling message,
so if message padding is desired for Session Signaling messages,
a Session Signaling Modifier TLV needs to be defined to perform this function.</t>

<t>Similarly, a Session Signaling message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record
in the additional records section, and carries a signature computed over
the preceding message content. Since Session Signaling data appears
after the additional records section, it would not be included in the
signature calculation. 
If use of signatures with Session Signaling messages becomes necessary in the 
future, an explicit Session Signaling Modifier TLV needs to be defined to 
perform this function.</t>

<t>Note however that, while Session Signaling <spanx style="emph">messages</spanx> cannot include
EDNS(0) or TSIG records, a Session Signaling <spanx style="emph">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including Session 
Signaling messages, and other DNS message types like Query <xref target="RFC1034"/> 
<xref target="RFC1035"/> and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and 
TSIG records.</t>

<t>This specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="emph">any</spanx> messages sent on a Session Signaling session (because it duplicates
the functionality provided by the Session Signaling Keepalive operation),
but messages may contain other EDNS(0) options as appropriate.</t>

</section>
</section>
<section anchor="tlv-format" title="TLV Format">

<t>Operation and modifier TLVs both use the same encoding format.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                         SIGNALING-TYPE                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                      SIGNALING DATA LENGTH                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='SIGNALING-TYPE:'>
  A 16 bit field in network order giving the type of the current Session
Signaling TLV per the IANA DNS Session Signaling Type Codes Registry.</t>
  <t hangText='SIGNALING DATA LENGTH:'>
  A 16 bit field in network order giving the size in octets of
the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format.</t>
</list></t>

<t>Where domain names appear within TYPE-DEPENDENT DATA, they MUST NOT be compressed using standard DNS name compression.</t>

</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero
(0), and the responder MUST set it to one (1). Every Session Signaling request 
message (QR=0) MUST elicit a response (QR=1), 
which MUST have the same MESSAGE ID in the DNS message header as in the 
corresponding request. Session Signaling request messages sent by the client 
elicit a response from the server, and Session Signaling request messages sent 
the server elicit a response from the client.</t>

<t>With most TCP implementations, the TCP data acknowledgement (generated because 
data has been received by TCP), the TCP window update (generated because TCP has 
delivered that data to the receiving software) and the DNS Session Signaling 
response (generated by the receiving software itself)
are all combined into a single packet, so in practice the requirement that every
Session Signaling request message MUST elicit a 
Session Signaling response incurs minimal extra cost on the network.
Requiring that every request elicit a corresponding response also avoids
performance problems caused by interaction between
Nagle’s Algorithm and Delayed Ack <xref target="NagleDA"/>.</t>

<t>The namespaces of 16-bit MESSAGE IDs are disjoint in each direction.
For example, it is <spanx style="emph">not</spanx> an error for both client and server to send a request
message with the same ID. In effect, the 16-bit MESSAGE ID combined with the 
identity of the initiator (client or server) serves as a 17-bit unique 
identifier for a particular operation on a session.</t>

<t>As described in <xref target="header"/> An initiator MUST NOT reuse a MESSAGE ID that is 
already in use for an 
outstanding request, unless specified otherwise by the relevant specification 
for the Session Signaling operation in question. At the very least, this means 
that a MESSAGE ID MUST NOT be reused in a particular direction
on a particular session while the initiator is waiting for a response to a 
previous request on that session, unless specified otherwise by the relevant 
specification for the Session Signaling operation in question.
(For a long-lived operation, such as a DNS Push Notification
subscription <xref target="I-D.ietf-dnssd-push"/> the MESSAGE ID for the operation
MUST NOT be reused for a new subscription as long as the
existing subscription using that MESSAGE ID remains active.)</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID does not
match any of its outstanding operations, this is a fatal error and it MUST 
immediately terminate the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
</section>
<section anchor="keepalive" title="Keepalive Operation TLV">

<t>The Keepalive Operation TLV (SIGNALING-TYPE=1) performs two functions: to reset the
keepalive timer for the session and to establish the values for the Session Timers.</t>

<t>When sent by a client, it resets a session’s keepalive timer,
and at the same time requests what the Session Timer values should be from this point forward in the session.</t>

<t>Once a Session Signalling session is in progress (see <xref target="details"/>)
the Keepalive TLV also MAY be initiated by a server.
When sent by a server, it resets a session’s keepalive timer,
and unilaterally informs the client of the new Session Timer values to use from 
this point forward in this session.</t>

<t>It is not required that the Keepalive TLV be used in every session.
While many Session Signaling operations
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>)
will be used in conjunction with a long-lived session,
not all Session Signaling operations require a long-lived session,
and in some cases the default 15-second value for both idle timeout
and keepalive interval may be perfectly appropriate.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    IDLE TIMEOUT (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='IDLE TIMEOUT:'>
  the idle timeout for the current session, specified as a 32
bit word in network (big endian) order in units of milliseconds.
This is the timeout at which the client MUST close an idle session.
If the client does not gracefully close an idle session then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  the keepalive interval for the current session, specified as a 32-bit
word, in network (big endian) order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
If the client does not generate the necessary keepalive traffic then after
twice this interval the server will forcibly terminate the connection
with a TCP RST (or equivalent for other protocols).</t>
</list></t>

<t>In a client-initiated Session Signaling Keepalive message,
the idle timeout and keepalive interval contain the client’s requested values.
In a server response to a client-initiated message, the idle timeout and 
keepalive interval contain the server’s chosen values, which the client MUST 
respect. This is modeled after the DHCP protocol, where the client
requests a certain lease lifetime using DHCP option 51 <xref target="RFC2132"/>,
but the server is the ultimate authority
for deciding what lease lifetime is actually granted.</t>

<t>In a server-initiated Session Signaling Keepalive message, the idle timeout and 
keepalive interval unilaterally inform the client of the new values from this 
point forward in this session. The client MUST generate a response to the 
server-initiated Session Signaling Keepalive message.
The Message ID in the response message MUST match the ID from the 
server-initiated Session Signaling Keepalive message, and the response message 
MUST NOT contain any Operation TLV.</t>

<t>When a client is sending its second and subsequent Keepalive Session Signaling 
request to the server, the client SHOULD continue to request its preferred 
values each time. This allows flexibility, so that if conditions change during 
the lifefime of a session, the server can adapt its responses to better fit the
client’s needs.</t>

<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The idle timeout value in the Keepalive TLV (SIGNALING-TYPE=1) has similar intent to 
the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports Session Signaling MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a Session Signalling 
session has been established.
Once a Session Signalling session has been established, if either
client or server receives a DNS message over the session that contains an
EDNS(0) TCP Keepalive option, this is an error and the receiver of the
EDNS(0) TCP Keepalive option MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (SIGNALING-TYPE=0) can be used as an Operation TLV or as
a Modifier TLV.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  a time value, specified as a 32 bit word in network order in units of 
milliseconds, within which the client MUST NOT retry this operation, or retry 
connecting to this server.</t>
</list></t>

<t>The RECOMMENDED value is 10 seconds.</t>

<section anchor="use-as-an-operational-tlv" title="Use as an Operational TLV">

<t>When sent in a Session Signaling request message, from server to client, the 
Retry Delay TLV (0) is considered an Operation TLV. It is used by a server 
to request that a client close the session, and not to reconnect for the 
indicated time interval.</t>

<t>In this case it applies to the session as a whole, and the client MUST close the 
session, as described in section <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion.</t>
  <t>REFUSED indicates that the server has been reconfigured and is no longer able 
to perform one or more of the functions 
currently being performed on this session (for example, a DNS Push Notification 
server could be reconfigured such that is is no longer accepting DNS Push 
Notification requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these three RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these three values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

</section>
<section anchor="use-as-a-modifier-tlv" title="Use as a Modifier TLV">

<t>When appended to a Session Signaling response message for some client request,
the Retry Delay TLV (0) is considered a Modifier TLV.
The indicated time interval during which the client SHOULD NOT retry
applies only to the failed operation, not to the session as a whole.</t>

<t>In the case of a client request that returns a nonzero RCODE value, the server 
MAY append a Retry Delay TLV (0) to the response, indicating the time interval
during which the client SHOULD NOT attempt this operation again.</t>

</section>
</section>
<section anchor="lifecycle" title="Session Lifecycle and Timers">

<section anchor="session-initiation" title="Session Initiation">

<t>A session begins when a client makes a new connection to a server.</t>

<t>A Session Signalling session MAY begin as described in <xref target="details"/>…..</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are received, but
responses to those messages MAY be sent out of order, if appropriate.</t>

</section>
<section anchor="timers" title="Timers">

<t>Two timer values are associated with a session: the idle timeout, and the
keepalive interval.</t>

<t>The first timer value, the idle timeout, is the maximum time for which
a client may speculatively keep a session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timer value, the keepalive interval, is the maximum permitted
interval between client messages to the server if the client wishes to keep
the session alive.</t>

<t>The two timer values are independent. The idle timeout may be lower, the same,
or higher than the keepalive interval, though in most cases the idle timeout is 
expected to be shorter than the keepalive interval.</t>

<t>Only when the client has a very long-lived low-traffic operation outstanding 
like a Push Notification subscription, does the keepalive interval timer come
into play, to ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>On a new session, before any explicit Session Signaling
Keepalive message exchange, the default value for both timers is 15 seconds.
For both timers, lower values of the timer result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="idle-sessions" title="Idle Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or Session Signaling
messages, resets both timers for that session <xref target="RFC7766"/>, with the exception
that a Session Signaling Keepalive message resets only the keepalive interval 
timer, not the idle timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the idle timeout timer remains fixed at zero, and an idle timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the idle timeout timer is set to zero upon transmission of a 
request and remains at zero until reception of the corresponding response.
At the server, the idle timeout timer is set to zero upon reception of a request
and remains at zero until transmission of the corresponding response.</t>

<t>(QUESTION: I would much prefer to use the phrase “the idle timer is unset” or
something similar in place of “the idle timeout timer is set to zero” 
throughout. A timer of zero could be interpreted as a timer which closes the 
connection immediately, for example RFC7766 says “Servers MAY use zero timeouts 
when they are experiencing heavy load or are under attack.”)</t>

<t>For long-lived DNS operations like Push Notification subscriptions
<xref target="I-D.ietf-dnssd-push"/>, an operation is considered in progress for
as long as the subscription is active, until it is cancelled.
This means that a session can exist, with a Push Notification subscription 
active, with no messages flowing in either direction, for far longer than the 
idle timeout, and this is not an error. This is why there are two separate 
timers: the idle timeout, and the keepalive interval. Just because a session has 
no traffic for an extended period of time
does not automatically make that session “idle”, if it has an active
Push Notification subscription that is awaiting notification events.</t>

</section>
<section anchor="the-idle-timeout" title="The Idle Timeout">

<t>The purpose of the idle timeout is for the server to balance its trade off 
between the costs of setting up new sessions and the costs of maintaining idle 
sessions. A server with abundant session capacity can offer a high idle timeout, 
to permit clients to keep a speculative session open for a long time, to save 
the cost of establishing a new session for future communications with that 
server. A server with scarce memory resources can offer a low idle timeout,
to cause clients to promptly close sessions whenever they have no outstanding
operations with that server, and then create a new session later when needed.</t>

<section anchor="closing-idle-sessions" title="Closing Idle Sessions">

<t>A client is NOT required to wait until the idle-timeout timer expires
before closing a session.
A client MAY close a session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably anticipated
future need for an idle session, then the client SHOULD close that connection.</t>

<t>If, at any time during the life of the session,
the idle timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the session,
the client MUST gracefully close the connection with a TCP FIN
(or equivalent for other protocols).</t>

<t>If, at any time during the life of the session, twice the idle timeout value
(i.e., 30 seconds by default) elapses without there being any operation
active on the session, the server SHOULD consider the client delinquent,
and forcibly abort the session.
For sessions over TCP (or over TLS over TCP),
to avoid the burden of having a connection in TIME-WAIT state, instead of
closing the connection gracefully with a TCP FIN the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).
(In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.)</t>

<t>In this context, an operation being active on a session includes
a query waiting for a response, an update waiting for a response,
or an outstanding Push Notification subscription <xref target="I-D.ietf-dnssd-push"/>,
but not a Session Signaling Keepalive message exchange itself.
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If the client wishes to keep an idle session open for longer than
the default duration without having to send traffic every 15 seconds,
then it uses the Session Signaling Keepalive message to request
longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-idle-timeout" title="Values for the Idle Timeout">

<t>For the idle timeout value, lower values result in more frequent session 
teardown and re-establishment. Higher values result in lower traffic and CPU
load on the server, but a larger memory burden to maintain state for idle 
sessions.</t>

<t>A shorter idle timeout with a longer keepalive interval signals to the client 
that it should not speculatively keep idle sessions open for very long for no 
reason, but when it does have an active reason to keep a session open, it 
doesn’t need to be sending an agressive level of keepalive traffic. Only when 
the client has a very long-lived low-traffic operation outstanding like a Push 
Notification subscription, does the keepalive interval timer come into play, to 
ensure that a sufficient residual
amount of traffic is generated to maintain NAT and firewall state.</t>

<t>A longer idle timeout with a shorter keepalive interval signals to the client
that it may speculatively keep idle sessions open for a long time, but it
should be sending a lot of keepalive traffic on those idle sessions.
This configuration is expected to be less common.</t>

<t>To avoid excessive traffic the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an idle timeout value less than ten seconds.
If a client receives an Keepalive message specifying an idle timeout value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="the-keepalive-interval" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and attempt re-connection if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a session,
the client MUST take action to keep the session alive.
To keep the session alive the client MUST send a
Session Signaling Keepalive message (see <xref target="keepalive"/>).
A Session Signaling Keepalive message exchange resets only the keepalive
interval timer, not the idle timeout timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its session,
leaving long-lived outstanding operations like
Push Notification subscriptions uncanceled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a session,
the server SHOULD consider the client delinquent,
and forcibly abort the connection with a TCP RST (or equivalent for other 
protocols).</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in higher volume keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a session open for the same length of time
(determined by the idle timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address that is not in the same IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>For environments where there is a NAT gateway or firewalls on the path, it is
RECOMMENDED that clients request, and servers grant, a keepalive interval of 15
minutes. In other environments it is RECOMMENDED that clients request, and 
servers grant, a keepalive interval of 60 minutes.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, an keepalive interval value of 100ms would result in a
continuous stream of at least ten messages per second, in both directions,
to keep the session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with an keepalive interval value less than ten seconds.
If a client receives an Keepalive message specifying an keepalive interval value
less than ten seconds this is an error and the client MUST immediately
terminate the connection with a TCP RST (or equivalent for other protocols).</t>

</section>
</section>
<section anchor="server-initiated-termination-on-error" title="Server-Initiated Termination on Error">

<t>After sending an error response to a client, the server MAY close the session,
or may allow the session to remain open. For error conditions
that only affect the single operation in question, the server SHOULD return an
error response to the client and leave the session open for further operations.
For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and 
then close the session by sending a Retry Delay request message, as described in 
<xref target="delay"/>.</t>

</section>
<section anchor="client-behaviour-in-receiving-an-error" title="Client Behaviour in Receiving an Error">

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the session. An error relating to one particular operation
on a session does not necessarily imply that all other operations on that
session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
close the session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not close the session then the client
SHOULD continue to use that session for subsequent operations.</t>

</section>
<section anchor="server-initiated-termination-on-overload" title="Server-Initiated Termination on Overload">

<t>Apart from the cases where:</t>

<t><list style="symbols">
  <t>Session Timer expire (see Section xx)</t>
  <t>On error (see Section xx)</t>
  <t>When under load (see below)</t>
</list></t>

<t>a server MUST NOT close a session with a client, except in extraordinary error 
conditions. Closing the session is the
client’s responsibility, to be done at the client’s discretion, when it so 
chooses. A server only closes a session under exceptional circumstances, such as
when the server application software or underlying operating system is
restarting, the server application terminated unexpectedly (perhaps due to a
bug that makes it crash), or the server is undergoing maintenance procedures.
When possible, a server SHOULD send a Retry Delay message informing the
client of the reason for the session being closed, and allow the client
five seconds to receive it before the server resorts to forcibly aborting the 
connection.</t>

</section>
<section anchor="retry" title="Retry Delay Operation TLV">

<t>There may be rare cases where a server is overloaded and wishes to shed load.
If a server is low on resources it MAY simply terminate a client connection with 
a TCP RST (or equivalent for other protocols).
However, the likely behaviour of the client may be simply to to treat this as a
network failure and connect
immediately, putting more burden on the server.</t>

<t>Therefore to avoid this reconnection implosion, a server SHOULD instead choose 
to shed client load by sending a Retry Delay request message, with an RCODE of 
SERVFAIL, to inform the client of the overload situation. After sending a Retry 
Delay request message, the server MUST NOT send any further messages on that 
session.</t>

<t>After sending the Retry Delay request the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD abort
the connection with a TCP RST (or equivalent for other protocols).</t>

<t>Upon receipt of a Retry Delay request from the server, the client MUST
make note of the reconnect delay for this server, and then immediately
close the connection. This is to place the burden of TCP’s TIME-WAIT state on 
the client.</t>

<t>A Retry Delay request message MUST NOT be initiated by a client.
If a server receives a Retry Delay request message this is an error
and the server MUST immediately terminate the connection with a TCP RST
(or equivalent for other protocols).</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the moment a server chooses to initiate a Retry Delay request message
there may be DNS requests already in flight from client to server on this 
session, which will arrive at the server after its Retry Delay request message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay request message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all sessions en masse with a REFUSED (5) RCODE,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.
It is likely that some of the attempts will be successful and some will not.</t>

<t>In the case where a server is terminating a large number of sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a session is closed by the server, the client SHOULD try to reconnect,
to that server, or to another suitable server, if more than one is available.
If reconnecting to the same server, the client MUST respect the indicated delay
before attempting to reconnect.</t>

</section>
</section>
</section>
<section anchor="sharing" title="Connection Sharing">

<t>(QUESTION: RFC7766 already has Section 6.2.2 that specifies “Concurrent 
Connections”. I think we should align this section with that so any updates are
explicit.)</t>

<t>A client that supports Session Signaling SHOULD NOT make multiple
connections to the same DNS server.</t>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single client device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dns-session-signaling-opcode-registration" title="DNS Session Signaling OPCODE Registration">

<t>IANA are directed to assign a value (tentatively 6)
in the DNS OPCODEs Registry for the Session Signaling OPCODE.</t>

</section>
<section anchor="dns-session-signaling-rcode-registration" title="DNS Session Signaling RCODE Registration">

<t>IANA are directed to assign a value (tentatively 11)
in the DNS RCODE Registry for the SSOPNOTIMP error code.</t>

</section>
<section anchor="dns-session-signaling-type-codes-registry" title="DNS Session Signaling Type Codes Registry">

<t>IANA are directed to create the DNS Session Signaling Type Codes
Registry, with initial values as follows:</t>

<texttable>
      <ttcol align='right'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0x0000</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0x0002 - 0x003F</c>
      <c>Unassigned, reserved for session management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0x0040 - 0xF7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xF800 - 0xFBFF</c>
      <c>Reserved for local / experimental use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0xFC00 - 0xFFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>Registration of additional Session Signaling Type Codes requires publication
of an appropriate IETF “Standards Action” or “IESG Approval” document <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS over TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Tim Chown,
Ralph Droms,
Jan Komissar,
and Manju Shankar Rao
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC2132;
&RFC1918;
&RFC5226;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;


    </references>



  </back>

<!-- ##markdown-source:
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
AHIeP/yoxAAA

-->

</rfc>

