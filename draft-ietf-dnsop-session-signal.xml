<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.sctl-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.sctl-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-06" category="std" updates="RFC 1035, RFC 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 919 867 1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="26"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO (tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in
“Key words for use in RFCs to Indicate Requirement Levels”, when,
and only when, they appear in all capitals, as shown here
<xref target="RFC2119"/> <xref target="RFC8174"/>.</t>

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described
above, and is in no way related to the anachronistic term “session”
as used in the obsolete “seven-layer model” that shaped the design
of the failed OSI protocols of the 1980s.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same server instance for at least one hour.</t>

<t>This document uses the term “same server instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same server instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same server instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different server instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations are not expected to resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same server instance”.</t>
</list></t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis, that establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement,
so all implementations of DSO are required to implement the Keepalive TLV.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
(tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in this base specification,
sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE (tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value (tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an mDNS Relay client has subscribed to receive inbound
mDNS traffic from an mDNS Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its mDNS Relay link subscription, thereby indicating
its support of mDNS Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                            DSO-TYPE                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                        DSO DATA LENGTH                        |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                      TYPE-DEPENDENT DATA                      /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO DATA LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the TYPE-DEPENDENT DATA.</t>
  <t hangText='TYPE-DEPENDENT DATA:'>
  Type-code specific format. The generic DSO machinery treats the
TYPE-DEPENDENT DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the TYPE-DEPENDENT DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI (tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.sctl-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.sctl-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is NOT REQUIRED to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose to
shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
For example, an RCODE value of SERVFAIL indicates that the server is overloaded
due to resource exhaustion, or is restarting.
An RCODE value of NOTAUTH indicates that the server has been reconfigured and is
no longer able to perform one or more of the functions currently being performed
on this DSO Session because it no longer has authority over the names in question.
An RCODE value of REFUSED indicates a policy change regarding this session.
An RCODE value of FORMERR indicates that the client requests are
too badly malformed for the session to continue.
The format of the Retry Delay TLV is described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that server instance, or to another suitable server instance, if more than one is available.
If reconnecting to the same server instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the server instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular server instance does not want a client to reconnect ever
(perhaps the server instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid server instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the server instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The TYPE-DEPENDENT DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The TYPE-DEPENDENT DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
MUST indicate the reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion, or is restarting.</t>
  <t>REFUSED indicates that the server has been reconfigured
and due to a policy change is no longer able to perform one or more
of the functions currently being performed on this DSO Session</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and is no longer able to perform one or more
of the functions currently being performed on this DSO Session
because it no longer has authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay request.
Servers sending Retry Delay requests SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay requests, so clients MUST be prepared
to accept Retry Delay requests with any RCODE value.</t>

<t>The RCODE value received in the message header of a Retry Delay
unacknowledged message is generally usually useful only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this server instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The TYPE-DEPENDENT DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DATA LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
     +--------------+--------------+--------------------------+
     |      QR      |  MESSAGE ID  |  Interpretation          |
     +--------------+--------------+--------------------------+
     |      0       |   Nonzero    |  Request Message         |
     +--------------+--------------+--------------------------+
     |      1       |   Nonzero    |  Response Message        |
     +--------------+--------------+--------------------------+
     |      0       |     Zero     |  Unacknowledged Message  |
     +--------------+--------------+--------------------------+
     |      1       |     Zero     |  Invalid                 |
     +--------------+--------------+--------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent to back the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value (tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value (tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) signifies that the DSO-TYPE
of the primary TLV in the DSO request message is not implemented by the receiver.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.sctl-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIACLxnFoAA+W963YbR5Yu+D+eIof6YVINwKRky7Jq9TpFS5TNLt2KpOyq
PmemVwJIEGkBmejMhChY1lrzCvMG51nOo8yTzL5G7MgLRMkuT02PqtUWwURk
XHbs+/72eDx2Td6sskfJkxeXyWWTNtliu0pebrIqbfKyqN28nBXpGh6YV+mi
GedZsxjPi7rcjOusruGRcZ1fF+lqfPzAzeHrj5J7xycPxyfjew9cvqkeJU21
rZt7x8ffHt9zaZWlj5LzosmqImvczTW99+Wr5KeyepMX18n3VbnduDc34aHx
E3yvm6XNo6Ru5m67wbfUj5KLp4+Tk+P7X4/oX9988+CBc7NyDqM8SrYwyYdu
kz9ySTJOmnJG/6136ypb1PzvsmroB5dum2VZ0ZPwN0nyAgefJN9lq1Ve00e8
ARfpzn5YVtdhlsnlrm6ydZ08hj2DofPtegS/nE3o0XQ6rbK38PTlY/q5hldn
sJ5vvz5OHi/TCsaAvcfP6NezvNnB67L5TVnOk8fwE39czmEWj0+Tb786fnBf
PtoWTQUPv748pQ82y7KAh/7lJHkAY391735yAltPv8rWab56lFTp7s95PZvA
9OMlX05gLlm9zKvMLPqy2cL84t/Qyk83m1UWlqhLOoGPFnmRN1nyrCw3Zj2P
t0BUTV6UrcV8fXzy1ccW89Xxw+Tbb75K7t87/sYuZibT+nOKs5nMynW8pn+b
JE/yGVBWXRZmUf9WLovWL2hNlzC7+bYIp3qVzZZFuSqv86yOTlKetEunf4+T
5+l1Ok9XWZE8zmA5mXz88t2irObJ5SzPilmWvEqrN2Zv+LdmY17+7avkq+9P
W/uC2zpP/gIkPqeV+n34OZ3/ueYpdTfhsn8TLtMq/S+1CTUsaHgXribJs2wd
7cAVjBM+o8V/BxxqUZYN3ePtCsj1OiLv74AtAruclpUl4x+vkuOv7x+f9JOx
TG8NrKMs/rzYXm97KBWm92pbA2ercjvDch1/TJN8XaSLRb7K4eN5NLuDA8s/
YP/z66WZ5ovHyb1vHhw//Nht+/bk2+Thg2+Sk/v3I9axkZn8eZoW1z/TGlxe
wKGtQVa8zfDwX6TXq+zJKdNBk1bXOK1l02weffnlzc3NpCZ2otcWmdCXmxT4
Qv1lgd+cZ6t0l83T2ZsveQSWTVePXyWvsorehISzqcrpCrntLN3WcIjTHWwi
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
0CPJheH+Hw5pe3rccQEA

-->

</rfc>

