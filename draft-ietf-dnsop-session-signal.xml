<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC6335 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY I-D.ietf-tls-tls13 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-10" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
        <postal>
          <street>Brattleboro</street>
          <code>VT 05301</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="June" day="07"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The use of transports for DNS other than UDP is being increasingly specified,
for example, DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and DNS over TLS <xref target="RFC7858"/>.
Such transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages.</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (the EDNS(0) TCP Keepalive option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.
The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.
It is likely that future updates to these tools will add the ability
to recognize, decode, and display the DSO data.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour.</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>“DSO” is used to mean DNS Stateful Operation.</t>

<t>The term “connection” means a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>

<t>The unqualified term “session” in the context of this document means the exchange of
DNS messages over a connection where:</t>

<t><list style="symbols">
  <t>The connection between client and server is persistent and relatively
long-lived (i.e., minutes or hours, rather than seconds).</t>
  <t>Either end of the connection may initiate messages to the other.</t>
</list></t>

<t>In this document the term “session” is used exclusively as described above.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>

<t>A “DSO Session” is established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>A “DSO Session” is terminated when the underlying connection is closed.
The underlying connection can be closed in two ways:</t>

<t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>

<t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>

<t>The term “server” means the software with a listening socket, awaiting
incoming connection requests.</t>

<t>The term “client” means the software which initiates a connection
to the server’s listening socket.</t>

<t>The terms “initiator” and “responder” correspond respectively to the
initial sender and subsequent receiver of a DSO request message or unacknowledged message,
regardless of which was the “client” and “server” in the usual DNS sense.</t>

<t>The term “sender” may apply to
either an initiator (when sending a DSO request message or unacknowledged message)
or a responder (when sending a DSO response message).</t>

<t>Likewise, the term “receiver” may apply to
either a responder (when receiving a DSO request message or unacknowledged message)
or an initiator (when receiving a DSO response message).</t>

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.
The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.
Given that these fatal error conditions signify defective software,
and given that defective software is likely to remain defective for
some time until it is fixed, after forcibly aborting a connection,
a client SHOULD refrain from automatically reconnecting to that
same service instance for at least one hour.</t>

<t>This document uses the term “same service instance” as follows:</t>

<t><list style="symbols">
  <t>In cases where a server is specified or configured using
an IP address and TCP port number,
two different configurations are referring to the same service instance if they
contain the same IP address and TCP port number.</t>
  <t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.
In these cases, configurations with different hostnames are considered
to be referring to different service instances, even if those different hostnames
happen to be aliases, or happen to resolve to the same IP address(es).
Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>
</list></t>

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
If a change in network topology causes packets in a particular TCP connection
to be sent to an anycast server instance that does not know about the
connection, the normal keepalive and TCP connection timeout process will allow
for recovery. If after the connection is, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t>The term “long-lived operations” refers to operations
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/>,
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>,
and other future long-lived DNS operations that choose to use
DSO as their basis. These operations establish state that persists beyond
the lifetime of a traditional brief request/response transaction.
This document, the base specification for DNS Stateful Operations,
defines a framework for supporting long-lived operations,
but does not itself define any long-lived operations.
Nonetheless, to appreciate the design rationale behind
DNS Stateful Operations, it is helpful to understand
the kind of long-lived operations that it is intended to support.</t>

<t>DNS Stateful Operations uses three kinds of message:
“DSO request messages”, “DSO response messages”, and
“DSO unacknowledged messages”.
A DSO request message elicits a DSO response message.
DSO unacknowledged messages are unidirectional messages and do not generate any response.</t>

<t>Both DSO request messages and DSO unacknowledged messages are formatted as DNS
request messages (the header QR bit is set to zero, as described in <xref target="format"/>).
One difference is that in DSO request messages the MESSAGE ID field is nonzero;
in DSO unacknowledged messages it is zero.</t>

<t>The content of DSO messages is expressed using type-length-value (TLV) syntax.</t>

<t>In a DSO request message or DSO unacknowledged message
the first TLV is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation;
any other TLVs in a DSO request message or unacknowledged message are referred to as “Additional TLVs”
and serve additional non-primary purposes, which may be related to
the primary purpose, or not, as in the case of the encryption padding TLV.</t>

<t>A DSO response message may contain no TLVs, or it may contain one
or more TLVs as appropriate to the information being communicated.
In the context of DSO response messages,
one or more TLVs with the same DSO-TYPE as the Primary TLV in the
corresponding DSO request message are referred to as “Response Primary TLVs”.
Any other TLVs with different DSO-TYPEs are referred to as “Response Additional TLVs”.
The Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>Two timers (elapsed time since an event) are defined in this document:</t>

<t><list style="symbols">
  <t>an inactivity timer (see <xref target="inactivetimer"/> and <xref target="keepalive"/>)</t>
  <t>a keepalive timer (see <xref target="keepalivetimer"/> and <xref target="keepalive"/>)</t>
</list></t>

<t>The timeouts associated with these timers are called
the inactivity timeout and 
the keepalive interval, respectively. 
The term “Session Timeouts” is used to refer to this pair of timeout values.</t>

<t>Resetting a timer means resetting the timer value to zero and starting the timer again.
Clearing a timer means resetting the timer value to zero but NOT starting the timer again.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="discussion" title="Discussion">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the EDNS(0)
TCP Keepalive option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="details" title="Protocol Details">

<section anchor="establishment" title="DSO Session Establishment">

<t>DSO messages MUST be carried in only protocols and in
environments where a session may be established according to the definition
given above in the Terminology section (<xref target="terminology"/>).</t>

<t>DNS over plain UDP <xref target="RFC0768"/> is not appropriate since it fails on the requirement for
in-order message delivery, and, in the presence of NAT gateways and firewalls
with short UDP timeouts, it fails to provide a persistent bi-directional
communication channel unless an excessive amount of keepalive traffic is used.</t>

<t>At the time of publication, DSO is specified only
for DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>, and
for DNS over TLS over TCP <xref target="RFC7858"/>.
Any use of DSO over some other connection technology needs to be
specified in an appropriate future document.</t>

<t>Determining whether a given connection is using DNS over TCP, or DNS
over TLS over TCP, is outside the scope of this specification, and
must be determined using some out-of-band configuration information.
There is no provision within the DSO specification to
turn TLS on or off during the lifetime of a connection.
For service types where the service instance is discovered
using a DNS SRV record <xref target="RFC2782"/>,
the specification for that service type SRV name <xref target="RFC6335"/>
will state whether the connection uses plain TCP, or TLS over TCP.
For example, the specification for the
“_dns‑push‑tls._tcp” service <xref target="I-D.ietf-dnssd-push"/>,
states that it uses TLS.
It is a common convention that protocols specified to run over TLS
are given IANA service type names ending in “‑tls”.</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unacknowledged messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.
Similarly, unless it is known in advance by other means that a server
does support DSO, a client MUST NOT initiate
DSO unacknowledged messages until after a DSO Session has been mutually established.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client SHOULD NOT
issue further DSO messages on that connection.</t>

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Note that for clients that implement only the DSO-TYPEs defined in
this base specification, sending a DSO Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a DSO Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same target hostname and port, the client SHOULD use a single
shared DSO Session for all those operations.
A client SHOULD NOT open multiple connections to the same target host and port
just because the names being operated on are different or
happen to fall within different zones.
This requirement is to reduce unnecessary connection load on the DNS server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>There is increased awareness today of the performance benefits
of eliminating round trips in session establishment.
Technologies like TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="I-D.ietf-tls-tls13"/>
provide mechanisms to reduce or eliminate
round trips in session establishment.</t>

<t>Similarly, DSO supports zero round-trip operation.</t>

<t>Having initiated a connection to a server, possibly using
zero round-trip TCP Fast Open and/or
zero round-trip TLS 1.3, a client MAY send multiple
response-requiring DSO request messages to the server in succession
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send non-response-requiring DSO request
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder, or
session multiplexer) is in the path, the middlebox MUST NOT blindly
forward DSO messages in either direction, and MUST treat the inbound
and outbound connections as separate sessions.  This does not preclude
the use of DSO messages in the presence of an IP-layer middlebox, such
as a NAT that rewrites IP-layer and/or transport-layer headers but
otherwise preserves the effect of a single session between the client
and the server.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned,
unless a future IETF Standard specifies otherwise.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In an unacknowledged message the MESSAGE ID field MUST be set to zero.
In an acknowledged request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is acknowledged or unacknowledged is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message the primary TLV of which is specified to be unacknowledged,
nor can an acknowledgment be prevented by sending a message ID of zero
in a message with a primary TLV that is specified to be acknowledged.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a request or unacknowledged message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a request or unacknowledged message.</t>

<t>In a response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the request message being responded to.
In a response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception, unless a future IETF Standard specifies otherwise.</t>

<t><vspace blankLines='999' /></t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO message may be a request message, a response message, or an unacknowledged message.</t>

<t>A DSO request message or DSO unacknowledged message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unacknowledged message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is an acknowledged or unacknowledged operation.
In some cases it may be appropriate to include other TLVs in a request message or unacknowledged message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs”.</t>

<t>A DSO response message may contain no TLVs,
or it may be specified to contain one or more TLVs
appropriate to the information being communicated.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify unacknowledged messages.
Unacknowledged messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unacknowledged messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unacknowledged,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unacknowledged message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unacknowledged messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unacknowledged messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure of the request message
(the request message does not contain a unique MESSAGE ID with
which to associate a response with its corresponding request).
Unacknowledged messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unacknowledged messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after an Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from an Discovery
Relay, the subsequent stream of received
packets is then sent using unacknowledged messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>The specification for a TLV states whether that DSO-TYPE may be used in
“Primary”, “Additional”, “Response Primary”, or “Response Additional” TLVs.
The specification for a TLV also states whether,
when used as the Primary (i.e., first) TLV in a DNS request message (i.e., QR=0),
that DSO message is to be acknowledged.
If the DSO message is to be acknowledged, the specification
also states which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is stated in the specification for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unacknowledged message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unacknowledged message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unacknowledged message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized-tlvs" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unacknowledged message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unacknowledged message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
MUST NOT contain an EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an EDNS(0) TCP Keepalive Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is unacknowledged or acknowledged is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unacknowledged message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is an acknowledged DSO request, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID MUST NOT
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
MUST NOT be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unacknowledged message is unsuccessful for some reason,
the responder immediately aborts the connection.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="dso-response-generation" title="DSO Response Generation">

<t>With most TCP implementations, for DSO requests that generate a response,
the TCP data acknowledgement (generated because data has been received by TCP),
the TCP window update (generated because TCP has delivered that data to the receiving software),
and the DSO response (generated by the receiving application-layer software itself)
are all combined into a single IP packet.
Combining these three elements into a single IP packet
can give a significant improvement in network efficiency.</t>

<t>For DSO requests that do not generate a response,
the TCP implementation generally doesn’t have any way to know
that no response will be forthcoming, so it waits fruitlessly
for the application-layer software to generate a response,
until the Delayed ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds)
and only then does it send the TCP ACK and window update.
In conjunction with Nagle’s Algorithm at the sender,
this can delay the sender’s transmission of its next
(non-full-sized) TCP segment, while the sender is waiting for
its previous (non-full-sized) TCP segment to be acknowledged,
which won’t happen until the Delayed ACK timer fires.
Nagle’s Algorithm exists to combine multiple small
application writes into more-efficient large TCP segments,
to guard against wasteful use of the network by applications
that would otherwise transmit a stream of small TCP segments,
but in this case Nagle’s Algorithm (created to improve network efficiency)
can interact badly with TCP’s Delayed ACK feature
(also created to improve network efficiency) <xref target="NagleDA"/>
with the result of delaying some messages by up to 200 milliseconds.</t>

<t>Possible mitigations for this problem include:</t>

<t><list style="symbols">
  <t>Disable Nagle’s Algorithm at the sender. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Disable Delayed ACK at the receiver. This is not great,<vspace />
because it results in less efficient use of the network.</t>
  <t>Adding padding data to fill the segment. This is not great,
because it uses additional bandwidth.</t>
  <t>Use a networking API that lets the receiver signal to the TCP
implementation that the receiver has received and processed a client
request for which it will not be generating any immediate response.
This allows the TCP implementation to operate efficiently in both cases;
for requests that generate a response, the TCP ACK, window update, and
DSO response are transmitted together in a single TCP segment,
and for requests that do not generate a response,
the application-layer software informs the TCP implementation
that it should go ahead and send the TCP ACK and window update
immediately, without waiting for the Delayed ACK timer.
Unfortunately it is not known at this time which (if any) of the
widely-available networking APIs currently include this capability.</t>
</list></t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="dso-session-initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. Operations SHOULD be pipelined (i.e., the
client doesn’t need wait for a response before sending the next message).
The server MUST act on messages in the order they are transmitted, but
responses to those messages SHOULD be sent out of order when appropriate.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the DSO Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of keepalive traffic to maintain that session.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="closing-inactive-dso-sessions" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no keepalive traffic.
Note that after signaling that the client should generate no keepalive traffic in this way,
at any point the server may revise that keepalive traffic requirement by sending
a new Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current DSO Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>Normally a server MUST NOT close a DSO Session with a client.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

<section anchor="outstanding-operations" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the RECONNECT DELAY MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different RECONNECT delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="client-reconnection" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the Keepalive request message MUST
be sent as an acknowledged request, with a nonzero MESSAGE ID.
If a server receives a Keepalive DSO message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent Keepalive DSO requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a Keepalive message MAY be initiated by a server.
When sent by a server, the Keepalive message MUST be
sent as an unacknowledged message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The Keepalive unacknowledged message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>The Keepalive TLV is not used as an Additional TLV.</t>

<t>In response messages the Keepalive TLV is used only as a Response Primary TLV,
replying to a Keepalive request message from the client.
A Keepalive TLV MUST NOT be added as to other responses a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a Keepalive request message from the client,
then it does so by sending an unacknowledged Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the DSO Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is 
straightforward. The act of receiving the message containing the DSO Keepalive 
TLV itself resets the keepalive timer and updates the keepalive interval for the 
DSO Session. The new keepalive interval indicates the 
maximum time that may elapse before another message must be sent
or received on this DSO Session, if the DSO Session is to remain alive.</t>

<t><vspace blankLines='999' /></t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the DSO Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the DSO Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="relation-to-edns0-tcp-keepalive-option" title="Relation to EDNS(0) TCP Keepalive Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has similar
intent to the EDNS(0) TCP Keepalive Option <xref target="RFC7828"/>.
A client/server pair that supports DSO MUST NOT use the
EDNS(0) TCP KeepAlive option within any message after a DSO 
Session has been established.
Once a DSO Session has been established, if either
client or server receives a DNS message over the DSO Session that contains an
EDNS(0) TCP Keepalive option, this is a fatal error and the receiver of the
EDNS(0) TCP Keepalive option MUST forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unacknowledged) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in an unacknowledged message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is an unacknowledged message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO request message or DSO unacknowledged message to a server.
If a server receives a DNS request message (i.e., QR=0) where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unacknowledged Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unacknowledged Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlv-usage" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unacknowledged messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unacknowledged message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unacknowledged message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
requests or unacknowledged messages from server to client, and the corresponding responses from client back to server.</t>

<figure><artwork><![CDATA[
              +-------------------------+-------------------------+
              | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
 +------------+-------------------------+-------------------------+
 | KeepAlive  |  X              X       |       X                 |
 +------------+-------------------------+-------------------------+
 | RetryDelay |                      X  |       X                 |
 +------------+-------------------------+-------------------------+
 | Padding    |            X         X  |            X         X  |
 +------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
At the time of publication of this document, the Designated Expert
for the newly created DSO Type Code registry is [<spanx style="strong">TBD</spanx>].</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious Retry Delay Unacknowledged Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

<t><vspace blankLines='999' /></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC7766;
&RFC6891;
&RFC7828;
&RFC2119;
&RFC8174;
&RFC1034;
&RFC2136;
&RFC7830;
&RFC1918;
&RFC5382;
&RFC2132;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&RFC2782;
&I-D.ietf-dnssd-push;
&I-D.ietf-dnssd-mdns-relay;
&RFC6763;
&RFC0768;
&RFC6335;
&RFC7413;
&I-D.ietf-tls-tls13;
&RFC6762;
&RFC1122;
&I-D.ietf-dprive-padding-policy;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAH5sGVsAA+2963YbR5Yu+D+eIof6YVINwKRky7Zq9ZqmJMpml25FUnZV
9+nplQASRFpAJjozIQqWtda8wrzBeZbzKPMks68RO/ICUbLLU9NrVK02RSQi
47Jj3/e3x+Oxa/JmlT1Mnry4TC6btMkW21XycpNVaZOXRe3m5axI1/DAvEoX
zTjPmsV4XtTlZlxndQ2PjOv8ukhX45NjN4evP0zuHZ98O34w/sblm+ph0lTb
url3fPzd8T2XVln6MDkvmqwqssbdXNNrX75KfiqrN3lxnXxflduNe3MTHho/
wde6Wdo8TOpm7rYbfEn9MDk5vv/1KPnmmwcPnJuVc/j2w2QLc/vWbfKHLknG
SVPO6L/1bl1li5p/LquG/uHSbbMsK3oS/iZJXsCgF5PkUbZa5TX9itd9ke7s
L8vqOswuudzVTbauk8ewVTB0vl2P4MPZhB5Np9MqewtPXz6mf9fw6gzW8d3X
x8njZVrBGLDl+Dv6eJY3O3hdNr8py3nyGP7Fvy7nMIvHp8l3Xx0/uC+/2hZN
BQ+/vjylX2yWZQEP/dNJcvjg6+Oj5Kt798cnsOn0YbZO89XDpEp3/5LXswks
IF705QRmk9XLvMrMsi+bLcww/oTWfrrZrLKwSF3UyyKTj16l1Zvkp3RnFvV4
CwTV5EXZWtHXxydffXRFXx1/e5R8990DoLCTaEUzmdu/pPjeyaxcxwv710ny
JJ8BYdVlYVb2r+WyaH1AC7uE+c23RTjcq2y2LMpVeZ1ndXSg8qRdP/08Tp6n
1+k8XWVF8jiDBWXy65fvFmU1Ty5neVbMeIfM7vCnZmte/vWr5KvvT1s7U+RN
Nk/+DJQ+p5X6ffg5nf9LzVPqbsJl/yZcplX632oTaljQ8C5cTZJn2TragSsY
J/yOFv8IGNSiLBu6ztsVEOx1ROOPgCkCs5yWlSXkH6+S46/vH5/0E7JMbw0c
pCz+ZbG93vZQKkzv1bYGxlbldoblOv41TfJ1kS4W+SqHX8+j2R0cWDYC+59f
L800XzxO7n3z4Pjbj963706+O0q+ffDN+OT+/ei+bWQu/zJNi+ufaRUuL+DY
1iAr3mZ4/C/S61X25JQpoUmra5zYsmk2D7/88ubmZlITV9GLi7zoy00KvKH+
ssBvzrNVusvm6ezNlzwCy6arx6+SV1lFb0LS2VTldIVsd5ZuazjG6Q62EWaW
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
t+862NN6rGQDvYNBpnDtBEiZc7ptQDwcea9O5+jJ6R7krJ+oQkxKCp7Kn7yl
jXC3Lb3qASqWQ4nqf0ZcHOqS4xF2QL3OUgaFpHg4OXYsnYRFM8TbEJhjwrDb
ZNqvVuXMO91QMeqk4dS+Vw/GQ1GnCav5g+dx1RYGHXISN2IWuqg6dpQGf38Q
ModtmPSj2M1K2alAv9P8esvYy5HTNfjvIrfrFaP6F4y3jvoMA2OhmD35hubr
FXoejmHK4YoIzbnu53Vy/O4Y/pyM4b9P4Y9B98ZWnULrfZdbum/1DnkiQ574
IaXDIwwpm9M3JJ8ERQzGqI0TrcOzJw9CHWTdUCmbUb6YJ7qOsCg7Mfpg6mMW
sX2Fk2pbBSgPTMffwpZT4BYSfhSnv5quJoSNa2esfaw0H2yZeigC9epuGyrX
MQzfHUqlZU8toXLdKltlb3EP++vgbY6jkhooL9LUjuQnHceILZaoo5CZvi7N
UZqjlqdGXmSzj61P0HxQFZONnvg6IRqYICd00ShT1wl+GK+5maJ6841C+/fa
P1ZNeK4DsA2xbiOD+QdcnDZK+6k7kxpw5sTDwpP6rF7JTpcG01+jpZLsrZXm
rue16Q4vHZG5lE0yLckT3R6hXCgYFUGiGdoNafujv18tNjnYaDANy9XOJhoP
O2i3hYHcJMaFKe5cTTlysepv3smTqluzmkQv7Yk2fMrbtF2P100ogu6rh+S2
MAIATUPyrNNABTiAON7jIZRmULuPblcRT7Gv0MQqdxTCXJZgojsCHZ17DixX
jkgqPMV9H7Dor/UcawBrss9BgZMEbZlzwV4gYUScbctAkezooVBkrxSNJsvo
4k56THXjLDH6HlIlsEJR2u1UCZp8Qe5RboBjscz3TBylWSiDpfJUROQ2dS3R
3ouY80Tn21R1lpR8wpLQUel6DioGF+mplB91mrH4ynnMTd9Irbn0U+vMpGtJ
9PQVSrdNiX5fdlnNVmXd2f1JchrGDiF6NMONiAmctePU8HxMtc8cVQoKs/Mp
4ZG0jlWFibMDcRcV1GW5rpxInbtKsNu8XbCEj3HGi/a2Yzj3gb5P9J0IZXIO
DJKxGbAoxpvtZHujndx3rqOEO4ErnLi2L1Lz3+vK1glA++s8/aIXkx1BWl7S
t9W0fjYyaFewFmQnyMDOJCKb25LEDcpC1XwvffrOVZakbwPqEIHGCrlpOyxt
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
UszabaxvvzRRnRWhHfioTU7r8Imu/qYtz2+KViImpRr6eHUMvqdRoHhTpxmf
IkKRUpwnIsufqO2kb8bRgwnrNOato3TaZUYAA5qtyn58J8kOg4CzMvs9I1DK
ghRV+C4APnx18vVYBGgbXbvXt0Wj9XgBJC0ILSxgUqtdnM7hky0LX5Rki71Z
RmpqarCc1UteS3uwwBl8lzK3j6jENGf8dgkS2fCRSXjqggk81tyzYk5uiHIR
8mcGSL+lpxiRYa8B0mVHveyVQCNXRur97eRWpNUsU8mGcx+Z/FBJAvn0erpY
OFFws0hfjW9OW+ogkZDaNNU6U4FbIDelb3GhQSfRbnG0ITkSFmpSorDL04IH
bAuRNnJUr38Gf2mPneciu+fRDF0NhiYmu4nU4p2iXjZKKareKT3Gba1aG+ZI
YrBvQcRzX+DHoIi3Pu+4W60iybPDIro+F56JbcLXokYvUoOxk/Cgj+JL3oEu
TQ312riLFAekm5qWd5BKBMGIgbp9BxWK//UcWR/07r5Tc/7UfOR/zcmA02aV
+V4pfFZpYUYIb3KhXYA04auN73o8HlNpZidW7APjjnCBNaBNjlFxqmohG8gH
yocyrpq0G2/4fApDAlO/hrOU1u/e4JuPE+Wjn2NttPiFV1iWzfNtuZbio+by
HJ/aBqzFw/8Mel55mUiqw2CiQxxHPvDUF7lzRIWJAkCtrk305W1hQaP9hvyJ
C/+1RlBU3LiNkD1ej5gzfJ7ubqKefwmNdFDue9BTG27pNXQLujn2XJZLN8tD
vxSY0eLTVwdey3DCYa294M8t04Vm0MVBju5/r0b2CXsBct637/3YVrQIUtM6
nQ+nLbhSi7WWGAPfxisY1pvVqUKQH+y6PwKc+NnnrsnVEqoL4KefvG6nQ1Fa
a7T+NpK+LJzXbAoa/8gFBwdvQI78KNkHF1FU4RCcywFfCttCdrmV/Ro8eq35
R9MsGOWmfjhSlo5+8z6JoszpPpo2rlAnjBlV911Yg8fobqiL0BL7VGHoLH8b
+ftYqPfXXpiwsxM5H/sMyooLsroJj3ljXVVOobpbL08L27+b3maaHWBuIlxs
bMvkTIvNvvO+JU6oTw+lLhpaUHgGttTh8RG1gQ7i4yW3txmK6UeCZ082D/KX
Ol/nq7QiZCq2NPBL+14r/tRvvr33LRUiyYZ9qfcwzSVJURALmGy8uS+p6679
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
1LQCPZJcIO7/Abjf8HbvdgEA

-->

</rfc>

